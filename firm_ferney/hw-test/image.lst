
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  000006f4  000006f4  00000748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000006fc  000006fc  00000750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000008  00000710  00000710  00000764  2**2
                  ALLOC
  4 .debug_abbrev 000002e2  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072c  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000043a  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  000015ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000378  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000127  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000097  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000021c  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 de 	calli 444 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 10 	ori gp,gp,0x710
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 10 	ori r1,r1,0x710
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 18 	ori r3,r3,0x718

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 a7 	calli 3d8 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <hexprint>:


//#define DEBUG

void hexprint(unsigned int hexval)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 08 	sw (sp+8),r11
 210:	5b 9d 00 04 	sw (sp+4),ra
 214:	b8 20 58 00 	mv r11,r1
  unsigned char digit[8];
  int pos;
  uart_putstr("0x");
 218:	78 01 00 00 	mvhi r1,0x0
 21c:	38 21 06 f4 	ori r1,r1,0x6f4
 220:	f8 00 01 28 	calli 6c0 <uart_putstr>
  for(pos = 0; pos < 8; pos++)
    {
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
 224:	01 66 00 04 	srui r6,r11,4
 228:	01 65 00 08 	srui r5,r11,8
 22c:	01 64 00 0c 	srui r4,r11,12
 230:	01 63 00 10 	srui r3,r11,16
 234:	01 62 00 14 	srui r2,r11,20
 238:	01 61 00 18 	srui r1,r11,24
  unsigned char digit[8];
  int pos;
  uart_putstr("0x");
  for(pos = 0; pos < 8; pos++)
    {
      digit[pos] = (hexval & 0x0F);  /* last hexit */
 23c:	21 67 00 0f 	andi r7,r11,0xf
 240:	20 21 00 0f 	andi r1,r1,0xf
 244:	20 c6 00 0f 	andi r6,r6,0xf
 248:	20 a5 00 0f 	andi r5,r5,0xf
 24c:	20 84 00 0f 	andi r4,r4,0xf
 250:	20 63 00 0f 	andi r3,r3,0xf
 254:	20 42 00 0f 	andi r2,r2,0xf
 258:	01 6b 00 1c 	srui r11,r11,28
 25c:	33 81 00 12 	sb (sp+18),r1
 260:	33 87 00 0c 	sb (sp+12),r7
 264:	33 86 00 0d 	sb (sp+13),r6
 268:	33 85 00 0e 	sb (sp+14),r5
 26c:	33 84 00 0f 	sb (sp+15),r4
 270:	33 83 00 10 	sb (sp+16),r3
 274:	33 82 00 11 	sb (sp+17),r2
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 278:	34 01 00 09 	mvi r1,9
 27c:	50 2b 00 33 	bgeu r1,r11,348 <hexprint+0x140>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 280:	35 61 00 37 	addi r1,r11,55
 284:	f8 00 01 06 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 288:	43 81 00 12 	lbu r1,(sp+18)
 28c:	34 02 00 09 	mvi r2,9
 290:	50 41 00 4e 	bgeu r2,r1,3c8 <hexprint+0x1c0>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 294:	34 21 00 37 	addi r1,r1,55
 298:	20 21 00 ff 	andi r1,r1,0xff
 29c:	f8 00 01 00 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 2a0:	43 81 00 11 	lbu r1,(sp+17)
 2a4:	34 02 00 09 	mvi r2,9
 2a8:	50 41 00 44 	bgeu r2,r1,3b8 <hexprint+0x1b0>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 2ac:	34 21 00 37 	addi r1,r1,55
 2b0:	20 21 00 ff 	andi r1,r1,0xff
 2b4:	f8 00 00 fa 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 2b8:	43 81 00 10 	lbu r1,(sp+16)
 2bc:	34 02 00 09 	mvi r2,9
 2c0:	50 41 00 3a 	bgeu r2,r1,3a8 <hexprint+0x1a0>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 2c4:	34 21 00 37 	addi r1,r1,55
 2c8:	20 21 00 ff 	andi r1,r1,0xff
 2cc:	f8 00 00 f4 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 2d0:	43 81 00 0f 	lbu r1,(sp+15)
 2d4:	34 02 00 09 	mvi r2,9
 2d8:	50 41 00 30 	bgeu r2,r1,398 <hexprint+0x190>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 2dc:	34 21 00 37 	addi r1,r1,55
 2e0:	20 21 00 ff 	andi r1,r1,0xff
 2e4:	f8 00 00 ee 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 2e8:	43 81 00 0e 	lbu r1,(sp+14)
 2ec:	34 02 00 09 	mvi r2,9
 2f0:	50 41 00 26 	bgeu r2,r1,388 <hexprint+0x180>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 2f4:	34 21 00 37 	addi r1,r1,55
 2f8:	20 21 00 ff 	andi r1,r1,0xff
 2fc:	f8 00 00 e8 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 300:	43 81 00 0d 	lbu r1,(sp+13)
 304:	34 02 00 09 	mvi r2,9
 308:	50 41 00 1c 	bgeu r2,r1,378 <hexprint+0x170>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 30c:	34 21 00 37 	addi r1,r1,55
 310:	20 21 00 ff 	andi r1,r1,0xff
 314:	f8 00 00 e2 	calli 69c <uart_putchar>
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
 318:	43 81 00 0c 	lbu r1,(sp+12)
 31c:	34 02 00 09 	mvi r2,9
 320:	54 22 00 0d 	bgu r1,r2,354 <hexprint+0x14c>
        uart_putchar(digit[pos] + '0' );
 324:	34 21 00 30 	addi r1,r1,48
 328:	20 21 00 ff 	andi r1,r1,0xff
 32c:	f8 00 00 dc 	calli 69c <uart_putchar>
      else
        uart_putchar(digit[pos] + 'A' - 10);
    }
  uart_putchar('.');
 330:	34 01 00 2e 	mvi r1,46
 334:	f8 00 00 da 	calli 69c <uart_putchar>
}
 338:	2b 9d 00 04 	lw ra,(sp+4)
 33c:	2b 8b 00 08 	lw r11,(sp+8)
 340:	37 9c 00 10 	addi sp,sp,16
 344:	c3 a0 00 00 	ret
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
        uart_putchar(digit[pos] + '0' );
 348:	35 61 00 30 	addi r1,r11,48
 34c:	f8 00 00 d4 	calli 69c <uart_putchar>
 350:	e3 ff ff ce 	bi 288 <hexprint+0x80>
      else
        uart_putchar(digit[pos] + 'A' - 10);
 354:	34 21 00 37 	addi r1,r1,55
 358:	20 21 00 ff 	andi r1,r1,0xff
 35c:	f8 00 00 d0 	calli 69c <uart_putchar>
    }
  uart_putchar('.');
 360:	34 01 00 2e 	mvi r1,46
 364:	f8 00 00 ce 	calli 69c <uart_putchar>
}
 368:	2b 9d 00 04 	lw ra,(sp+4)
 36c:	2b 8b 00 08 	lw r11,(sp+8)
 370:	37 9c 00 10 	addi sp,sp,16
 374:	c3 a0 00 00 	ret
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
        uart_putchar(digit[pos] + '0' );
 378:	34 21 00 30 	addi r1,r1,48
 37c:	20 21 00 ff 	andi r1,r1,0xff
 380:	f8 00 00 c7 	calli 69c <uart_putchar>
 384:	e3 ff ff e5 	bi 318 <hexprint+0x110>
 388:	34 21 00 30 	addi r1,r1,48
 38c:	20 21 00 ff 	andi r1,r1,0xff
 390:	f8 00 00 c3 	calli 69c <uart_putchar>
 394:	e3 ff ff db 	bi 300 <hexprint+0xf8>
 398:	34 21 00 30 	addi r1,r1,48
 39c:	20 21 00 ff 	andi r1,r1,0xff
 3a0:	f8 00 00 bf 	calli 69c <uart_putchar>
 3a4:	e3 ff ff d1 	bi 2e8 <hexprint+0xe0>
 3a8:	34 21 00 30 	addi r1,r1,48
 3ac:	20 21 00 ff 	andi r1,r1,0xff
 3b0:	f8 00 00 bb 	calli 69c <uart_putchar>
 3b4:	e3 ff ff c7 	bi 2d0 <hexprint+0xc8>
 3b8:	34 21 00 30 	addi r1,r1,48
 3bc:	20 21 00 ff 	andi r1,r1,0xff
 3c0:	f8 00 00 b7 	calli 69c <uart_putchar>
 3c4:	e3 ff ff bd 	bi 2b8 <hexprint+0xb0>
 3c8:	34 21 00 30 	addi r1,r1,48
 3cc:	20 21 00 ff 	andi r1,r1,0xff
 3d0:	f8 00 00 b3 	calli 69c <uart_putchar>
 3d4:	e3 ff ff b3 	bi 2a0 <hexprint+0x98>

000003d8 <main>:
    }
  uart_putchar('.');
}

int main()
{
 3d8:	37 9c ff f4 	addi sp,sp,-12
 3dc:	5b 8b 00 0c 	sw (sp+12),r11
 3e0:	5b 8c 00 08 	sw (sp+8),r12
 3e4:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t w_c=0;

	uint8_t valor= 0;


	gpio0->dir=(0x01);
 3e8:	78 0b 00 00 	mvhi r11,0x0
 3ec:	39 6b 07 04 	ori r11,r11,0x704
 3f0:	29 63 00 00 	lw r3,(r11+0)
 3f4:	34 02 00 01 	mvi r2,1
	}*/



	gpio0->dir = 0x01;
	uart_putchar('0' );
 3f8:	34 01 00 30 	mvi r1,48
	uint8_t w_c=0;

	uint8_t valor= 0;


	gpio0->dir=(0x01);
 3fc:	58 62 00 08 	sw (r3+8),r2
	uart_putchar(valor );
	}*/



	gpio0->dir = 0x01;
 400:	58 62 00 08 	sw (r3+8),r2
	uart_putchar('0' );
 404:	f8 00 00 a6 	calli 69c <uart_putchar>
	
for(;;)
{
valor=gpio0->read;
valor=valor>>1;
if(valor==1)
 408:	34 0c 00 01 	mvi r12,1
 40c:	e0 00 00 04 	bi 41c <main+0x44>
{pin_inv(1);
	msleep1(2000);
	}
else
{pin_inv(1);
 410:	f8 00 00 42 	calli 518 <pin_inv>
	msleep1(500);}
 414:	34 01 01 f4 	mvi r1,500
 418:	f8 00 00 51 	calli 55c <msleep1>
	gpio0->dir = 0x01;
	uart_putchar('0' );
	
for(;;)
{
valor=gpio0->read;
 41c:	29 62 00 00 	lw r2,(r11+0)
if(valor==1)
{pin_inv(1);
	msleep1(2000);
	}
else
{pin_inv(1);
 420:	34 01 00 01 	mvi r1,1
	gpio0->dir = 0x01;
	uart_putchar('0' );
	
for(;;)
{
valor=gpio0->read;
 424:	28 42 00 00 	lw r2,(r2+0)
 428:	20 42 00 ff 	andi r2,r2,0xff
valor=valor>>1;
if(valor==1)
 42c:	00 42 00 01 	srui r2,r2,1
 430:	5c 4c ff f8 	bne r2,r12,410 <main+0x38>
{pin_inv(1);
 434:	f8 00 00 39 	calli 518 <pin_inv>
	msleep1(2000);
 438:	34 01 07 d0 	mvi r1,2000
 43c:	f8 00 00 48 	calli 55c <msleep1>
 440:	e3 ff ff f7 	bi 41c <main+0x44>

00000444 <irq_handler>:



void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 444:	78 01 00 00 	mvhi r1,0x0
 448:	38 21 07 00 	ori r1,r1,0x700
 44c:	28 22 00 00 	lw r2,(r1+0)
 450:	34 03 00 0e 	mvi r3,14
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 454:	78 01 00 00 	mvhi r1,0x0



void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 458:	58 43 00 00 	sw (r2+0),r3
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 45c:	38 21 07 14 	ori r1,r1,0x714
 460:	78 02 00 00 	mvhi r2,0x0
 464:	40 23 00 00 	lbu r3,(r1+0)
 468:	38 42 07 10 	ori r2,r2,0x710
 46c:	40 44 00 00 	lbu r4,(r2+0)
	estado_actual=estado_actual+1;
 470:	34 62 00 01 	addi r2,r3,1
 474:	20 42 00 ff 	andi r2,r2,0xff
void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 478:	94 83 18 00 	sr r3,r4,r3
	estado_actual=estado_actual+1;
 47c:	30 22 00 00 	sb (r1+0),r2
	if (estado_actual>7)
 480:	34 04 00 07 	mvi r4,7
void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 484:	20 63 00 01 	andi r3,r3,0x1
	estado_actual=estado_actual+1;
	if (estado_actual>7)
 488:	50 82 00 02 	bgeu r4,r2,490 <irq_handler+0x4c>
		estado_actual=0;
 48c:	30 20 00 00 	sb (r1+0),r0



void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 490:	5c 60 00 09 	bne r3,r0,4b4 <irq_handler+0x70>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 494:	78 01 00 00 	mvhi r1,0x0
 498:	38 21 07 04 	ori r1,r1,0x704
 49c:	28 21 00 00 	lw r1,(r1+0)
 4a0:	34 02 ff fe 	mvi r2,-2
 4a4:	28 23 00 00 	lw r3,(r1+0)
 4a8:	a0 62 10 00 	and r2,r3,r2
 4ac:	58 22 00 04 	sw (r1+4),r2
 4b0:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 4b4:	78 01 00 00 	mvhi r1,0x0
 4b8:	38 21 07 04 	ori r1,r1,0x704
 4bc:	28 21 00 00 	lw r1,(r1+0)
 4c0:	28 22 00 00 	lw r2,(r1+0)
 4c4:	38 42 00 01 	ori r2,r2,0x1
 4c8:	58 22 00 04 	sw (r1+4),r2
 4cc:	c3 a0 00 00 	ret

000004d0 <set_pin>:
 */



void set_pin(uint8_t value, uint8_t npin)
{
 4d0:	20 21 00 ff 	andi r1,r1,0xff
 4d4:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 4d8:	5c 20 00 09 	bne r1,r0,4fc <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 4dc:	78 01 00 00 	mvhi r1,0x0
 4e0:	38 21 07 04 	ori r1,r1,0x704
 4e4:	28 21 00 00 	lw r1,(r1+0)
 4e8:	a4 40 10 00 	not r2,r2
 4ec:	28 23 00 00 	lw r3,(r1+0)
 4f0:	a0 43 10 00 	and r2,r2,r3
 4f4:	58 22 00 04 	sw (r1+4),r2
 4f8:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 4fc:	78 01 00 00 	mvhi r1,0x0
 500:	38 21 07 04 	ori r1,r1,0x704
 504:	28 21 00 00 	lw r1,(r1+0)
 508:	28 23 00 00 	lw r3,(r1+0)
 50c:	b8 43 10 00 	or r2,r2,r3
 510:	58 22 00 04 	sw (r1+4),r2
 514:	c3 a0 00 00 	ret

00000518 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 518:	78 02 00 00 	mvhi r2,0x0
 51c:	38 42 07 04 	ori r2,r2,0x704
 520:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 524:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 528:	28 43 00 00 	lw r3,(r2+0)
 52c:	a4 60 18 00 	not r3,r3



void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 530:	a0 23 18 00 	and r3,r1,r3
 534:	5c 60 00 06 	bne r3,r0,54c <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 538:	28 43 00 00 	lw r3,(r2+0)
 53c:	a4 20 08 00 	not r1,r1
 540:	a0 23 08 00 	and r1,r1,r3
 544:	58 41 00 04 	sw (r2+4),r1
 548:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 54c:	28 43 00 00 	lw r3,(r2+0)
 550:	b8 23 08 00 	or r1,r1,r3
 554:	58 41 00 04 	sw (r2+4),r1
 558:	c3 a0 00 00 	ret

0000055c <msleep1>:
void msleep1(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 55c:	78 04 00 00 	mvhi r4,0x0
 560:	38 84 06 f8 	ori r4,r4,0x6f8
 564:	28 83 00 00 	lw r3,(r4+0)
 568:	78 02 00 00 	mvhi r2,0x0
 56c:	38 42 07 00 	ori r2,r2,0x700
 570:	28 42 00 00 	lw r2,(r2+0)
 574:	88 23 08 00 	mul r1,r1,r3
 578:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 57c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 580:	34 01 00 08 	mvi r1,8
 584:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 588:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 58c:	20 21 00 01 	andi r1,r1,0x1
 590:	44 20 ff fe 	be r1,r0,588 <msleep1+0x2c>
}
 594:	c3 a0 00 00 	ret

00000598 <usleep1>:
void usleep1(uint32_t usec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*usec;
 598:	78 02 00 00 	mvhi r2,0x0
 59c:	38 42 07 00 	ori r2,r2,0x700
 5a0:	28 42 00 00 	lw r2,(r2+0)
 5a4:	08 21 00 64 	muli r1,r1,100
 5a8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 5ac:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN   ;
 5b0:	34 01 00 08 	mvi r1,8
 5b4:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 5b8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5bc:	20 21 00 01 	andi r1,r1,0x1
 5c0:	44 20 ff fe 	be r1,r0,5b8 <usleep1+0x20>
}
 5c4:	c3 a0 00 00 	ret

000005c8 <tic_isr>:



void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5c8:	78 01 00 00 	mvhi r1,0x0
 5cc:	38 21 07 00 	ori r1,r1,0x700
 5d0:	28 22 00 00 	lw r2,(r1+0)
 5d4:	34 03 00 0e 	mvi r3,14
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 5d8:	78 01 00 00 	mvhi r1,0x0



void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5dc:	58 43 00 00 	sw (r2+0),r3
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 5e0:	38 21 07 14 	ori r1,r1,0x714
 5e4:	78 02 00 00 	mvhi r2,0x0
 5e8:	40 23 00 00 	lbu r3,(r1+0)
 5ec:	38 42 07 10 	ori r2,r2,0x710
 5f0:	40 44 00 00 	lbu r4,(r2+0)
	estado_actual=estado_actual+1;
 5f4:	34 62 00 01 	addi r2,r3,1
 5f8:	20 42 00 ff 	andi r2,r2,0xff
void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 5fc:	94 83 18 00 	sr r3,r4,r3
	estado_actual=estado_actual+1;
 600:	30 22 00 00 	sb (r1+0),r2
	if (estado_actual>7)
 604:	34 04 00 07 	mvi r4,7
void tic_isr()
{
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
//	pin_inv(PIN1);
	uint8_t bit;
	bit=(v_ch1 >> estado_actual) & 0x01;
 608:	20 63 00 01 	andi r3,r3,0x1
	estado_actual=estado_actual+1;
	if (estado_actual>7)
 60c:	50 82 00 02 	bgeu r4,r2,614 <tic_isr+0x4c>
		estado_actual=0;
 610:	30 20 00 00 	sb (r1+0),r0



void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 614:	5c 60 00 09 	bne r3,r0,638 <tic_isr+0x70>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 618:	78 01 00 00 	mvhi r1,0x0
 61c:	38 21 07 04 	ori r1,r1,0x704
 620:	28 21 00 00 	lw r1,(r1+0)
 624:	34 02 ff fe 	mvi r2,-2
 628:	28 23 00 00 	lw r3,(r1+0)
 62c:	a0 62 10 00 	and r2,r3,r2
 630:	58 22 00 04 	sw (r1+4),r2
 634:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 638:	78 01 00 00 	mvhi r1,0x0
 63c:	38 21 07 04 	ori r1,r1,0x704
 640:	28 21 00 00 	lw r1,(r1+0)
 644:	28 22 00 00 	lw r2,(r1+0)
 648:	38 42 00 01 	ori r2,r2,0x1
 64c:	58 22 00 04 	sw (r1+4),r2
 650:	c3 a0 00 00 	ret

00000654 <tic_init0>:
	set_pin(bit, PIN1);
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
 654:	78 01 00 00 	mvhi r1,0x0
 658:	38 21 07 00 	ori r1,r1,0x700
 65c:	28 21 00 00 	lw r1,(r1+0)
 660:	34 02 03 e8 	mvi r2,1000
 664:	58 22 00 04 	sw (r1+4),r2
	//timer0->compare0 = 2;
	timer0->counter0 = 0;
 668:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 66c:	34 02 00 0e 	mvi r2,14
 670:	58 22 00 00 	sw (r1+0),r2
}
 674:	c3 a0 00 00 	ret

00000678 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
 678:	78 01 00 00 	mvhi r1,0x0
 67c:	38 21 06 fc 	ori r1,r1,0x6fc
 680:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 684:	28 41 00 00 	lw r1,(r2+0)
 688:	20 21 00 01 	andi r1,r1,0x1
 68c:	44 20 ff fe 	be r1,r0,684 <uart_getchar+0xc>
	return uart0->rxtx;
 690:	28 41 00 04 	lw r1,(r2+4)
}
 694:	20 21 00 ff 	andi r1,r1,0xff
 698:	c3 a0 00 00 	ret

0000069c <uart_putchar>:

void uart_putchar(char c)
{
 69c:	78 02 00 00 	mvhi r2,0x0
 6a0:	38 42 06 fc 	ori r2,r2,0x6fc
 6a4:	28 43 00 00 	lw r3,(r2+0)
 6a8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 6ac:	28 62 00 00 	lw r2,(r3+0)
 6b0:	20 42 00 10 	andi r2,r2,0x10
 6b4:	5c 40 ff fe 	bne r2,r0,6ac <uart_putchar+0x10>
	uart0->rxtx = c;
 6b8:	58 61 00 04 	sw (r3+4),r1
}
 6bc:	c3 a0 00 00 	ret

000006c0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6c0:	40 24 00 00 	lbu r4,(r1+0)
 6c4:	44 80 00 0b 	be r4,r0,6f0 <uart_putstr+0x30>
 6c8:	78 02 00 00 	mvhi r2,0x0
 6cc:	38 42 06 fc 	ori r2,r2,0x6fc
 6d0:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6d4:	28 62 00 00 	lw r2,(r3+0)
 6d8:	20 42 00 10 	andi r2,r2,0x10
 6dc:	5c 40 ff fe 	bne r2,r0,6d4 <uart_putstr+0x14>
	uart0->rxtx = c;
 6e0:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 6e4:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6e8:	40 24 00 00 	lbu r4,(r1+0)
 6ec:	5c 82 ff fa 	bne r4,r2,6d4 <uart_putstr+0x14>
 6f0:	c3 a0 00 00 	ret
