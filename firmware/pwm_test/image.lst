
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000008cc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  000008cc  000008cc  00000920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000008d0  000008d0  00000924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000008e4  000008e4  00000938  2**2
                  ALLOC
  4 .debug_abbrev 000002a9  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000812  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005d3  00000000  00000000  000013f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000411  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ad  00000000  00000000  00001f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000b3  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000261  00000000  00000000  000021f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000245a  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 59 	calli 630 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 f0 	ori gp,gp,0x8f0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 e4 	ori r1,r1,0x8e4
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 09 68 	ori r3,r3,0x968

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 53 	calli 288 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <vsig_pot>:
//********************************************************************************************
// Funciones Volumen - Potenciometro
//********************************************************************************************

uint8_t vsig_pot(uint16_t tvol, uint8_t vm)
{
 208:	20 23 00 ff 	andi r3,r1,0xff
 20c:	20 41 00 ff 	andi r1,r2,0xff
    uint16_t tmax=4000; //4ms - 4000ns - 70 cms aprox
    uint16_t mdiv7=872; //Pent(tmax/7)
    if(tvol>=300 && tvol<(mdiv7)){if(vm==0){return 0;}else if(vm>0){return vm;}}
    else if(tvol>=mdiv7 && tvol<(mdiv7*2)){if(vm<=15){return 15;}else if(vm>15){return vm;}}
 210:	34 02 00 67 	mvi r2,103
 214:	50 43 00 0a 	bgeu r2,r3,23c <vsig_pot+0x34>
 218:	34 02 00 cf 	mvi r2,207
 21c:	48 62 00 05 	bg r3,r2,230 <vsig_pot+0x28>
 220:	34 02 00 0f 	mvi r2,15
 224:	50 22 00 06 	bgeu r1,r2,23c <vsig_pot+0x34>
 228:	34 01 00 0f 	mvi r1,15
 22c:	c3 a0 00 00 	ret
 230:	34 02 00 1e 	mvi r2,30
 234:	50 22 00 02 	bgeu r1,r2,23c <vsig_pot+0x34>
 238:	34 01 00 1e 	mvi r1,30
    else if(tvol>=(mdiv7*3) && tvol<(mdiv7*4)){if(vm<=45){return 45;}else if(vm>45){return vm;}}
    else if(tvol>=(mdiv7*4) && tvol<(mdiv7*5)){if(vm<=60){return 60;}else if(vm>60){return vm;}}
    else if(tvol>=(mdiv7*5) && tvol<(mdiv7*6)){if(vm<=75){return 75;}else if(vm>75){return vm;}}
    else if(tvol>=(mdiv7*6) && tvol<(mdiv7*7)){if(vm<=99){return 99;}else if(vm>99){return vm;}}
    else {return vm;}
}
 23c:	c3 a0 00 00 	ret

00000240 <volumen>:

void volumen(uint8_t va, uint8_t vs)
{
 240:	37 9c ff fc 	addi sp,sp,-4
 244:	5b 9d 00 04 	sw (sp+4),ra
 248:	20 21 00 ff 	andi r1,r1,0xff
 24c:	20 42 00 ff 	andi r2,r2,0xff
    int r1=va-vs;
 250:	c8 22 18 00 	sub r3,r1,r2
    int r2=vs-va;
    uint8_t set=0;

    if(r1<0)
 254:	4c 60 00 06 	bge r3,r0,26c <volumen+0x2c>
}

void volumen(uint8_t va, uint8_t vs)
{
    int r1=va-vs;
    int r2=vs-va;
 258:	c8 41 08 00 	sub r1,r2,r1
    uint8_t set=0;

    if(r1<0)
        {
            set=r2+128-1;
 25c:	34 21 00 7f 	addi r1,r1,127
            set_digpot(set);
 260:	20 21 00 ff 	andi r1,r1,0xff
 264:	f8 00 01 95 	calli 8b8 <set_digpot>
 268:	e0 00 00 05 	bi 27c <volumen+0x3c>
        }
    else if(r1>0)
 26c:	44 60 00 04 	be r3,r0,27c <volumen+0x3c>
        {
            set=r1-1;
 270:	34 61 ff ff 	addi r1,r3,-1
            set_digpot(set);
 274:	20 21 00 ff 	andi r1,r1,0xff
 278:	f8 00 01 90 	calli 8b8 <set_digpot>
        }
    else if(r1==0){;}
}
 27c:	2b 9d 00 04 	lw ra,(sp+4)
 280:	37 9c 00 04 	addi sp,sp,4
 284:	c3 a0 00 00 	ret

00000288 <main>:
//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
{
 288:	37 9c ff bc 	addi sp,sp,-68
 28c:	5b 8b 00 44 	sw (sp+68),r11
 290:	5b 8c 00 40 	sw (sp+64),r12
 294:	5b 8d 00 3c 	sw (sp+60),r13
 298:	5b 8e 00 38 	sw (sp+56),r14
 29c:	5b 8f 00 34 	sw (sp+52),r15
 2a0:	5b 90 00 30 	sw (sp+48),r16
 2a4:	5b 91 00 2c 	sw (sp+44),r17
 2a8:	5b 92 00 28 	sw (sp+40),r18
 2ac:	5b 93 00 24 	sw (sp+36),r19
 2b0:	5b 94 00 20 	sw (sp+32),r20
 2b4:	5b 95 00 1c 	sw (sp+28),r21
 2b8:	5b 96 00 18 	sw (sp+24),r22
 2bc:	5b 97 00 14 	sw (sp+20),r23
 2c0:	5b 98 00 10 	sw (sp+16),r24
 2c4:	5b 99 00 0c 	sw (sp+12),r25
 2c8:	5b 9b 00 08 	sw (sp+8),fp
 2cc:	5b 9d 00 04 	sw (sp+4),ra
    


//Inicializacion de perifericos

gpio_init(0x01); //9BITS  6 ENTRADAS(BOTONES) 3 SALIDAS(2 LEDS Y PWM) PIN1:PWM - PIN2:MODO - PIN3: LEDBLANCO
 2d0:	34 01 00 01 	mvi r1,1
 2d4:	f8 00 01 07 	calli 6f0 <gpio_init>
set_digpot(0x64); //0  Ohms
 2d8:	34 01 00 64 	mvi r1,100
 2dc:	f8 00 01 77 	calli 8b8 <set_digpot>
 2e0:	34 13 00 01 	mvi r19,1
	   
	    c1 = 4+(l*6);			//Escala a dos octavas (14)
	    msleep(500);
	
	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; b3 = 18; c3 = 130; c2 = 20987;}
 2e4:	34 18 00 04 	mvi r24,4
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2e8:	34 15 00 4b 	mvi r21,75
	for (l = 1; l < 15; l++)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	   
	    c1 = 4+(l*6);			//Escala a dos octavas (14)
	    msleep(500);
 2ec:	34 01 01 f4 	mvi r1,500
 2f0:	f8 00 01 32 	calli 7b8 <msleep>
	
	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; b3 = 18; c3 = 130; c2 = 20987;}
 2f4:	53 13 00 61 	bgeu r24,r19,478 <main+0x1f0>
	else if (c1 > 14 && c1 < 20){b1 = 144; b3 = 36; c3 = 146; c2 = 20741;}
 2f8:	36 61 ff fa 	addi r1,r19,-6
 2fc:	20 21 00 ff 	andi r1,r1,0xff
 300:	53 01 00 6c 	bgeu r24,r1,4b0 <main+0x228>
	else if (c1 > 20 && c1 < 26){b1 = 138; b3 = 42; c3 = 150; c2 = 20741;}
 304:	36 61 ff f4 	addi r1,r19,-12
 308:	20 21 00 ff 	andi r1,r1,0xff
 30c:	53 01 00 70 	bgeu r24,r1,4cc <main+0x244>
	else if (c1 > 26 && c1 < 32){b1 = 124; b3 = 56; c3 = 166; c2 = 20741;}
 310:	36 61 ff ee 	addi r1,r19,-18
 314:	20 21 00 ff 	andi r1,r1,0xff
 318:	53 01 00 74 	bgeu r24,r1,4e8 <main+0x260>
	else if (c1 > 32 && c1 < 38){b1 = 112; b3 = 68; c3 = 181; c2 = 20495;}
 31c:	36 61 ff e8 	addi r1,r19,-24
 320:	20 21 00 ff 	andi r1,r1,0xff
 324:	53 01 00 78 	bgeu r24,r1,504 <main+0x27c>
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
 328:	36 61 ff e2 	addi r1,r19,-30
 32c:	20 21 00 ff 	andi r1,r1,0xff
 330:	53 01 00 7c 	bgeu r24,r1,520 <main+0x298>
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
 334:	36 61 ff dc 	addi r1,r19,-36
 338:	20 21 00 ff 	andi r1,r1,0xff
 33c:	53 01 00 80 	bgeu r24,r1,53c <main+0x2b4>
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
 340:	36 61 ff d6 	addi r1,r19,-42
 344:	20 21 00 ff 	andi r1,r1,0xff
 348:	53 01 00 84 	bgeu r24,r1,558 <main+0x2d0>
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
 34c:	36 61 ff d0 	addi r1,r19,-48
 350:	20 21 00 ff 	andi r1,r1,0xff
 354:	53 01 00 88 	bgeu r24,r1,574 <main+0x2ec>
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
 358:	36 61 ff ca 	addi r1,r19,-54
 35c:	20 21 00 ff 	andi r1,r1,0xff
 360:	53 01 00 a1 	bgeu r24,r1,5e4 <main+0x35c>
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
 364:	36 61 ff c4 	addi r1,r19,-60
 368:	20 21 00 ff 	andi r1,r1,0xff
 36c:	53 01 00 97 	bgeu r24,r1,5c8 <main+0x340>
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
 370:	36 61 ff be 	addi r1,r19,-66
 374:	20 21 00 ff 	andi r1,r1,0xff
 378:	53 01 00 8d 	bgeu r24,r1,5ac <main+0x324>
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
 37c:	36 61 ff b8 	addi r1,r19,-72
 380:	20 21 00 ff 	andi r1,r1,0xff
 384:	53 01 00 83 	bgeu r24,r1,590 <main+0x308>
	
	b4 = 21 + b3;
 388:	37 32 00 15 	addi r18,r25,21
 38c:	22 52 00 ff 	andi r18,r18,0xff
    
    	for (i=1; i<b4;i++)
 390:	34 01 00 01 	mvi r1,1
 394:	50 32 00 22 	bgeu r1,r18,41c <main+0x194>
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 398:	09 f4 00 4b 	muli r20,r15,75
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
	
	b4 = 21 + b3;
    
    	for (i=1; i<b4;i++)
 39c:	37 6e 00 4c 	addi r14,fp,76

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 3a0:	c8 0f 80 00 	sub r16,r0,r15
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 3a4:	22 94 00 ff 	andi r20,r20,0xff

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 3a8:	ca f4 b0 00 	sub r22,r23,r20
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
	
	b4 = 21 + b3;
    
    	for (i=1; i<b4;i++)
 3ac:	21 ce 00 ff 	andi r14,r14,0xff


//Inicializacion de perifericos

gpio_init(0x01); //9BITS  6 ENTRADAS(BOTONES) 3 SALIDAS(2 LEDS Y PWM) PIN1:PWM - PIN2:MODO - PIN3: LEDBLANCO
set_digpot(0x64); //0  Ohms
 3b0:	34 11 00 01 	mvi r17,1

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 3b4:	22 10 00 ff 	andi r16,r16,0xff
 3b8:	22 d6 00 ff 	andi r22,r22,0xff
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 3bc:	52 ae 00 15 	bgeu r21,r14,410 <main+0x188>
 3c0:	ba 80 68 00 	mv r13,r20

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 3c4:	ba c0 60 00 	mv r12,r22
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 3c8:	34 0b 00 4b 	mvi r11,75
                {
                    c4 = j*c3;
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
 3cc:	34 02 00 01 	mvi r2,1
 3d0:	34 01 00 01 	mvi r1,1
 3d4:	f8 00 00 d6 	calli 72c <set_pin>
   	            nsleep(c4);
 3d8:	b9 a0 08 00 	mv r1,r13
 3dc:	f8 00 01 06 	calli 7f4 <nsleep>
	            set_pin(0,1);
 3e0:	34 02 00 01 	mvi r2,1
 3e4:	34 01 00 00 	mvi r1,0
 3e8:	f8 00 00 d1 	calli 72c <set_pin>
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 3ec:	35 6b 00 01 	addi r11,r11,1
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 3f0:	b9 80 08 00 	mv r1,r12
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 3f4:	b5 af 68 00 	add r13,r13,r15
 3f8:	b5 90 60 00 	add r12,r12,r16
 3fc:	21 6b 00 ff 	andi r11,r11,0xff
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 400:	f8 00 00 fd 	calli 7f4 <nsleep>
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 404:	21 ad 00 ff 	andi r13,r13,0xff
 408:	21 8c 00 ff 	andi r12,r12,0xff
 40c:	55 cb ff f0 	bgu r14,r11,3cc <main+0x144>
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
	
	b4 = 21 + b3;
    
    	for (i=1; i<b4;i++)
 410:	36 31 00 01 	addi r17,r17,1
 414:	22 31 00 ff 	andi r17,r17,0xff
 418:	56 51 ff e9 	bgu r18,r17,3bc <main+0x134>
 41c:	36 73 00 06 	addi r19,r19,6
 420:	22 73 00 ff 	andi r19,r19,0xff
va=0; //Volumen actual



        
	for (l = 1; l < 15; l++)
 424:	34 01 00 55 	mvi r1,85
 428:	5e 61 ff b1 	bne r19,r1,2ec <main+0x64>
	}
    



}
 42c:	2b 9d 00 04 	lw ra,(sp+4)
 430:	2b 8b 00 44 	lw r11,(sp+68)
 434:	2b 8c 00 40 	lw r12,(sp+64)
 438:	2b 8d 00 3c 	lw r13,(sp+60)
 43c:	2b 8e 00 38 	lw r14,(sp+56)
 440:	2b 8f 00 34 	lw r15,(sp+52)
 444:	2b 90 00 30 	lw r16,(sp+48)
 448:	2b 91 00 2c 	lw r17,(sp+44)
 44c:	2b 92 00 28 	lw r18,(sp+40)
 450:	2b 93 00 24 	lw r19,(sp+36)
 454:	2b 94 00 20 	lw r20,(sp+32)
 458:	2b 95 00 1c 	lw r21,(sp+28)
 45c:	2b 96 00 18 	lw r22,(sp+24)
 460:	2b 97 00 14 	lw r23,(sp+20)
 464:	2b 98 00 10 	lw r24,(sp+16)
 468:	2b 99 00 0c 	lw r25,(sp+12)
 46c:	2b 9b 00 08 	lw fp,(sp+8)
 470:	37 9c 00 44 	addi sp,sp,68
 474:	c3 a0 00 00 	ret
	   
	    c1 = 4+(l*6);			//Escala a dos octavas (14)
	    msleep(500);
	
	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; b3 = 18; c3 = 130; c2 = 20987;}
 478:	34 0e 00 ee 	mvi r14,238
 47c:	34 12 00 27 	mvi r18,39
 480:	34 0f 00 82 	mvi r15,130
 484:	34 17 00 fb 	mvi r23,251
 488:	34 19 00 12 	mvi r25,18
 48c:	34 1b 00 a2 	mvi fp,162
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 490:	09 f4 00 4b 	muli r20,r15,75

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 494:	c8 0f 80 00 	sub r16,r0,r15


//Inicializacion de perifericos

gpio_init(0x01); //9BITS  6 ENTRADAS(BOTONES) 3 SALIDAS(2 LEDS Y PWM) PIN1:PWM - PIN2:MODO - PIN3: LEDBLANCO
set_digpot(0x64); //0  Ohms
 498:	34 11 00 01 	mvi r17,1
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 49c:	22 94 00 ff 	andi r20,r20,0xff

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 4a0:	ca f4 b0 00 	sub r22,r23,r20
 4a4:	22 10 00 ff 	andi r16,r16,0xff
 4a8:	22 d6 00 ff 	andi r22,r22,0xff
 4ac:	e3 ff ff c4 	bi 3bc <main+0x134>
	    c1 = 4+(l*6);			//Escala a dos octavas (14)
	    msleep(500);
	
	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; b3 = 18; c3 = 130; c2 = 20987;}
	else if (c1 > 14 && c1 < 20){b1 = 144; b3 = 36; c3 = 146; c2 = 20741;}
 4b0:	34 0e 00 dc 	mvi r14,220
 4b4:	34 12 00 39 	mvi r18,57
 4b8:	34 0f 00 92 	mvi r15,146
 4bc:	34 17 00 05 	mvi r23,5
 4c0:	34 19 00 24 	mvi r25,36
 4c4:	34 1b 00 90 	mvi fp,144
 4c8:	e3 ff ff f2 	bi 490 <main+0x208>
	else if (c1 > 20 && c1 < 26){b1 = 138; b3 = 42; c3 = 150; c2 = 20741;}
 4cc:	34 0e 00 d6 	mvi r14,214
 4d0:	34 12 00 3f 	mvi r18,63
 4d4:	34 0f 00 96 	mvi r15,150
 4d8:	34 17 00 05 	mvi r23,5
 4dc:	34 19 00 2a 	mvi r25,42
 4e0:	34 1b 00 8a 	mvi fp,138
 4e4:	e3 ff ff eb 	bi 490 <main+0x208>
	else if (c1 > 26 && c1 < 32){b1 = 124; b3 = 56; c3 = 166; c2 = 20741;}
 4e8:	34 0e 00 c8 	mvi r14,200
 4ec:	34 12 00 4d 	mvi r18,77
 4f0:	34 0f 00 a6 	mvi r15,166
 4f4:	34 17 00 05 	mvi r23,5
 4f8:	34 19 00 38 	mvi r25,56
 4fc:	34 1b 00 7c 	mvi fp,124
 500:	e3 ff ff e4 	bi 490 <main+0x208>
	else if (c1 > 32 && c1 < 38){b1 = 112; b3 = 68; c3 = 181; c2 = 20495;}
 504:	34 0e 00 bc 	mvi r14,188
 508:	34 12 00 59 	mvi r18,89
 50c:	34 0f 00 b5 	mvi r15,181
 510:	34 17 00 0f 	mvi r23,15
 514:	34 19 00 44 	mvi r25,68
 518:	34 1b 00 70 	mvi fp,112
 51c:	e3 ff ff dd 	bi 490 <main+0x208>
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
 520:	34 0e 00 b0 	mvi r14,176
 524:	34 12 00 65 	mvi r18,101
 528:	34 0f 00 ca 	mvi r15,202
 52c:	34 17 00 0f 	mvi r23,15
 530:	34 19 00 50 	mvi r25,80
 534:	34 1b 00 64 	mvi fp,100
 538:	e3 ff ff d6 	bi 490 <main+0x208>
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
 53c:	34 0e 00 a6 	mvi r14,166
 540:	34 12 00 6f 	mvi r18,111
 544:	34 0f 00 ec 	mvi r15,236
 548:	34 17 00 fb 	mvi r23,251
 54c:	34 19 00 5a 	mvi r25,90
 550:	34 1b 00 5a 	mvi fp,90
 554:	e3 ff ff cf 	bi 490 <main+0x208>
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
 558:	34 0e 00 9d 	mvi r14,157
 55c:	34 12 00 78 	mvi r18,120
 560:	34 0f 00 04 	mvi r15,4
 564:	34 17 00 fb 	mvi r23,251
 568:	34 19 00 63 	mvi r25,99
 56c:	34 1b 00 51 	mvi fp,81
 570:	e3 ff ff c8 	bi 490 <main+0x208>
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
 574:	34 0e 00 94 	mvi r14,148
 578:	34 12 00 81 	mvi r18,129
 57c:	34 0f 00 25 	mvi r15,37
 580:	34 17 00 05 	mvi r23,5
 584:	34 19 00 6c 	mvi r25,108
 588:	34 1b 00 48 	mvi fp,72
 58c:	e3 ff ff c1 	bi 490 <main+0x208>
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
 590:	34 0e 00 7e 	mvi r14,126
 594:	34 12 00 97 	mvi r18,151
 598:	34 0f 00 95 	mvi r15,149
 59c:	34 17 00 0f 	mvi r23,15
 5a0:	34 19 00 82 	mvi r25,130
 5a4:	34 1b 00 32 	mvi fp,50
 5a8:	e3 ff ff ba 	bi 490 <main+0x208>
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
 5ac:	34 0e 00 84 	mvi r14,132
 5b0:	34 12 00 91 	mvi r18,145
 5b4:	34 0f 00 6a 	mvi r15,106
 5b8:	34 17 00 0f 	mvi r23,15
 5bc:	34 19 00 7c 	mvi r25,124
 5c0:	34 1b 00 38 	mvi fp,56
 5c4:	e3 ff ff b3 	bi 490 <main+0x208>
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
 5c8:	34 0e 00 8a 	mvi r14,138
 5cc:	34 12 00 8b 	mvi r18,139
 5d0:	34 0f 00 4c 	mvi r15,76
 5d4:	34 17 00 05 	mvi r23,5
 5d8:	34 19 00 76 	mvi r25,118
 5dc:	34 1b 00 3e 	mvi fp,62
 5e0:	e3 ff ff ac 	bi 490 <main+0x208>
	else if (c1 > 32 && c1 < 38){b1 = 112; b3 = 68; c3 = 181; c2 = 20495;}
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
 5e4:	34 0e 00 91 	mvi r14,145
 5e8:	34 12 00 84 	mvi r18,132
 5ec:	34 0f 00 2d 	mvi r15,45
 5f0:	34 17 00 05 	mvi r23,5
 5f4:	34 19 00 6f 	mvi r25,111
 5f8:	34 1b 00 45 	mvi fp,69
 5fc:	e3 ff ff a5 	bi 490 <main+0x208>

00000600 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 600:	c3 a0 00 00 	ret

00000604 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 604:	78 01 00 00 	mvhi r1,0x0
 608:	38 21 09 64 	ori r1,r1,0x964
 60c:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 610:	78 02 00 00 	mvhi r2,0x0
 614:	38 42 08 d0 	ori r2,r2,0x8d0
 618:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 61c:	34 63 00 01 	addi r3,r3,1
 620:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 624:	34 01 00 0e 	mvi r1,14
 628:	58 41 00 00 	sw (r2+0),r1
}
 62c:	c3 a0 00 00 	ret

00000630 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 630:	37 9c ff f0 	addi sp,sp,-16
 634:	5b 8b 00 10 	sw (sp+16),r11
 638:	5b 8c 00 0c 	sw (sp+12),r12
 63c:	5b 8d 00 08 	sw (sp+8),r13
 640:	5b 9d 00 04 	sw (sp+4),ra
 644:	78 0b 00 00 	mvhi r11,0x0
 648:	39 6b 08 e4 	ori r11,r11,0x8e4
 64c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 650:	35 6d 00 80 	addi r13,r11,128
 654:	e0 00 00 04 	bi 664 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 658:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 65c:	45 6d 00 08 	be r11,r13,67c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 660:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 664:	21 81 00 01 	andi r1,r12,0x1
 668:	44 20 ff fc 	be r1,r0,658 <irq_handler+0x28>
 66c:	29 61 00 00 	lw r1,(r11+0)
 670:	35 6b 00 04 	addi r11,r11,4
 674:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 678:	5d 6d ff fa 	bne r11,r13,660 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 67c:	2b 9d 00 04 	lw ra,(sp+4)
 680:	2b 8b 00 10 	lw r11,(sp+16)
 684:	2b 8c 00 0c 	lw r12,(sp+12)
 688:	2b 8d 00 08 	lw r13,(sp+8)
 68c:	37 9c 00 10 	addi sp,sp,16
 690:	c3 a0 00 00 	ret

00000694 <isr_init>:

void isr_init()
{
 694:	78 01 00 00 	mvhi r1,0x0
 698:	78 02 00 00 	mvhi r2,0x0
 69c:	38 21 08 e4 	ori r1,r1,0x8e4
 6a0:	38 42 06 00 	ori r2,r2,0x600
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 6a4:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 6a8:	58 22 00 00 	sw (r1+0),r2
 6ac:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 6b0:	5c 23 ff fe 	bne r1,r3,6a8 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 6b4:	c3 a0 00 00 	ret

000006b8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 6b8:	78 03 00 00 	mvhi r3,0x0
 6bc:	3c 21 00 02 	sli r1,r1,2
 6c0:	38 63 08 e4 	ori r3,r3,0x8e4
 6c4:	b4 61 18 00 	add r3,r3,r1
 6c8:	58 62 00 00 	sw (r3+0),r2
}
 6cc:	c3 a0 00 00 	ret

000006d0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 6d0:	78 03 00 00 	mvhi r3,0x0
 6d4:	3c 21 00 02 	sli r1,r1,2
 6d8:	38 63 08 e4 	ori r3,r3,0x8e4
 6dc:	78 02 00 00 	mvhi r2,0x0
 6e0:	b4 61 18 00 	add r3,r3,r1
 6e4:	38 42 06 00 	ori r2,r2,0x600
 6e8:	58 62 00 00 	sw (r3+0),r2
}
 6ec:	c3 a0 00 00 	ret

000006f0 <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura, 1 es puerto escritura o salida
 6f0:	78 02 00 00 	mvhi r2,0x0
 6f4:	38 42 08 d4 	ori r2,r2,0x8d4
 6f8:	28 42 00 00 	lw r2,(r2+0)
 6fc:	58 41 00 08 	sw (r2+8),r1
}
 700:	c3 a0 00 00 	ret

00000704 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 704:	78 01 00 00 	mvhi r1,0x0
 708:	38 21 08 d4 	ori r1,r1,0x8d4
 70c:	28 21 00 00 	lw r1,(r1+0)
 710:	28 21 00 00 	lw r1,(r1+0)
}
 714:	c3 a0 00 00 	ret

00000718 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 718:	78 02 00 00 	mvhi r2,0x0
 71c:	38 42 08 d4 	ori r2,r2,0x8d4
 720:	28 42 00 00 	lw r2,(r2+0)
 724:	58 41 00 04 	sw (r2+4),r1
}
 728:	c3 a0 00 00 	ret

0000072c <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 72c:	20 21 00 ff 	andi r1,r1,0xff
 730:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 734:	5c 20 00 09 	bne r1,r0,758 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 738:	78 01 00 00 	mvhi r1,0x0
 73c:	38 21 08 d4 	ori r1,r1,0x8d4
 740:	28 21 00 00 	lw r1,(r1+0)
 744:	a4 40 10 00 	not r2,r2
 748:	28 23 00 00 	lw r3,(r1+0)
 74c:	a0 43 10 00 	and r2,r2,r3
 750:	58 22 00 04 	sw (r1+4),r2
 754:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 758:	78 01 00 00 	mvhi r1,0x0
 75c:	38 21 08 d4 	ori r1,r1,0x8d4
 760:	28 21 00 00 	lw r1,(r1+0)
 764:	28 23 00 00 	lw r3,(r1+0)
 768:	b8 43 10 00 	or r2,r2,r3
 76c:	58 22 00 04 	sw (r1+4),r2
 770:	c3 a0 00 00 	ret

00000774 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 774:	78 02 00 00 	mvhi r2,0x0
 778:	38 42 08 d4 	ori r2,r2,0x8d4
 77c:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 780:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 784:	28 43 00 00 	lw r3,(r2+0)
 788:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 78c:	a0 23 18 00 	and r3,r1,r3
 790:	5c 60 00 06 	bne r3,r0,7a8 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 794:	28 43 00 00 	lw r3,(r2+0)
 798:	a4 20 08 00 	not r1,r1
 79c:	a0 23 08 00 	and r1,r1,r3
 7a0:	58 41 00 04 	sw (r2+4),r1
 7a4:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 7a8:	28 43 00 00 	lw r3,(r2+0)
 7ac:	b8 23 08 00 	or r1,r1,r3
 7b0:	58 41 00 04 	sw (r2+4),r1
 7b4:	c3 a0 00 00 	ret

000007b8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 7b8:	78 04 00 00 	mvhi r4,0x0
 7bc:	38 84 08 cc 	ori r4,r4,0x8cc
 7c0:	28 83 00 00 	lw r3,(r4+0)
 7c4:	78 02 00 00 	mvhi r2,0x0
 7c8:	38 42 08 d0 	ori r2,r2,0x8d0
 7cc:	28 42 00 00 	lw r2,(r2+0)
 7d0:	88 23 08 00 	mul r1,r1,r3
 7d4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 7d8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7dc:	34 01 00 08 	mvi r1,8
 7e0:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 7e4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7e8:	20 21 00 01 	andi r1,r1,0x1
 7ec:	44 20 ff fe 	be r1,r0,7e4 <msleep+0x2c>
}
 7f0:	c3 a0 00 00 	ret

000007f4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 7f4:	78 02 00 00 	mvhi r2,0x0
 7f8:	38 42 08 d0 	ori r2,r2,0x8d0
 7fc:	28 42 00 00 	lw r2,(r2+0)
 800:	08 21 00 64 	muli r1,r1,100
 804:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 808:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 80c:	34 01 00 08 	mvi r1,8
 810:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 814:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 818:	20 21 00 01 	andi r1,r1,0x1
 81c:	44 20 ff fe 	be r1,r0,814 <nsleep+0x20>
}
 820:	c3 a0 00 00 	ret

00000824 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 824:	78 01 00 00 	mvhi r1,0x0
 828:	38 21 08 d0 	ori r1,r1,0x8d0
 82c:	28 23 00 00 	lw r3,(r1+0)
 830:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 834:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 838:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 83c:	38 21 09 64 	ori r1,r1,0x964

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 840:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 844:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 848:	78 02 00 00 	mvhi r2,0x0
 84c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 850:	34 04 00 0e 	mvi r4,14
 854:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 858:	38 21 08 e4 	ori r1,r1,0x8e4
 85c:	38 42 06 04 	ori r2,r2,0x604
 860:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 864:	c3 a0 00 00 	ret

00000868 <trigger_set0>:
//***************************************************************************
// Estructura del periferico TRIGGER 0 
//***************************************************************************
void trigger_set0(uint32_t st)
{
    trigger0->set_trig = st;
 868:	78 02 00 00 	mvhi r2,0x0
 86c:	38 42 08 dc 	ori r2,r2,0x8dc
 870:	28 42 00 00 	lw r2,(r2+0)
 874:	58 41 00 00 	sw (r2+0),r1
}
 878:	c3 a0 00 00 	ret

0000087c <read_count0>:

uint32_t read_count0()
{
    return trigger0->c_out;
 87c:	78 01 00 00 	mvhi r1,0x0
 880:	38 21 08 dc 	ori r1,r1,0x8dc
 884:	28 21 00 00 	lw r1,(r1+0)
 888:	28 21 00 04 	lw r1,(r1+4)
}
 88c:	c3 a0 00 00 	ret

00000890 <trigger_set1>:
//***************************************************************************
// Estructura del periferico TRIGGER 1
//***************************************************************************
void trigger_set1(uint32_t st)
{
    trigger1->set_trig = st;
 890:	78 02 00 00 	mvhi r2,0x0
 894:	38 42 08 e0 	ori r2,r2,0x8e0
 898:	28 42 00 00 	lw r2,(r2+0)
 89c:	58 41 00 00 	sw (r2+0),r1
}
 8a0:	c3 a0 00 00 	ret

000008a4 <read_count1>:

uint32_t read_count1()
{
    return trigger1->c_out;
 8a4:	78 01 00 00 	mvhi r1,0x0
 8a8:	38 21 08 e0 	ori r1,r1,0x8e0
 8ac:	28 21 00 00 	lw r1,(r1+0)
 8b0:	28 21 00 04 	lw r1,(r1+4)
}
 8b4:	c3 a0 00 00 	ret

000008b8 <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 8b8:	78 02 00 00 	mvhi r2,0x0
 8bc:	38 42 08 d8 	ori r2,r2,0x8d8
 8c0:	28 42 00 00 	lw r2,(r2+0)
 8c4:	58 41 00 00 	sw (r2+0),r1

}
 8c8:	c3 a0 00 00 	ret
