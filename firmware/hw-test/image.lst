
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000630  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  00000630  00000630  00000684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000638  00000638  0000068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000064c  0000064c  000006a0  2**2
                  ALLOC
  4 .debug_abbrev 000002b1  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004d7  00000000  00000000  0000112f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e7  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ab  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000b9  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000022c  00000000  00000000  00001c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 95 	calli 320 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 50 	ori gp,gp,0x650
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 4c 	ori r1,r1,0x64c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 d0 	ori r3,r3,0x6d0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************
int main()
{
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
 	uint16_t b1, b2, b3, b4;

	uint8_t c1, c2, c3, c4, valor;


gpio_init(0x01);
 220:	34 01 00 01 	mvi r1,1
 224:	f8 00 00 6f 	calli 3e0 <gpio_init>
c2=0x002;
trigger_set(c2);
 228:	34 01 00 02 	mvi r1,2
 22c:	f8 00 00 f7 	calli 608 <trigger_set>

msleep(1000);
 230:	34 01 03 e8 	mvi r1,1000
 234:	f8 00 00 a9 	calli 4d8 <msleep>
set_digpot(0xE4);
 238:	34 01 00 e4 	mvi r1,228
 23c:	f8 00 00 f8 	calli 61c <set_digpot>
 240:	78 0b 00 00 	mvhi r11,0x0

c3=counter();
 244:	f8 00 00 99 	calli 4a8 <counter>
 248:	39 6b 06 40 	ori r11,r11,0x640

for(;;)
{
	valor=gpio0->read;
	valor=valor>>1;
	if(valor==1)
 24c:	34 0c 00 01 	mvi r12,1
	{
		trigger_set(0x13);
		pin_inv(1);
		msleep(2000);
	}
	else if(valor==2)
 250:	34 0d 00 02 	mvi r13,2
	{
		trigger_set(0x001);		
		pin_inv(1);
		msleep(200);
	}
	else if(valor==4)
 254:	34 0e 00 04 	mvi r14,4
c3=counter();


for(;;)
{
	valor=gpio0->read;
 258:	29 62 00 00 	lw r2,(r11+0)
		pin_inv(1);
		msleep(5000);
	}
	else
	{
		pin_inv(1);
 25c:	34 01 00 01 	mvi r1,1
c3=counter();


for(;;)
{
	valor=gpio0->read;
 260:	28 42 00 00 	lw r2,(r2+0)
 264:	20 42 00 ff 	andi r2,r2,0xff
	valor=valor>>1;
 268:	00 42 00 01 	srui r2,r2,1
	if(valor==1)
 26c:	44 4c 00 0c 	be r2,r12,29c <main+0x94>
	{
		trigger_set(0x13);
		pin_inv(1);
		msleep(2000);
	}
	else if(valor==2)
 270:	44 4d 00 12 	be r2,r13,2b8 <main+0xb0>
	{
		trigger_set(0x001);		
		pin_inv(1);
		msleep(200);
	}
	else if(valor==4)
 274:	44 4e 00 18 	be r2,r14,2d4 <main+0xcc>
		pin_inv(1);
		msleep(5000);
	}
	else
	{
		pin_inv(1);
 278:	f8 00 00 7b 	calli 464 <pin_inv>
		msleep(500);
 27c:	34 01 01 f4 	mvi r1,500
 280:	f8 00 00 96 	calli 4d8 <msleep>
c3=counter();


for(;;)
{
	valor=gpio0->read;
 284:	29 62 00 00 	lw r2,(r11+0)
		pin_inv(1);
		msleep(5000);
	}
	else
	{
		pin_inv(1);
 288:	34 01 00 01 	mvi r1,1
c3=counter();


for(;;)
{
	valor=gpio0->read;
 28c:	28 42 00 00 	lw r2,(r2+0)
 290:	20 42 00 ff 	andi r2,r2,0xff
	valor=valor>>1;
 294:	00 42 00 01 	srui r2,r2,1
	if(valor==1)
 298:	5c 4c ff f6 	bne r2,r12,270 <main+0x68>
	{
		trigger_set(0x13);
 29c:	34 01 00 13 	mvi r1,19
 2a0:	f8 00 00 da 	calli 608 <trigger_set>
		pin_inv(1);
 2a4:	34 01 00 01 	mvi r1,1
 2a8:	f8 00 00 6f 	calli 464 <pin_inv>
		msleep(2000);
 2ac:	34 01 07 d0 	mvi r1,2000
 2b0:	f8 00 00 8a 	calli 4d8 <msleep>
 2b4:	e3 ff ff e9 	bi 258 <main+0x50>
	}
	else if(valor==2)
	{
		trigger_set(0x001);		
 2b8:	34 01 00 01 	mvi r1,1
 2bc:	f8 00 00 d3 	calli 608 <trigger_set>
		pin_inv(1);
 2c0:	34 01 00 01 	mvi r1,1
 2c4:	f8 00 00 68 	calli 464 <pin_inv>
		msleep(200);
 2c8:	34 01 00 c8 	mvi r1,200
 2cc:	f8 00 00 83 	calli 4d8 <msleep>
 2d0:	e3 ff ff e2 	bi 258 <main+0x50>
	}
	else if(valor==4)
	{
		trigger_set(0x28);
 2d4:	34 01 00 28 	mvi r1,40
 2d8:	f8 00 00 cc 	calli 608 <trigger_set>
		pin_inv(1);
 2dc:	34 01 00 01 	mvi r1,1
 2e0:	f8 00 00 61 	calli 464 <pin_inv>
		msleep(5000);
 2e4:	34 01 13 88 	mvi r1,5000
 2e8:	f8 00 00 7c 	calli 4d8 <msleep>
 2ec:	e3 ff ff db 	bi 258 <main+0x50>

000002f0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2f0:	c3 a0 00 00 	ret

000002f4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2f4:	78 01 00 00 	mvhi r1,0x0
 2f8:	38 21 06 cc 	ori r1,r1,0x6cc
 2fc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 300:	78 02 00 00 	mvhi r2,0x0
 304:	38 42 06 3c 	ori r2,r2,0x63c
 308:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 30c:	34 63 00 01 	addi r3,r3,1
 310:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 314:	34 01 00 0e 	mvi r1,14
 318:	58 41 00 00 	sw (r2+0),r1
}
 31c:	c3 a0 00 00 	ret

00000320 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 320:	37 9c ff f0 	addi sp,sp,-16
 324:	5b 8b 00 10 	sw (sp+16),r11
 328:	5b 8c 00 0c 	sw (sp+12),r12
 32c:	5b 8d 00 08 	sw (sp+8),r13
 330:	5b 9d 00 04 	sw (sp+4),ra
 334:	78 0b 00 00 	mvhi r11,0x0
 338:	39 6b 06 4c 	ori r11,r11,0x64c
 33c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 340:	35 6d 00 80 	addi r13,r11,128
 344:	e0 00 00 04 	bi 354 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 348:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 34c:	45 6d 00 08 	be r11,r13,36c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 350:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 354:	21 81 00 01 	andi r1,r12,0x1
 358:	44 20 ff fc 	be r1,r0,348 <irq_handler+0x28>
 35c:	29 61 00 00 	lw r1,(r11+0)
 360:	35 6b 00 04 	addi r11,r11,4
 364:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 368:	5d 6d ff fa 	bne r11,r13,350 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 36c:	2b 9d 00 04 	lw ra,(sp+4)
 370:	2b 8b 00 10 	lw r11,(sp+16)
 374:	2b 8c 00 0c 	lw r12,(sp+12)
 378:	2b 8d 00 08 	lw r13,(sp+8)
 37c:	37 9c 00 10 	addi sp,sp,16
 380:	c3 a0 00 00 	ret

00000384 <isr_init>:

void isr_init()
{
 384:	78 01 00 00 	mvhi r1,0x0
 388:	78 02 00 00 	mvhi r2,0x0
 38c:	38 21 06 4c 	ori r1,r1,0x64c
 390:	38 42 02 f0 	ori r2,r2,0x2f0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 394:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 398:	58 22 00 00 	sw (r1+0),r2
 39c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3a0:	5c 23 ff fe 	bne r1,r3,398 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 3a4:	c3 a0 00 00 	ret

000003a8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3a8:	78 03 00 00 	mvhi r3,0x0
 3ac:	3c 21 00 02 	sli r1,r1,2
 3b0:	38 63 06 4c 	ori r3,r3,0x64c
 3b4:	b4 61 18 00 	add r3,r3,r1
 3b8:	58 62 00 00 	sw (r3+0),r2
}
 3bc:	c3 a0 00 00 	ret

000003c0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 3c0:	78 03 00 00 	mvhi r3,0x0
 3c4:	3c 21 00 02 	sli r1,r1,2
 3c8:	38 63 06 4c 	ori r3,r3,0x64c
 3cc:	78 02 00 00 	mvhi r2,0x0
 3d0:	b4 61 18 00 	add r3,r3,r1
 3d4:	38 42 02 f0 	ori r2,r2,0x2f0
 3d8:	58 62 00 00 	sw (r3+0),r2
}
 3dc:	c3 a0 00 00 	ret

000003e0 <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura
 3e0:	78 02 00 00 	mvhi r2,0x0
 3e4:	38 42 06 40 	ori r2,r2,0x640
 3e8:	28 42 00 00 	lw r2,(r2+0)
 3ec:	58 41 00 08 	sw (r2+8),r1
}
 3f0:	c3 a0 00 00 	ret

000003f4 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 3f4:	78 01 00 00 	mvhi r1,0x0
 3f8:	38 21 06 40 	ori r1,r1,0x640
 3fc:	28 21 00 00 	lw r1,(r1+0)
 400:	28 21 00 00 	lw r1,(r1+0)
}
 404:	c3 a0 00 00 	ret

00000408 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 408:	78 02 00 00 	mvhi r2,0x0
 40c:	38 42 06 40 	ori r2,r2,0x640
 410:	28 42 00 00 	lw r2,(r2+0)
 414:	58 41 00 04 	sw (r2+4),r1
}
 418:	c3 a0 00 00 	ret

0000041c <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 41c:	20 21 00 ff 	andi r1,r1,0xff
 420:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 424:	5c 20 00 09 	bne r1,r0,448 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 428:	78 01 00 00 	mvhi r1,0x0
 42c:	38 21 06 40 	ori r1,r1,0x640
 430:	28 21 00 00 	lw r1,(r1+0)
 434:	a4 40 10 00 	not r2,r2
 438:	28 23 00 00 	lw r3,(r1+0)
 43c:	a0 43 10 00 	and r2,r2,r3
 440:	58 22 00 04 	sw (r1+4),r2
 444:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 448:	78 01 00 00 	mvhi r1,0x0
 44c:	38 21 06 40 	ori r1,r1,0x640
 450:	28 21 00 00 	lw r1,(r1+0)
 454:	28 23 00 00 	lw r3,(r1+0)
 458:	b8 43 10 00 	or r2,r2,r3
 45c:	58 22 00 04 	sw (r1+4),r2
 460:	c3 a0 00 00 	ret

00000464 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 464:	78 02 00 00 	mvhi r2,0x0
 468:	38 42 06 40 	ori r2,r2,0x640
 46c:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 470:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 474:	28 43 00 00 	lw r3,(r2+0)
 478:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 47c:	a0 23 18 00 	and r3,r1,r3
 480:	5c 60 00 06 	bne r3,r0,498 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 484:	28 43 00 00 	lw r3,(r2+0)
 488:	a4 20 08 00 	not r1,r1
 48c:	a0 23 08 00 	and r1,r1,r3
 490:	58 41 00 04 	sw (r2+4),r1
 494:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 498:	28 43 00 00 	lw r3,(r2+0)
 49c:	b8 23 08 00 	or r1,r1,r3
 4a0:	58 41 00 04 	sw (r2+4),r1
 4a4:	c3 a0 00 00 	ret

000004a8 <counter>:
//**************************************************************************
int counter()
{
	uint32_t tcr;
	int msec=0xFFFFFFFF;
	timer0->compare1 = (FCPU/1000)*msec;
 4a8:	78 01 00 00 	mvhi r1,0x0
 4ac:	78 03 00 00 	mvhi r3,0x0
 4b0:	38 63 06 30 	ori r3,r3,0x630
 4b4:	38 21 06 3c 	ori r1,r1,0x63c
 4b8:	28 21 00 00 	lw r1,(r1+0)
 4bc:	28 62 00 00 	lw r2,(r3+0)
 4c0:	58 22 00 10 	sw (r1+16),r2
	timer0->counter1 = 0;
 4c4:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;
 4c8:	34 02 00 08 	mvi r2,8
 4cc:	58 22 00 0c 	sw (r1+12),r2

	return timer0->counter1;
 4d0:	28 21 00 14 	lw r1,(r1+20)
}
 4d4:	c3 a0 00 00 	ret

000004d8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 4d8:	78 04 00 00 	mvhi r4,0x0
 4dc:	38 84 06 34 	ori r4,r4,0x634
 4e0:	28 83 00 00 	lw r3,(r4+0)
 4e4:	78 02 00 00 	mvhi r2,0x0
 4e8:	38 42 06 3c 	ori r2,r2,0x63c
 4ec:	28 42 00 00 	lw r2,(r2+0)
 4f0:	88 23 08 00 	mul r1,r1,r3
 4f4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4f8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4fc:	34 01 00 08 	mvi r1,8
 500:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 504:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 508:	20 21 00 01 	andi r1,r1,0x1
 50c:	44 20 ff fe 	be r1,r0,504 <msleep+0x2c>
}
 510:	c3 a0 00 00 	ret

00000514 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 514:	78 02 00 00 	mvhi r2,0x0
 518:	38 42 06 3c 	ori r2,r2,0x63c
 51c:	28 42 00 00 	lw r2,(r2+0)
 520:	08 21 00 64 	muli r1,r1,100
 524:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 528:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 52c:	34 01 00 08 	mvi r1,8
 530:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 534:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 538:	20 21 00 01 	andi r1,r1,0x1
 53c:	44 20 ff fe 	be r1,r0,534 <nsleep+0x20>
}
 540:	c3 a0 00 00 	ret

00000544 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 544:	78 01 00 00 	mvhi r1,0x0
 548:	38 21 06 3c 	ori r1,r1,0x63c
 54c:	28 23 00 00 	lw r3,(r1+0)
 550:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 554:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 558:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 55c:	38 21 06 cc 	ori r1,r1,0x6cc

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 560:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 564:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 568:	78 02 00 00 	mvhi r2,0x0
 56c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 570:	34 04 00 0e 	mvi r4,14
 574:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 578:	38 21 06 4c 	ori r1,r1,0x64c
 57c:	38 42 02 f4 	ori r2,r2,0x2f4
 580:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 584:	c3 a0 00 00 	ret

00000588 <uart_init>:


//***************************************************************************
// Estructura del periferico UART
//***************************************************************************
void uart_init(){}
 588:	c3 a0 00 00 	ret

0000058c <uart_getchar>:

char uart_getchar()
{
 58c:	78 01 00 00 	mvhi r1,0x0
 590:	38 21 06 38 	ori r1,r1,0x638
 594:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 598:	28 41 00 00 	lw r1,(r2+0)
 59c:	20 21 00 01 	andi r1,r1,0x1
 5a0:	44 20 ff fe 	be r1,r0,598 <uart_getchar+0xc>
	return uart0->rxtx;
 5a4:	28 41 00 04 	lw r1,(r2+4)
}
 5a8:	20 21 00 ff 	andi r1,r1,0xff
 5ac:	c3 a0 00 00 	ret

000005b0 <uart_putchar>:

void uart_putchar(char c)
{
 5b0:	78 02 00 00 	mvhi r2,0x0
 5b4:	38 42 06 38 	ori r2,r2,0x638
 5b8:	28 43 00 00 	lw r3,(r2+0)
 5bc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5c0:	28 62 00 00 	lw r2,(r3+0)
 5c4:	20 42 00 10 	andi r2,r2,0x10
 5c8:	5c 40 ff fe 	bne r2,r0,5c0 <uart_putchar+0x10>
	uart0->rxtx = c;
 5cc:	58 61 00 04 	sw (r3+4),r1
}
 5d0:	c3 a0 00 00 	ret

000005d4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5d4:	40 24 00 00 	lbu r4,(r1+0)
 5d8:	44 80 00 0b 	be r4,r0,604 <uart_putstr+0x30>
 5dc:	78 02 00 00 	mvhi r2,0x0
 5e0:	38 42 06 38 	ori r2,r2,0x638
 5e4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5e8:	28 62 00 00 	lw r2,(r3+0)
 5ec:	20 42 00 10 	andi r2,r2,0x10
 5f0:	5c 40 ff fe 	bne r2,r0,5e8 <uart_putstr+0x14>
	uart0->rxtx = c;
 5f4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 5f8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5fc:	40 24 00 00 	lbu r4,(r1+0)
 600:	5c 82 ff fa 	bne r4,r2,5e8 <uart_putstr+0x14>
 604:	c3 a0 00 00 	ret

00000608 <trigger_set>:
//***************************************************************************
// Estructura del periferico TRIGGER
//***************************************************************************
void trigger_set(uint32_t st)
{
    trigger0->set_trig = st;
 608:	78 02 00 00 	mvhi r2,0x0
 60c:	38 42 06 48 	ori r2,r2,0x648
 610:	28 42 00 00 	lw r2,(r2+0)
 614:	58 41 00 00 	sw (r2+0),r1

}
 618:	c3 a0 00 00 	ret

0000061c <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 61c:	78 02 00 00 	mvhi r2,0x0
 620:	38 42 06 44 	ori r2,r2,0x644
 624:	28 42 00 00 	lw r2,(r2+0)
 628:	58 41 00 00 	sw (r2+0),r1

}
 62c:	c3 a0 00 00 	ret
