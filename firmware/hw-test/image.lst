
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000830  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  00000830  00000830  00000884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000838  00000838  0000088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000084c  0000084c  000008a0  2**2
                  ALLOC
  4 .debug_abbrev 000002be  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083d  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005d5  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003b8  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ba  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000b9  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  0000212b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000023f  00000000  00000000  0000216b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000023bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 10 	calli 50c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 50 	ori gp,gp,0x850
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 4c 	ori r1,r1,0x84c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 d0 	ori r3,r3,0x8d0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
{
 208:	37 9c ff bc 	addi sp,sp,-68
 20c:	5b 8b 00 44 	sw (sp+68),r11
 210:	5b 8c 00 40 	sw (sp+64),r12
 214:	5b 8d 00 3c 	sw (sp+60),r13
 218:	5b 8e 00 38 	sw (sp+56),r14
 21c:	5b 8f 00 34 	sw (sp+52),r15
 220:	5b 90 00 30 	sw (sp+48),r16
 224:	5b 91 00 2c 	sw (sp+44),r17
 228:	5b 92 00 28 	sw (sp+40),r18
 22c:	5b 93 00 24 	sw (sp+36),r19
 230:	5b 94 00 20 	sw (sp+32),r20
 234:	5b 95 00 1c 	sw (sp+28),r21
 238:	5b 96 00 18 	sw (sp+24),r22
 23c:	5b 97 00 14 	sw (sp+20),r23
 240:	5b 98 00 10 	sw (sp+16),r24
 244:	5b 99 00 0c 	sw (sp+12),r25
 248:	5b 9b 00 08 	sw (sp+8),fp
 24c:	5b 9d 00 04 	sw (sp+4),ra

	uint8_t c1, c2, c3, c4, c5, p, valor;
	

	
gpio_init(0x01);
 250:	34 01 00 01 	mvi r1,1
 254:	f8 00 00 de 	calli 5cc <gpio_init>
p = 1;


//for(;;){

    valor=gpio0->read;
 258:	78 01 00 00 	mvhi r1,0x0
 25c:	38 21 08 40 	ori r1,r1,0x840
 260:	28 22 00 00 	lw r2,(r1+0)
        
	for (l = 0; l < 15; l++)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 4+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
 264:	34 01 03 e8 	mvi r1,1000
 268:	34 16 00 07 	mvi r22,7
p = 1;


//for(;;){

    valor=gpio0->read;
 26c:	28 42 00 00 	lw r2,(r2+0)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 4+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
 270:	34 0e 00 76 	mvi r14,118
        
	for (l = 0; l < 15; l++)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 4+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
 274:	f8 00 01 14 	calli 6c4 <msleep>
	
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
 278:	34 18 00 fb 	mvi r24,251
 27c:	34 17 01 00 	mvi r23,256
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 280:	34 13 00 4b 	mvi r19,75
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; c3 = 405; c2 = 20495;}
    
    	for (i=0; i<63;i++)
 284:	34 12 00 3f 	mvi r18,63


    if (p == 1)				//selección tercera octava 
    {	
        
	for (l = 0; l < 15; l++)
 288:	34 1b 00 5b 	mvi fp,91
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 4+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; c3 = 130; c2 = 20987;}
 28c:	34 19 00 04 	mvi r25,4
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 290:	09 d4 00 4b 	muli r20,r14,75

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
 294:	c8 0e 80 00 	sub r16,r0,r14
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; c3 = 405; c2 = 20495;}
 298:	22 ef 00 ff 	andi r15,r23,0xff
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 29c:	22 94 00 ff 	andi r20,r20,0xff

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
 2a0:	cb 14 a8 00 	sub r21,r24,r20
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; c3 = 405; c2 = 20495;}
    
    	for (i=0; i<63;i++)
 2a4:	34 11 00 00 	mvi r17,0

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
 2a8:	22 10 00 ff 	andi r16,r16,0xff
 2ac:	22 b5 00 ff 	andi r21,r21,0xff
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2b0:	52 6f 00 15 	bgeu r19,r15,304 <main+0xfc>
 2b4:	ba 80 68 00 	mv r13,r20

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
 2b8:	ba a0 60 00 	mv r12,r21
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2bc:	34 0b 00 4b 	mvi r11,75
                {
                    c4 = j*c3;
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
 2c0:	34 02 00 01 	mvi r2,1
 2c4:	34 01 00 01 	mvi r1,1
 2c8:	f8 00 00 d0 	calli 608 <set_pin>
   	            nsleep(c4);
 2cc:	b9 a0 08 00 	mv r1,r13
 2d0:	f8 00 01 0c 	calli 700 <nsleep>
	            set_pin(0,1);
 2d4:	34 02 00 01 	mvi r2,1
 2d8:	34 01 00 00 	mvi r1,0
 2dc:	f8 00 00 cb 	calli 608 <set_pin>
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2e0:	35 6b 00 01 	addi r11,r11,1
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 2e4:	b9 80 08 00 	mv r1,r12
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2e8:	b5 ae 68 00 	add r13,r13,r14
 2ec:	b5 90 60 00 	add r12,r12,r16
 2f0:	21 6b 00 ff 	andi r11,r11,0xff
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 2f4:	f8 00 01 03 	calli 700 <nsleep>
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2f8:	21 ad 00 ff 	andi r13,r13,0xff
 2fc:	21 8c 00 ff 	andi r12,r12,0xff
 300:	55 eb ff f0 	bgu r15,r11,2c0 <main+0xb8>
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; c3 = 405; c2 = 20495;}
    
    	for (i=0; i<63;i++)
 304:	36 31 00 01 	addi r17,r17,1
 308:	22 31 00 ff 	andi r17,r17,0xff
 30c:	5e 32 ff e9 	bne r17,r18,2b0 <main+0xa8>


    if (p == 1)				//selección tercera octava 
    {	
        
	for (l = 0; l < 15; l++)
 310:	46 db 00 3c 	be r22,fp,400 <main+0x1f8>
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 4+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
 314:	34 01 03 e8 	mvi r1,1000
 318:	f8 00 00 eb 	calli 6c4 <msleep>
	
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; c3 = 130; c2 = 20987;}
 31c:	36 c1 ff fa 	addi r1,r22,-6
 320:	20 21 00 ff 	andi r1,r1,0xff
 324:	53 21 00 2b 	bgeu r25,r1,3d0 <main+0x1c8>
	else if (c1 > 14 && c1 < 20){b1 = 144; c3 = 146; c2 = 20741;}
 328:	36 c1 ff f4 	addi r1,r22,-12
 32c:	20 21 00 ff 	andi r1,r1,0xff
 330:	53 21 00 2c 	bgeu r25,r1,3e0 <main+0x1d8>
	else if (c1 > 20 && c1 < 26){b1 = 138; c3 = 150; c2 = 20741;}
 334:	36 c1 ff ee 	addi r1,r22,-18
 338:	20 21 00 ff 	andi r1,r1,0xff
 33c:	53 21 00 2d 	bgeu r25,r1,3f0 <main+0x1e8>
	else if (c1 > 26 && c1 < 32){b1 = 124; c3 = 166; c2 = 20741;}
 340:	36 c1 ff e8 	addi r1,r22,-24
 344:	20 21 00 ff 	andi r1,r1,0xff
 348:	53 21 00 41 	bgeu r25,r1,44c <main+0x244>
	else if (c1 > 32 && c1 < 38){b1 = 112; c3 = 181; c2 = 20495;}
 34c:	36 c1 ff e2 	addi r1,r22,-30
 350:	20 21 00 ff 	andi r1,r1,0xff
 354:	53 21 00 46 	bgeu r25,r1,46c <main+0x264>
        else if (c1 > 38 && c1 < 44){b1 = 100; c3 = 202; c2 = 20495;}
 358:	36 c1 ff dc 	addi r1,r22,-36
 35c:	20 21 00 ff 	andi r1,r1,0xff
 360:	53 21 00 4b 	bgeu r25,r1,48c <main+0x284>
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
 364:	36 c1 ff d6 	addi r1,r22,-42
 368:	20 21 00 ff 	andi r1,r1,0xff
 36c:	53 21 00 44 	bgeu r25,r1,47c <main+0x274>
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
 370:	36 c1 ff d0 	addi r1,r22,-48
 374:	20 21 00 ff 	andi r1,r1,0xff
 378:	53 21 00 55 	bgeu r25,r1,4cc <main+0x2c4>
	else if (c1 > 56 && c1 < 62){b1 = 72; c3 = 293; c2 = 20741;}
 37c:	36 c1 ff ca 	addi r1,r22,-54
 380:	20 21 00 ff 	andi r1,r1,0xff
 384:	53 21 00 4e 	bgeu r25,r1,4bc <main+0x2b4>
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
 388:	36 c1 ff c4 	addi r1,r22,-60
 38c:	20 21 00 ff 	andi r1,r1,0xff
 390:	53 21 00 47 	bgeu r25,r1,4ac <main+0x2a4>
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
 394:	36 c1 ff be 	addi r1,r22,-66
 398:	20 21 00 ff 	andi r1,r1,0xff
 39c:	53 21 00 40 	bgeu r25,r1,49c <main+0x294>
	else if (c1 > 74 && c1 < 80){b1 = 56; c3 = 362; c2 = 20495;}
 3a0:	36 c1 ff b8 	addi r1,r22,-72
 3a4:	20 21 00 ff 	andi r1,r1,0xff
 3a8:	53 21 00 2d 	bgeu r25,r1,45c <main+0x254>
        else if (c1 > 80 && c1 < 86){b1 = 50; c3 = 405; c2 = 20495;}
 3ac:	36 c1 ff b2 	addi r1,r22,-78
 3b0:	20 21 00 ff 	andi r1,r1,0xff
 3b4:	54 39 00 04 	bgu r1,r25,3c4 <main+0x1bc>
 3b8:	34 0e 00 95 	mvi r14,149
 3bc:	34 18 00 0f 	mvi r24,15
 3c0:	34 17 00 7e 	mvi r23,126
 3c4:	36 d6 00 06 	addi r22,r22,6
 3c8:	22 d6 00 ff 	andi r22,r22,0xff
 3cc:	e3 ff ff b1 	bi 290 <main+0x88>
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 4+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; c3 = 130; c2 = 20987;}
 3d0:	34 0e 00 82 	mvi r14,130
 3d4:	34 18 00 fb 	mvi r24,251
 3d8:	34 17 00 ee 	mvi r23,238
 3dc:	e3 ff ff fa 	bi 3c4 <main+0x1bc>
	else if (c1 > 14 && c1 < 20){b1 = 144; c3 = 146; c2 = 20741;}
 3e0:	34 0e 00 92 	mvi r14,146
 3e4:	34 18 00 05 	mvi r24,5
 3e8:	34 17 00 dc 	mvi r23,220
 3ec:	e3 ff ff f6 	bi 3c4 <main+0x1bc>
	else if (c1 > 20 && c1 < 26){b1 = 138; c3 = 150; c2 = 20741;}
 3f0:	34 0e 00 96 	mvi r14,150
 3f4:	34 18 00 05 	mvi r24,5
 3f8:	34 17 00 d6 	mvi r23,214
 3fc:	e3 ff ff f2 	bi 3c4 <main+0x1bc>

                }
            }
	}
    }
}
 400:	2b 9d 00 04 	lw ra,(sp+4)
 404:	2b 8b 00 44 	lw r11,(sp+68)
 408:	2b 8c 00 40 	lw r12,(sp+64)
 40c:	2b 8d 00 3c 	lw r13,(sp+60)
 410:	2b 8e 00 38 	lw r14,(sp+56)
 414:	2b 8f 00 34 	lw r15,(sp+52)
 418:	2b 90 00 30 	lw r16,(sp+48)
 41c:	2b 91 00 2c 	lw r17,(sp+44)
 420:	2b 92 00 28 	lw r18,(sp+40)
 424:	2b 93 00 24 	lw r19,(sp+36)
 428:	2b 94 00 20 	lw r20,(sp+32)
 42c:	2b 95 00 1c 	lw r21,(sp+28)
 430:	2b 96 00 18 	lw r22,(sp+24)
 434:	2b 97 00 14 	lw r23,(sp+20)
 438:	2b 98 00 10 	lw r24,(sp+16)
 43c:	2b 99 00 0c 	lw r25,(sp+12)
 440:	2b 9b 00 08 	lw fp,(sp+8)
 444:	37 9c 00 44 	addi sp,sp,68
 448:	c3 a0 00 00 	ret
	
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; c3 = 130; c2 = 20987;}
	else if (c1 > 14 && c1 < 20){b1 = 144; c3 = 146; c2 = 20741;}
	else if (c1 > 20 && c1 < 26){b1 = 138; c3 = 150; c2 = 20741;}
	else if (c1 > 26 && c1 < 32){b1 = 124; c3 = 166; c2 = 20741;}
 44c:	34 0e 00 a6 	mvi r14,166
 450:	34 18 00 05 	mvi r24,5
 454:	34 17 00 c8 	mvi r23,200
 458:	e3 ff ff db 	bi 3c4 <main+0x1bc>
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; c3 = 362; c2 = 20495;}
 45c:	34 0e 00 6a 	mvi r14,106
 460:	34 18 00 0f 	mvi r24,15
 464:	34 17 00 84 	mvi r23,132
 468:	e3 ff ff d7 	bi 3c4 <main+0x1bc>
	if (c1 > 2 && c1 < 8){b1 = 180; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; c3 = 130; c2 = 20987;}
	else if (c1 > 14 && c1 < 20){b1 = 144; c3 = 146; c2 = 20741;}
	else if (c1 > 20 && c1 < 26){b1 = 138; c3 = 150; c2 = 20741;}
	else if (c1 > 26 && c1 < 32){b1 = 124; c3 = 166; c2 = 20741;}
	else if (c1 > 32 && c1 < 38){b1 = 112; c3 = 181; c2 = 20495;}
 46c:	34 0e 00 b5 	mvi r14,181
 470:	34 18 00 0f 	mvi r24,15
 474:	34 17 00 bc 	mvi r23,188
 478:	e3 ff ff d3 	bi 3c4 <main+0x1bc>
        else if (c1 > 38 && c1 < 44){b1 = 100; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
 47c:	34 0e 00 ec 	mvi r14,236
 480:	34 18 00 fb 	mvi r24,251
 484:	34 17 00 a6 	mvi r23,166
 488:	e3 ff ff cf 	bi 3c4 <main+0x1bc>
        else if (c1 > 8 && c1 < 14){b1 = 162; c3 = 130; c2 = 20987;}
	else if (c1 > 14 && c1 < 20){b1 = 144; c3 = 146; c2 = 20741;}
	else if (c1 > 20 && c1 < 26){b1 = 138; c3 = 150; c2 = 20741;}
	else if (c1 > 26 && c1 < 32){b1 = 124; c3 = 166; c2 = 20741;}
	else if (c1 > 32 && c1 < 38){b1 = 112; c3 = 181; c2 = 20495;}
        else if (c1 > 38 && c1 < 44){b1 = 100; c3 = 202; c2 = 20495;}
 48c:	34 0e 00 ca 	mvi r14,202
 490:	34 18 00 0f 	mvi r24,15
 494:	34 17 00 b0 	mvi r23,176
 498:	e3 ff ff cb 	bi 3c4 <main+0x1bc>
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; c3 = 332; c2 = 20741;}
 49c:	34 0e 00 4c 	mvi r14,76
 4a0:	34 18 00 05 	mvi r24,5
 4a4:	34 17 00 8a 	mvi r23,138
 4a8:	e3 ff ff c7 	bi 3c4 <main+0x1bc>
	else if (c1 > 32 && c1 < 38){b1 = 112; c3 = 181; c2 = 20495;}
        else if (c1 > 38 && c1 < 44){b1 = 100; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; c3 = 301; c2 = 20741;}
 4ac:	34 0e 00 2d 	mvi r14,45
 4b0:	34 18 00 05 	mvi r24,5
 4b4:	34 17 00 91 	mvi r23,145
 4b8:	e3 ff ff c3 	bi 3c4 <main+0x1bc>
	else if (c1 > 26 && c1 < 32){b1 = 124; c3 = 166; c2 = 20741;}
	else if (c1 > 32 && c1 < 38){b1 = 112; c3 = 181; c2 = 20495;}
        else if (c1 > 38 && c1 < 44){b1 = 100; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; c3 = 293; c2 = 20741;}
 4bc:	34 0e 00 25 	mvi r14,37
 4c0:	34 18 00 05 	mvi r24,5
 4c4:	34 17 00 94 	mvi r23,148
 4c8:	e3 ff ff bf 	bi 3c4 <main+0x1bc>
	else if (c1 > 20 && c1 < 26){b1 = 138; c3 = 150; c2 = 20741;}
	else if (c1 > 26 && c1 < 32){b1 = 124; c3 = 166; c2 = 20741;}
	else if (c1 > 32 && c1 < 38){b1 = 112; c3 = 181; c2 = 20495;}
        else if (c1 > 38 && c1 < 44){b1 = 100; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; c3 = 260; c2 = 20987;}
 4cc:	34 0e 00 04 	mvi r14,4
 4d0:	34 18 00 fb 	mvi r24,251
 4d4:	34 17 00 9d 	mvi r23,157
 4d8:	e3 ff ff bb 	bi 3c4 <main+0x1bc>

000004dc <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 4dc:	c3 a0 00 00 	ret

000004e0 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4e0:	78 01 00 00 	mvhi r1,0x0
 4e4:	38 21 08 cc 	ori r1,r1,0x8cc
 4e8:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4ec:	78 02 00 00 	mvhi r2,0x0
 4f0:	38 42 08 3c 	ori r2,r2,0x83c
 4f4:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4f8:	34 63 00 01 	addi r3,r3,1
 4fc:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 500:	34 01 00 0e 	mvi r1,14
 504:	58 41 00 00 	sw (r2+0),r1
}
 508:	c3 a0 00 00 	ret

0000050c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 50c:	37 9c ff f0 	addi sp,sp,-16
 510:	5b 8b 00 10 	sw (sp+16),r11
 514:	5b 8c 00 0c 	sw (sp+12),r12
 518:	5b 8d 00 08 	sw (sp+8),r13
 51c:	5b 9d 00 04 	sw (sp+4),ra
 520:	78 0b 00 00 	mvhi r11,0x0
 524:	39 6b 08 4c 	ori r11,r11,0x84c
 528:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 52c:	35 6d 00 80 	addi r13,r11,128
 530:	e0 00 00 04 	bi 540 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 534:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 538:	45 6d 00 08 	be r11,r13,558 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 53c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 540:	21 81 00 01 	andi r1,r12,0x1
 544:	44 20 ff fc 	be r1,r0,534 <irq_handler+0x28>
 548:	29 61 00 00 	lw r1,(r11+0)
 54c:	35 6b 00 04 	addi r11,r11,4
 550:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 554:	5d 6d ff fa 	bne r11,r13,53c <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 558:	2b 9d 00 04 	lw ra,(sp+4)
 55c:	2b 8b 00 10 	lw r11,(sp+16)
 560:	2b 8c 00 0c 	lw r12,(sp+12)
 564:	2b 8d 00 08 	lw r13,(sp+8)
 568:	37 9c 00 10 	addi sp,sp,16
 56c:	c3 a0 00 00 	ret

00000570 <isr_init>:

void isr_init()
{
 570:	78 01 00 00 	mvhi r1,0x0
 574:	78 02 00 00 	mvhi r2,0x0
 578:	38 21 08 4c 	ori r1,r1,0x84c
 57c:	38 42 04 dc 	ori r2,r2,0x4dc
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 580:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 584:	58 22 00 00 	sw (r1+0),r2
 588:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 58c:	5c 23 ff fe 	bne r1,r3,584 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 590:	c3 a0 00 00 	ret

00000594 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 594:	78 03 00 00 	mvhi r3,0x0
 598:	3c 21 00 02 	sli r1,r1,2
 59c:	38 63 08 4c 	ori r3,r3,0x84c
 5a0:	b4 61 18 00 	add r3,r3,r1
 5a4:	58 62 00 00 	sw (r3+0),r2
}
 5a8:	c3 a0 00 00 	ret

000005ac <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 5ac:	78 03 00 00 	mvhi r3,0x0
 5b0:	3c 21 00 02 	sli r1,r1,2
 5b4:	38 63 08 4c 	ori r3,r3,0x84c
 5b8:	78 02 00 00 	mvhi r2,0x0
 5bc:	b4 61 18 00 	add r3,r3,r1
 5c0:	38 42 04 dc 	ori r2,r2,0x4dc
 5c4:	58 62 00 00 	sw (r3+0),r2
}
 5c8:	c3 a0 00 00 	ret

000005cc <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura, 1 es puerto escritura o salida
 5cc:	78 02 00 00 	mvhi r2,0x0
 5d0:	38 42 08 40 	ori r2,r2,0x840
 5d4:	28 42 00 00 	lw r2,(r2+0)
 5d8:	58 41 00 08 	sw (r2+8),r1
}
 5dc:	c3 a0 00 00 	ret

000005e0 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 5e0:	78 01 00 00 	mvhi r1,0x0
 5e4:	38 21 08 40 	ori r1,r1,0x840
 5e8:	28 21 00 00 	lw r1,(r1+0)
 5ec:	28 21 00 00 	lw r1,(r1+0)
}
 5f0:	c3 a0 00 00 	ret

000005f4 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 5f4:	78 02 00 00 	mvhi r2,0x0
 5f8:	38 42 08 40 	ori r2,r2,0x840
 5fc:	28 42 00 00 	lw r2,(r2+0)
 600:	58 41 00 04 	sw (r2+4),r1
}
 604:	c3 a0 00 00 	ret

00000608 <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 608:	20 21 00 ff 	andi r1,r1,0xff
 60c:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 610:	5c 20 00 09 	bne r1,r0,634 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 614:	78 01 00 00 	mvhi r1,0x0
 618:	38 21 08 40 	ori r1,r1,0x840
 61c:	28 21 00 00 	lw r1,(r1+0)
 620:	a4 40 10 00 	not r2,r2
 624:	28 23 00 00 	lw r3,(r1+0)
 628:	a0 43 10 00 	and r2,r2,r3
 62c:	58 22 00 04 	sw (r1+4),r2
 630:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 634:	78 01 00 00 	mvhi r1,0x0
 638:	38 21 08 40 	ori r1,r1,0x840
 63c:	28 21 00 00 	lw r1,(r1+0)
 640:	28 23 00 00 	lw r3,(r1+0)
 644:	b8 43 10 00 	or r2,r2,r3
 648:	58 22 00 04 	sw (r1+4),r2
 64c:	c3 a0 00 00 	ret

00000650 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 650:	78 02 00 00 	mvhi r2,0x0
 654:	38 42 08 40 	ori r2,r2,0x840
 658:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 65c:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 660:	28 43 00 00 	lw r3,(r2+0)
 664:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 668:	a0 23 18 00 	and r3,r1,r3
 66c:	5c 60 00 06 	bne r3,r0,684 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 670:	28 43 00 00 	lw r3,(r2+0)
 674:	a4 20 08 00 	not r1,r1
 678:	a0 23 08 00 	and r1,r1,r3
 67c:	58 41 00 04 	sw (r2+4),r1
 680:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 684:	28 43 00 00 	lw r3,(r2+0)
 688:	b8 23 08 00 	or r1,r1,r3
 68c:	58 41 00 04 	sw (r2+4),r1
 690:	c3 a0 00 00 	ret

00000694 <counter>:
//**************************************************************************
int counter()
{
	uint32_t tcr;
	int msec=0xFFFFFFFF;
	timer0->compare1 = (FCPU/1000)*msec;
 694:	78 01 00 00 	mvhi r1,0x0
 698:	78 03 00 00 	mvhi r3,0x0
 69c:	38 63 08 30 	ori r3,r3,0x830
 6a0:	38 21 08 3c 	ori r1,r1,0x83c
 6a4:	28 21 00 00 	lw r1,(r1+0)
 6a8:	28 62 00 00 	lw r2,(r3+0)
 6ac:	58 22 00 10 	sw (r1+16),r2
	timer0->counter1 = 0;
 6b0:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;
 6b4:	34 02 00 08 	mvi r2,8
 6b8:	58 22 00 0c 	sw (r1+12),r2

	return timer0->counter1;
 6bc:	28 21 00 14 	lw r1,(r1+20)
}
 6c0:	c3 a0 00 00 	ret

000006c4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 6c4:	78 04 00 00 	mvhi r4,0x0
 6c8:	38 84 08 34 	ori r4,r4,0x834
 6cc:	28 83 00 00 	lw r3,(r4+0)
 6d0:	78 02 00 00 	mvhi r2,0x0
 6d4:	38 42 08 3c 	ori r2,r2,0x83c
 6d8:	28 42 00 00 	lw r2,(r2+0)
 6dc:	88 23 08 00 	mul r1,r1,r3
 6e0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 6e4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6e8:	34 01 00 08 	mvi r1,8
 6ec:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 6f0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6f4:	20 21 00 01 	andi r1,r1,0x1
 6f8:	44 20 ff fe 	be r1,r0,6f0 <msleep+0x2c>
}
 6fc:	c3 a0 00 00 	ret

00000700 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 700:	78 02 00 00 	mvhi r2,0x0
 704:	38 42 08 3c 	ori r2,r2,0x83c
 708:	28 42 00 00 	lw r2,(r2+0)
 70c:	08 21 00 64 	muli r1,r1,100
 710:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 714:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 718:	34 01 00 08 	mvi r1,8
 71c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 720:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 724:	20 21 00 01 	andi r1,r1,0x1
 728:	44 20 ff fe 	be r1,r0,720 <nsleep+0x20>
}
 72c:	c3 a0 00 00 	ret

00000730 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 730:	78 01 00 00 	mvhi r1,0x0
 734:	38 21 08 3c 	ori r1,r1,0x83c
 738:	28 23 00 00 	lw r3,(r1+0)
 73c:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 740:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 744:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 748:	38 21 08 cc 	ori r1,r1,0x8cc

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 74c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 750:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 754:	78 02 00 00 	mvhi r2,0x0
 758:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 75c:	34 04 00 0e 	mvi r4,14
 760:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 764:	38 21 08 4c 	ori r1,r1,0x84c
 768:	38 42 04 e0 	ori r2,r2,0x4e0
 76c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 770:	c3 a0 00 00 	ret

00000774 <uart_init>:


//***************************************************************************
// Estructura del periferico UART
//***************************************************************************
void uart_init(){}
 774:	c3 a0 00 00 	ret

00000778 <uart_getchar>:

char uart_getchar()
{
 778:	78 01 00 00 	mvhi r1,0x0
 77c:	38 21 08 38 	ori r1,r1,0x838
 780:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 784:	28 41 00 00 	lw r1,(r2+0)
 788:	20 21 00 01 	andi r1,r1,0x1
 78c:	44 20 ff fe 	be r1,r0,784 <uart_getchar+0xc>
	return uart0->rxtx;
 790:	28 41 00 04 	lw r1,(r2+4)
}
 794:	20 21 00 ff 	andi r1,r1,0xff
 798:	c3 a0 00 00 	ret

0000079c <uart_putchar>:

void uart_putchar(char c)
{
 79c:	78 02 00 00 	mvhi r2,0x0
 7a0:	38 42 08 38 	ori r2,r2,0x838
 7a4:	28 43 00 00 	lw r3,(r2+0)
 7a8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 7ac:	28 62 00 00 	lw r2,(r3+0)
 7b0:	20 42 00 10 	andi r2,r2,0x10
 7b4:	5c 40 ff fe 	bne r2,r0,7ac <uart_putchar+0x10>
	uart0->rxtx = c;
 7b8:	58 61 00 04 	sw (r3+4),r1
}
 7bc:	c3 a0 00 00 	ret

000007c0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7c0:	40 24 00 00 	lbu r4,(r1+0)
 7c4:	44 80 00 0b 	be r4,r0,7f0 <uart_putstr+0x30>
 7c8:	78 02 00 00 	mvhi r2,0x0
 7cc:	38 42 08 38 	ori r2,r2,0x838
 7d0:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 7d4:	28 62 00 00 	lw r2,(r3+0)
 7d8:	20 42 00 10 	andi r2,r2,0x10
 7dc:	5c 40 ff fe 	bne r2,r0,7d4 <uart_putstr+0x14>
	uart0->rxtx = c;
 7e0:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 7e4:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7e8:	40 24 00 00 	lbu r4,(r1+0)
 7ec:	5c 82 ff fa 	bne r4,r2,7d4 <uart_putstr+0x14>
 7f0:	c3 a0 00 00 	ret

000007f4 <trigger_set>:
//***************************************************************************
// Estructura del periferico TRIGGER
//***************************************************************************
void trigger_set(uint32_t st)
{
    trigger0->set_trig = st;
 7f4:	78 02 00 00 	mvhi r2,0x0
 7f8:	38 42 08 48 	ori r2,r2,0x848
 7fc:	28 42 00 00 	lw r2,(r2+0)
 800:	58 41 00 00 	sw (r2+0),r1
}
 804:	c3 a0 00 00 	ret

00000808 <read_count>:

uint32_t read_count()
{
    return trigger0->c_out;
 808:	78 01 00 00 	mvhi r1,0x0
 80c:	38 21 08 48 	ori r1,r1,0x848
 810:	28 21 00 00 	lw r1,(r1+0)
 814:	28 21 00 04 	lw r1,(r1+4)
}
 818:	c3 a0 00 00 	ret

0000081c <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 81c:	78 02 00 00 	mvhi r2,0x0
 820:	38 42 08 44 	ori r2,r2,0x844
 824:	28 42 00 00 	lw r2,(r2+0)
 828:	58 41 00 00 	sw (r2+0),r1

}
 82c:	c3 a0 00 00 	ret
