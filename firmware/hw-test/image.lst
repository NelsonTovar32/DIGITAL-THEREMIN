
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000810  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  00000810  00000810  00000864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000818  00000818  0000086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000082c  0000082c  00000880  2**2
                  ALLOC
  4 .debug_abbrev 000002cd  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083b  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005bf  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000315  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ba  00000000  00000000  00001ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000b9  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000023f  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 08 	calli 4ec <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 30 	ori gp,gp,0x830
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 2c 	ori r1,r1,0x82c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 b0 	ori r3,r3,0x8b0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
{
 208:	37 9c ff cc 	addi sp,sp,-52
 20c:	5b 8b 00 34 	sw (sp+52),r11
 210:	5b 8c 00 30 	sw (sp+48),r12
 214:	5b 8d 00 2c 	sw (sp+44),r13
 218:	5b 8e 00 28 	sw (sp+40),r14
 21c:	5b 8f 00 24 	sw (sp+36),r15
 220:	5b 90 00 20 	sw (sp+32),r16
 224:	5b 91 00 1c 	sw (sp+28),r17
 228:	5b 92 00 18 	sw (sp+24),r18
 22c:	5b 93 00 14 	sw (sp+20),r19
 230:	5b 94 00 10 	sw (sp+16),r20
 234:	5b 95 00 0c 	sw (sp+12),r21
 238:	5b 96 00 08 	sw (sp+8),r22
 23c:	5b 9d 00 04 	sw (sp+4),ra

	uint8_t c1, c2, c3, c4, c5, p, valor;
	

	
gpio_init(0x01);
 240:	34 01 00 01 	mvi r1,1
 244:	f8 00 00 da 	calli 5ac <gpio_init>
p = 1;


//for(;;){

    valor=gpio0->read;
 248:	78 01 00 00 	mvhi r1,0x0
 24c:	38 21 08 20 	ori r1,r1,0x820
 250:	28 22 00 00 	lw r2,(r1+0)
        
	for (l = 0; l < 14; l++)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
 254:	34 01 03 e8 	mvi r1,1000
 258:	34 12 00 00 	mvi r18,0
p = 1;


//for(;;){

    valor=gpio0->read;
 25c:	28 42 00 00 	lw r2,(r2+0)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
 260:	34 0e 00 84 	mvi r14,132
        
	for (l = 0; l < 14; l++)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
 264:	f8 00 01 10 	calli 6a4 <msleep>
 268:	34 14 00 ab 	mvi r20,171
 26c:	34 13 ff 7c 	mvi r19,-132


    if (p == 1)				//selección tercera octava 
    {	
        
	for (l = 0; l < 14; l++)
 270:	34 16 00 4e 	mvi r22,78
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
 274:	34 15 00 04 	mvi r21,4
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
 278:	22 90 00 ff 	andi r16,r20,0xff
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
 27c:	34 11 00 3f 	mvi r17,63

//**************************************************************************************************
// Función principal del codigo - Inicialización de SPI y lectura //
//**************************************************************************************************

int main()
 280:	22 6f 00 ff 	andi r15,r19,0xff
 284:	34 0d 00 b4 	mvi r13,180
 288:	34 0c 00 00 	mvi r12,0
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+1;

	        for (j=0; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 28c:	34 0b 00 00 	mvi r11,0
                {
                    c4 = j*c3;
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
 290:	34 02 00 01 	mvi r2,1
 294:	34 01 00 01 	mvi r1,1
 298:	f8 00 00 d4 	calli 5e8 <set_pin>
   	            nsleep(c4);
 29c:	b9 80 08 00 	mv r1,r12
 2a0:	f8 00 01 10 	calli 6e0 <nsleep>
	            set_pin(0,1);
 2a4:	34 02 00 01 	mvi r2,1
 2a8:	34 01 00 00 	mvi r1,0
 2ac:	f8 00 00 cf 	calli 5e8 <set_pin>
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+1;

	        for (j=0; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2b0:	35 6b 00 01 	addi r11,r11,1
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 2b4:	b9 a0 08 00 	mv r1,r13
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+1;

	        for (j=0; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2b8:	b5 8e 60 00 	add r12,r12,r14
 2bc:	b5 af 68 00 	add r13,r13,r15
 2c0:	21 6b 00 ff 	andi r11,r11,0xff
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 2c4:	f8 00 01 07 	calli 6e0 <nsleep>
    
    	for (i=0; i<63;i++)
	    {
	        b2 = b1+1;

	        for (j=0; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 2c8:	21 8c 00 ff 	andi r12,r12,0xff
 2cc:	21 ad 00 ff 	andi r13,r13,0xff
 2d0:	56 0b ff f0 	bgu r16,r11,290 <main+0x88>
 2d4:	36 31 ff ff 	addi r17,r17,-1
 2d8:	22 31 00 ff 	andi r17,r17,0xff
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
    
    	for (i=0; i<63;i++)
 2dc:	5e 20 ff ea 	bne r17,r0,284 <main+0x7c>


    if (p == 1)				//selección tercera octava 
    {	
        
	for (l = 0; l < 14; l++)
 2e0:	46 56 00 3f 	be r18,r22,3dc <main+0x1d4>
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
 2e4:	34 01 03 e8 	mvi r1,1000
 2e8:	f8 00 00 ef 	calli 6a4 <msleep>
 2ec:	36 41 00 06 	addi r1,r18,6
 2f0:	20 21 00 ff 	andi r1,r1,0xff
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
 2f4:	52 a1 00 2b 	bgeu r21,r1,3a0 <main+0x198>
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
 2f8:	52 b2 00 2f 	bgeu r21,r18,3b4 <main+0x1ac>
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
 2fc:	36 42 ff fa 	addi r2,r18,-6
 300:	20 42 00 ff 	andi r2,r2,0xff
 304:	52 a2 00 31 	bgeu r21,r2,3c8 <main+0x1c0>
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
 308:	36 42 ff f4 	addi r2,r18,-12
 30c:	20 42 00 ff 	andi r2,r2,0xff
 310:	52 a2 00 47 	bgeu r21,r2,42c <main+0x224>
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
 314:	36 42 ff ee 	addi r2,r18,-18
 318:	20 42 00 ff 	andi r2,r2,0xff
 31c:	52 a2 00 3f 	bgeu r21,r2,418 <main+0x210>
	else if (c1 > 32 && c1 < 38){b1 = 102; c3 = 218; c2 = 22452;}
 320:	36 42 ff e8 	addi r2,r18,-24
 324:	20 42 00 ff 	andi r2,r2,0xff
 328:	52 a2 00 51 	bgeu r21,r2,46c <main+0x264>
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
 32c:	36 42 ff e2 	addi r2,r18,-30
 330:	20 42 00 ff 	andi r2,r2,0xff
 334:	52 a2 00 4a 	bgeu r21,r2,45c <main+0x254>
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
 338:	36 42 ff dc 	addi r2,r18,-36
 33c:	20 42 00 ff 	andi r2,r2,0xff
 340:	52 a2 00 5b 	bgeu r21,r2,4ac <main+0x2a4>
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
 344:	36 42 ff d6 	addi r2,r18,-42
 348:	20 42 00 ff 	andi r2,r2,0xff
 34c:	52 a2 00 54 	bgeu r21,r2,49c <main+0x294>
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
 350:	36 42 ff d0 	addi r2,r18,-48
 354:	20 42 00 ff 	andi r2,r2,0xff
 358:	52 a2 00 4d 	bgeu r21,r2,48c <main+0x284>
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
 35c:	36 42 ff ca 	addi r2,r18,-54
 360:	20 42 00 ff 	andi r2,r2,0xff
 364:	52 a2 00 46 	bgeu r21,r2,47c <main+0x274>
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
 368:	36 42 ff c4 	addi r2,r18,-60
 36c:	20 42 00 ff 	andi r2,r2,0xff
 370:	52 a2 00 37 	bgeu r21,r2,44c <main+0x244>
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
 374:	36 42 ff be 	addi r2,r18,-66
 378:	20 42 00 ff 	andi r2,r2,0xff
 37c:	52 a2 00 30 	bgeu r21,r2,43c <main+0x234>
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
 380:	36 42 ff b8 	addi r2,r18,-72
 384:	20 42 00 ff 	andi r2,r2,0xff
 388:	54 55 00 04 	bgu r2,r21,398 <main+0x190>
 38c:	34 0e 00 f4 	mvi r14,244
 390:	34 14 00 2e 	mvi r20,46
 394:	34 13 ff 0c 	mvi r19,-244
 398:	b8 20 90 00 	mv r18,r1
 39c:	e3 ff ff b7 	bi 278 <main+0x70>
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
 3a0:	34 0e 00 84 	mvi r14,132
 3a4:	34 14 00 ab 	mvi r20,171
 3a8:	34 13 ff 7c 	mvi r19,-132
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
 3ac:	b8 20 90 00 	mv r18,r1
 3b0:	e3 ff ff b2 	bi 278 <main+0x70>
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
 3b4:	34 0e 00 93 	mvi r14,147
 3b8:	34 14 00 99 	mvi r20,153
 3bc:	34 13 ff 6d 	mvi r19,-147
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
 3c0:	b8 20 90 00 	mv r18,r1
 3c4:	e3 ff ff ad 	bi 278 <main+0x70>
	    c1 = 3+(l*6);		//Escala a dos octavas (14)
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
 3c8:	34 0e 00 a9 	mvi r14,169
 3cc:	34 14 00 87 	mvi r20,135
 3d0:	34 13 ff 57 	mvi r19,-169
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
 3d4:	b8 20 90 00 	mv r18,r1
 3d8:	e3 ff ff a8 	bi 278 <main+0x70>

                }
            }
	}
    }
}
 3dc:	2b 9d 00 04 	lw ra,(sp+4)
 3e0:	2b 8b 00 34 	lw r11,(sp+52)
 3e4:	2b 8c 00 30 	lw r12,(sp+48)
 3e8:	2b 8d 00 2c 	lw r13,(sp+44)
 3ec:	2b 8e 00 28 	lw r14,(sp+40)
 3f0:	2b 8f 00 24 	lw r15,(sp+36)
 3f4:	2b 90 00 20 	lw r16,(sp+32)
 3f8:	2b 91 00 1c 	lw r17,(sp+28)
 3fc:	2b 92 00 18 	lw r18,(sp+24)
 400:	2b 93 00 14 	lw r19,(sp+20)
 404:	2b 94 00 10 	lw r20,(sp+16)
 408:	2b 95 00 0c 	lw r21,(sp+12)
 40c:	2b 96 00 08 	lw r22,(sp+8)
 410:	37 9c 00 34 	addi sp,sp,52
 414:	c3 a0 00 00 	ret
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
 418:	34 0e 00 c4 	mvi r14,196
 41c:	34 14 00 73 	mvi r20,115
 420:	34 13 ff 3c 	mvi r19,-196
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
        else if (c1 > 80 && c1 < 86){b1 = 45; c3 = 500; c2 = 22452;}
 424:	b8 20 90 00 	mv r18,r1
 428:	e3 ff ff 94 	bi 278 <main+0x70>
	    msleep(1000);	
	
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
 42c:	34 0e 00 af 	mvi r14,175
 430:	34 14 00 81 	mvi r20,129
 434:	34 13 ff 51 	mvi r19,-175
 438:	e3 ff ff d8 	bi 398 <main+0x190>
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
	else if (c1 > 74 && c1 < 80){b1 = 51; c3 = 437; c2 = 22452;}
 43c:	34 0e 00 b5 	mvi r14,181
 440:	34 14 00 34 	mvi r20,52
 444:	34 13 ff 4b 	mvi r19,-181
 448:	e3 ff ff d4 	bi 398 <main+0x190>
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
	else if (c1 > 68 && c1 < 74){b1 = 57; c3 = 393; c2 = 22452;}
 44c:	34 0e 00 89 	mvi r14,137
 450:	34 14 00 3a 	mvi r20,58
 454:	34 13 ff 77 	mvi r19,-137
 458:	e3 ff ff d0 	bi 398 <main+0x190>
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
	else if (c1 > 32 && c1 < 38){b1 = 102; c3 = 218; c2 = 22452;}
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
 45c:	34 0e 00 fa 	mvi r14,250
 460:	34 14 00 5b 	mvi r20,91
 464:	34 13 ff 06 	mvi r19,-250
 468:	e3 ff ff cc 	bi 398 <main+0x190>
	if (c1 > 2 && c1 < 8){b1 = 170; c3 = 132; c2 = 22452;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 152; c3 = 147; c2 = 22452;}
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
	else if (c1 > 32 && c1 < 38){b1 = 102; c3 = 218; c2 = 22452;}
 46c:	34 0e 00 da 	mvi r14,218
 470:	34 14 00 67 	mvi r20,103
 474:	34 13 ff 26 	mvi r19,-218
 478:	e3 ff ff c8 	bi 398 <main+0x190>
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
	else if (c1 > 62 && c1 < 68){b1 = 64; c3 = 350; c2 = 22452;}
 47c:	34 0e 00 5e 	mvi r14,94
 480:	34 14 00 41 	mvi r20,65
 484:	34 13 ff a2 	mvi r19,-94
 488:	e3 ff ff c4 	bi 398 <main+0x190>
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
	else if (c1 > 32 && c1 < 38){b1 = 102; c3 = 218; c2 = 22452;}
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
	else if (c1 > 56 && c1 < 62){b1 = 67; c3 = 338; c2 = 22452;}
 48c:	34 0e 00 52 	mvi r14,82
 490:	34 14 00 44 	mvi r20,68
 494:	34 13 ff ae 	mvi r19,-82
 498:	e3 ff ff c0 	bi 398 <main+0x190>
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
	else if (c1 > 32 && c1 < 38){b1 = 102; c3 = 218; c2 = 22452;}
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
        else if (c1 > 50 && c1 < 56){b1 = 76; c3 = 294; c2 = 22452;}
 49c:	34 0e 00 26 	mvi r14,38
 4a0:	34 14 00 4d 	mvi r20,77
 4a4:	34 13 ff da 	mvi r19,-38
 4a8:	e3 ff ff bc 	bi 398 <main+0x190>
	else if (c1 > 14 && c1 < 20){b1 = 134; c3 = 169; c2 = 22452;}
	else if (c1 > 20 && c1 < 26){b1 = 128; c3 = 175; c2 = 22452;}
	else if (c1 > 26 && c1 < 32){b1 = 114; c3 = 196; c2 = 22452;}
	else if (c1 > 32 && c1 < 38){b1 = 102; c3 = 218; c2 = 22452;}
        else if (c1 > 38 && c1 < 44){b1 = 90; c3 = 250; c2 = 22452;}
	else if (c1 > 44 && c1 < 50){b1 = 85; c3 = 264; c2 = 22452;}
 4ac:	34 0e 00 08 	mvi r14,8
 4b0:	34 14 00 56 	mvi r20,86
 4b4:	34 13 ff f8 	mvi r19,-8
 4b8:	e3 ff ff b8 	bi 398 <main+0x190>

000004bc <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 4bc:	c3 a0 00 00 	ret

000004c0 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4c0:	78 01 00 00 	mvhi r1,0x0
 4c4:	38 21 08 ac 	ori r1,r1,0x8ac
 4c8:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4cc:	78 02 00 00 	mvhi r2,0x0
 4d0:	38 42 08 1c 	ori r2,r2,0x81c
 4d4:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4d8:	34 63 00 01 	addi r3,r3,1
 4dc:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4e0:	34 01 00 0e 	mvi r1,14
 4e4:	58 41 00 00 	sw (r2+0),r1
}
 4e8:	c3 a0 00 00 	ret

000004ec <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 4ec:	37 9c ff f0 	addi sp,sp,-16
 4f0:	5b 8b 00 10 	sw (sp+16),r11
 4f4:	5b 8c 00 0c 	sw (sp+12),r12
 4f8:	5b 8d 00 08 	sw (sp+8),r13
 4fc:	5b 9d 00 04 	sw (sp+4),ra
 500:	78 0b 00 00 	mvhi r11,0x0
 504:	39 6b 08 2c 	ori r11,r11,0x82c
 508:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 50c:	35 6d 00 80 	addi r13,r11,128
 510:	e0 00 00 04 	bi 520 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 514:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 518:	45 6d 00 08 	be r11,r13,538 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 51c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 520:	21 81 00 01 	andi r1,r12,0x1
 524:	44 20 ff fc 	be r1,r0,514 <irq_handler+0x28>
 528:	29 61 00 00 	lw r1,(r11+0)
 52c:	35 6b 00 04 	addi r11,r11,4
 530:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 534:	5d 6d ff fa 	bne r11,r13,51c <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 538:	2b 9d 00 04 	lw ra,(sp+4)
 53c:	2b 8b 00 10 	lw r11,(sp+16)
 540:	2b 8c 00 0c 	lw r12,(sp+12)
 544:	2b 8d 00 08 	lw r13,(sp+8)
 548:	37 9c 00 10 	addi sp,sp,16
 54c:	c3 a0 00 00 	ret

00000550 <isr_init>:

void isr_init()
{
 550:	78 01 00 00 	mvhi r1,0x0
 554:	78 02 00 00 	mvhi r2,0x0
 558:	38 21 08 2c 	ori r1,r1,0x82c
 55c:	38 42 04 bc 	ori r2,r2,0x4bc
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 560:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 564:	58 22 00 00 	sw (r1+0),r2
 568:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 56c:	5c 23 ff fe 	bne r1,r3,564 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 570:	c3 a0 00 00 	ret

00000574 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 574:	78 03 00 00 	mvhi r3,0x0
 578:	3c 21 00 02 	sli r1,r1,2
 57c:	38 63 08 2c 	ori r3,r3,0x82c
 580:	b4 61 18 00 	add r3,r3,r1
 584:	58 62 00 00 	sw (r3+0),r2
}
 588:	c3 a0 00 00 	ret

0000058c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 58c:	78 03 00 00 	mvhi r3,0x0
 590:	3c 21 00 02 	sli r1,r1,2
 594:	38 63 08 2c 	ori r3,r3,0x82c
 598:	78 02 00 00 	mvhi r2,0x0
 59c:	b4 61 18 00 	add r3,r3,r1
 5a0:	38 42 04 bc 	ori r2,r2,0x4bc
 5a4:	58 62 00 00 	sw (r3+0),r2
}
 5a8:	c3 a0 00 00 	ret

000005ac <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura, 1 es puerto escritura o salida
 5ac:	78 02 00 00 	mvhi r2,0x0
 5b0:	38 42 08 20 	ori r2,r2,0x820
 5b4:	28 42 00 00 	lw r2,(r2+0)
 5b8:	58 41 00 08 	sw (r2+8),r1
}
 5bc:	c3 a0 00 00 	ret

000005c0 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 5c0:	78 01 00 00 	mvhi r1,0x0
 5c4:	38 21 08 20 	ori r1,r1,0x820
 5c8:	28 21 00 00 	lw r1,(r1+0)
 5cc:	28 21 00 00 	lw r1,(r1+0)
}
 5d0:	c3 a0 00 00 	ret

000005d4 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 5d4:	78 02 00 00 	mvhi r2,0x0
 5d8:	38 42 08 20 	ori r2,r2,0x820
 5dc:	28 42 00 00 	lw r2,(r2+0)
 5e0:	58 41 00 04 	sw (r2+4),r1
}
 5e4:	c3 a0 00 00 	ret

000005e8 <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 5e8:	20 21 00 ff 	andi r1,r1,0xff
 5ec:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 5f0:	5c 20 00 09 	bne r1,r0,614 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 5f4:	78 01 00 00 	mvhi r1,0x0
 5f8:	38 21 08 20 	ori r1,r1,0x820
 5fc:	28 21 00 00 	lw r1,(r1+0)
 600:	a4 40 10 00 	not r2,r2
 604:	28 23 00 00 	lw r3,(r1+0)
 608:	a0 43 10 00 	and r2,r2,r3
 60c:	58 22 00 04 	sw (r1+4),r2
 610:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 614:	78 01 00 00 	mvhi r1,0x0
 618:	38 21 08 20 	ori r1,r1,0x820
 61c:	28 21 00 00 	lw r1,(r1+0)
 620:	28 23 00 00 	lw r3,(r1+0)
 624:	b8 43 10 00 	or r2,r2,r3
 628:	58 22 00 04 	sw (r1+4),r2
 62c:	c3 a0 00 00 	ret

00000630 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 630:	78 02 00 00 	mvhi r2,0x0
 634:	38 42 08 20 	ori r2,r2,0x820
 638:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 63c:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 640:	28 43 00 00 	lw r3,(r2+0)
 644:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 648:	a0 23 18 00 	and r3,r1,r3
 64c:	5c 60 00 06 	bne r3,r0,664 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 650:	28 43 00 00 	lw r3,(r2+0)
 654:	a4 20 08 00 	not r1,r1
 658:	a0 23 08 00 	and r1,r1,r3
 65c:	58 41 00 04 	sw (r2+4),r1
 660:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 664:	28 43 00 00 	lw r3,(r2+0)
 668:	b8 23 08 00 	or r1,r1,r3
 66c:	58 41 00 04 	sw (r2+4),r1
 670:	c3 a0 00 00 	ret

00000674 <counter>:
//**************************************************************************
int counter()
{
	uint32_t tcr;
	int msec=0xFFFFFFFF;
	timer0->compare1 = (FCPU/1000)*msec;
 674:	78 01 00 00 	mvhi r1,0x0
 678:	78 03 00 00 	mvhi r3,0x0
 67c:	38 63 08 10 	ori r3,r3,0x810
 680:	38 21 08 1c 	ori r1,r1,0x81c
 684:	28 21 00 00 	lw r1,(r1+0)
 688:	28 62 00 00 	lw r2,(r3+0)
 68c:	58 22 00 10 	sw (r1+16),r2
	timer0->counter1 = 0;
 690:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;
 694:	34 02 00 08 	mvi r2,8
 698:	58 22 00 0c 	sw (r1+12),r2

	return timer0->counter1;
 69c:	28 21 00 14 	lw r1,(r1+20)
}
 6a0:	c3 a0 00 00 	ret

000006a4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 6a4:	78 04 00 00 	mvhi r4,0x0
 6a8:	38 84 08 14 	ori r4,r4,0x814
 6ac:	28 83 00 00 	lw r3,(r4+0)
 6b0:	78 02 00 00 	mvhi r2,0x0
 6b4:	38 42 08 1c 	ori r2,r2,0x81c
 6b8:	28 42 00 00 	lw r2,(r2+0)
 6bc:	88 23 08 00 	mul r1,r1,r3
 6c0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 6c4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6c8:	34 01 00 08 	mvi r1,8
 6cc:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 6d0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6d4:	20 21 00 01 	andi r1,r1,0x1
 6d8:	44 20 ff fe 	be r1,r0,6d0 <msleep+0x2c>
}
 6dc:	c3 a0 00 00 	ret

000006e0 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 6e0:	78 02 00 00 	mvhi r2,0x0
 6e4:	38 42 08 1c 	ori r2,r2,0x81c
 6e8:	28 42 00 00 	lw r2,(r2+0)
 6ec:	08 21 00 64 	muli r1,r1,100
 6f0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 6f4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6f8:	34 01 00 08 	mvi r1,8
 6fc:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 700:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 704:	20 21 00 01 	andi r1,r1,0x1
 708:	44 20 ff fe 	be r1,r0,700 <nsleep+0x20>
}
 70c:	c3 a0 00 00 	ret

00000710 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 710:	78 01 00 00 	mvhi r1,0x0
 714:	38 21 08 1c 	ori r1,r1,0x81c
 718:	28 23 00 00 	lw r3,(r1+0)
 71c:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 720:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 724:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 728:	38 21 08 ac 	ori r1,r1,0x8ac

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 72c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 730:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 734:	78 02 00 00 	mvhi r2,0x0
 738:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 73c:	34 04 00 0e 	mvi r4,14
 740:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 744:	38 21 08 2c 	ori r1,r1,0x82c
 748:	38 42 04 c0 	ori r2,r2,0x4c0
 74c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 750:	c3 a0 00 00 	ret

00000754 <uart_init>:


//***************************************************************************
// Estructura del periferico UART
//***************************************************************************
void uart_init(){}
 754:	c3 a0 00 00 	ret

00000758 <uart_getchar>:

char uart_getchar()
{
 758:	78 01 00 00 	mvhi r1,0x0
 75c:	38 21 08 18 	ori r1,r1,0x818
 760:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 764:	28 41 00 00 	lw r1,(r2+0)
 768:	20 21 00 01 	andi r1,r1,0x1
 76c:	44 20 ff fe 	be r1,r0,764 <uart_getchar+0xc>
	return uart0->rxtx;
 770:	28 41 00 04 	lw r1,(r2+4)
}
 774:	20 21 00 ff 	andi r1,r1,0xff
 778:	c3 a0 00 00 	ret

0000077c <uart_putchar>:

void uart_putchar(char c)
{
 77c:	78 02 00 00 	mvhi r2,0x0
 780:	38 42 08 18 	ori r2,r2,0x818
 784:	28 43 00 00 	lw r3,(r2+0)
 788:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 78c:	28 62 00 00 	lw r2,(r3+0)
 790:	20 42 00 10 	andi r2,r2,0x10
 794:	5c 40 ff fe 	bne r2,r0,78c <uart_putchar+0x10>
	uart0->rxtx = c;
 798:	58 61 00 04 	sw (r3+4),r1
}
 79c:	c3 a0 00 00 	ret

000007a0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7a0:	40 24 00 00 	lbu r4,(r1+0)
 7a4:	44 80 00 0b 	be r4,r0,7d0 <uart_putstr+0x30>
 7a8:	78 02 00 00 	mvhi r2,0x0
 7ac:	38 42 08 18 	ori r2,r2,0x818
 7b0:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 7b4:	28 62 00 00 	lw r2,(r3+0)
 7b8:	20 42 00 10 	andi r2,r2,0x10
 7bc:	5c 40 ff fe 	bne r2,r0,7b4 <uart_putstr+0x14>
	uart0->rxtx = c;
 7c0:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 7c4:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7c8:	40 24 00 00 	lbu r4,(r1+0)
 7cc:	5c 82 ff fa 	bne r4,r2,7b4 <uart_putstr+0x14>
 7d0:	c3 a0 00 00 	ret

000007d4 <trigger_set>:
//***************************************************************************
// Estructura del periferico TRIGGER
//***************************************************************************
void trigger_set(uint32_t st)
{
    trigger0->set_trig = st;
 7d4:	78 02 00 00 	mvhi r2,0x0
 7d8:	38 42 08 28 	ori r2,r2,0x828
 7dc:	28 42 00 00 	lw r2,(r2+0)
 7e0:	58 41 00 00 	sw (r2+0),r1
}
 7e4:	c3 a0 00 00 	ret

000007e8 <read_count>:

uint32_t read_count()
{
    return trigger0->c_out;
 7e8:	78 01 00 00 	mvhi r1,0x0
 7ec:	38 21 08 28 	ori r1,r1,0x828
 7f0:	28 21 00 00 	lw r1,(r1+0)
 7f4:	28 21 00 04 	lw r1,(r1+4)
}
 7f8:	c3 a0 00 00 	ret

000007fc <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 7fc:	78 02 00 00 	mvhi r2,0x0
 800:	38 42 08 24 	ori r2,r2,0x824
 804:	28 42 00 00 	lw r2,(r2+0)
 808:	58 41 00 00 	sw (r2+0),r1

}
 80c:	c3 a0 00 00 	ret
