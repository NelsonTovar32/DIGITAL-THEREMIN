
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tama침o    VMA       LMA       Desp fich Alin
  0 .text         000005ac  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  000005ac  000005ac  00000600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000005b4  000005b4  00000608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000005c8  000005c8  0000061c  2**2
                  ALLOC
  4 .debug_abbrev 00000263  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000427  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001db  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ab  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000ae  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000022c  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci칩n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 74 	calli 29c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 d0 	ori gp,gp,0x5d0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 c8 	ori r1,r1,0x5c8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 4c 	ori r3,r3,0x64c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

//**************************************************************************************************
// Funci칩n principal del codigo - Inicializaci칩n de SPI y lectura //
//**************************************************************************************************
int main()
{
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
 218:	34 0c 00 fb 	mvi r12,251
 21c:	34 0b 00 56 	mvi r11,86
                c2 = ((1/b1)/85)*1e9;
                c3 = c2/85;
                c4 = j*c3;
                c5 = c2-c4;

    	        set_pin(1,8);			//se asigna el ciclo util por tiempo
 220:	34 02 00 08 	mvi r2,8
 224:	34 01 00 01 	mvi r1,1
 228:	f8 00 00 5c 	calli 398 <set_pin>
   	        nsleep(c4);
 22c:	34 01 00 00 	mvi r1,0
 230:	f8 00 00 98 	calli 490 <nsleep>
	        set_pin(0,8);
 234:	34 01 00 00 	mvi r1,0
 238:	34 02 00 08 	mvi r2,8
 23c:	f8 00 00 57 	calli 398 <set_pin>
	        nsleep(c5);
 240:	35 6b ff ff 	addi r11,r11,-1
 244:	34 01 00 00 	mvi r1,0
 248:	f8 00 00 92 	calli 490 <nsleep>
	else if ( c1 > 50 && c1 < 60){ b1 = 440;}
        else if ( c1 > 60 && c1 < 70){ b1 = 494;}
	
	for ( i = 0; i < 251; i++)
	{
	    for ( j = 0; j < 86; j++)		//recorre cada una de las muestras (85 tercera octava)
 24c:	5d 60 ff f5 	bne r11,r0,220 <main+0x18>
 250:	35 8c ff ff 	addi r12,r12,-1
	else if ( c1 > 30 && c1 < 40){ b1 = 349;}
	else if ( c1 > 40 && c1 < 50){ b1 = 392;}
	else if ( c1 > 50 && c1 < 60){ b1 = 440;}
        else if ( c1 > 60 && c1 < 70){ b1 = 494;}
	
	for ( i = 0; i < 251; i++)
 254:	5d 8b ff f2 	bne r12,r11,21c <main+0x14>





}
 258:	2b 9d 00 04 	lw ra,(sp+4)
 25c:	2b 8b 00 0c 	lw r11,(sp+12)
 260:	2b 8c 00 08 	lw r12,(sp+8)
 264:	37 9c 00 0c 	addi sp,sp,12
 268:	c3 a0 00 00 	ret

0000026c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 26c:	c3 a0 00 00 	ret

00000270 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 270:	78 01 00 00 	mvhi r1,0x0
 274:	38 21 06 48 	ori r1,r1,0x648
 278:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 27c:	78 02 00 00 	mvhi r2,0x0
 280:	38 42 05 b8 	ori r2,r2,0x5b8
 284:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 288:	34 63 00 01 	addi r3,r3,1
 28c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 290:	34 01 00 0e 	mvi r1,14
 294:	58 41 00 00 	sw (r2+0),r1
}
 298:	c3 a0 00 00 	ret

0000029c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 29c:	37 9c ff f0 	addi sp,sp,-16
 2a0:	5b 8b 00 10 	sw (sp+16),r11
 2a4:	5b 8c 00 0c 	sw (sp+12),r12
 2a8:	5b 8d 00 08 	sw (sp+8),r13
 2ac:	5b 9d 00 04 	sw (sp+4),ra
 2b0:	78 0b 00 00 	mvhi r11,0x0
 2b4:	39 6b 05 c8 	ori r11,r11,0x5c8
 2b8:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2bc:	35 6d 00 80 	addi r13,r11,128
 2c0:	e0 00 00 04 	bi 2d0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2c4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2c8:	45 6d 00 08 	be r11,r13,2e8 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2cc:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2d0:	21 81 00 01 	andi r1,r12,0x1
 2d4:	44 20 ff fc 	be r1,r0,2c4 <irq_handler+0x28>
 2d8:	29 61 00 00 	lw r1,(r11+0)
 2dc:	35 6b 00 04 	addi r11,r11,4
 2e0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2e4:	5d 6d ff fa 	bne r11,r13,2cc <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 2e8:	2b 9d 00 04 	lw ra,(sp+4)
 2ec:	2b 8b 00 10 	lw r11,(sp+16)
 2f0:	2b 8c 00 0c 	lw r12,(sp+12)
 2f4:	2b 8d 00 08 	lw r13,(sp+8)
 2f8:	37 9c 00 10 	addi sp,sp,16
 2fc:	c3 a0 00 00 	ret

00000300 <isr_init>:

void isr_init()
{
 300:	78 01 00 00 	mvhi r1,0x0
 304:	78 02 00 00 	mvhi r2,0x0
 308:	38 21 05 c8 	ori r1,r1,0x5c8
 30c:	38 42 02 6c 	ori r2,r2,0x26c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 310:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 314:	58 22 00 00 	sw (r1+0),r2
 318:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 31c:	5c 23 ff fe 	bne r1,r3,314 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 320:	c3 a0 00 00 	ret

00000324 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 324:	78 03 00 00 	mvhi r3,0x0
 328:	3c 21 00 02 	sli r1,r1,2
 32c:	38 63 05 c8 	ori r3,r3,0x5c8
 330:	b4 61 18 00 	add r3,r3,r1
 334:	58 62 00 00 	sw (r3+0),r2
}
 338:	c3 a0 00 00 	ret

0000033c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 33c:	78 03 00 00 	mvhi r3,0x0
 340:	3c 21 00 02 	sli r1,r1,2
 344:	38 63 05 c8 	ori r3,r3,0x5c8
 348:	78 02 00 00 	mvhi r2,0x0
 34c:	b4 61 18 00 	add r3,r3,r1
 350:	38 42 02 6c 	ori r2,r2,0x26c
 354:	58 62 00 00 	sw (r3+0),r2
}
 358:	c3 a0 00 00 	ret

0000035c <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura
 35c:	78 02 00 00 	mvhi r2,0x0
 360:	38 42 05 bc 	ori r2,r2,0x5bc
 364:	28 42 00 00 	lw r2,(r2+0)
 368:	58 41 00 08 	sw (r2+8),r1
}
 36c:	c3 a0 00 00 	ret

00000370 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 370:	78 01 00 00 	mvhi r1,0x0
 374:	38 21 05 bc 	ori r1,r1,0x5bc
 378:	28 21 00 00 	lw r1,(r1+0)
 37c:	28 21 00 00 	lw r1,(r1+0)
}
 380:	c3 a0 00 00 	ret

00000384 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 384:	78 02 00 00 	mvhi r2,0x0
 388:	38 42 05 bc 	ori r2,r2,0x5bc
 38c:	28 42 00 00 	lw r2,(r2+0)
 390:	58 41 00 04 	sw (r2+4),r1
}
 394:	c3 a0 00 00 	ret

00000398 <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 398:	20 21 00 ff 	andi r1,r1,0xff
 39c:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 3a0:	5c 20 00 09 	bne r1,r0,3c4 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 3a4:	78 01 00 00 	mvhi r1,0x0
 3a8:	38 21 05 bc 	ori r1,r1,0x5bc
 3ac:	28 21 00 00 	lw r1,(r1+0)
 3b0:	a4 40 10 00 	not r2,r2
 3b4:	28 23 00 00 	lw r3,(r1+0)
 3b8:	a0 43 10 00 	and r2,r2,r3
 3bc:	58 22 00 04 	sw (r1+4),r2
 3c0:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 3c4:	78 01 00 00 	mvhi r1,0x0
 3c8:	38 21 05 bc 	ori r1,r1,0x5bc
 3cc:	28 21 00 00 	lw r1,(r1+0)
 3d0:	28 23 00 00 	lw r3,(r1+0)
 3d4:	b8 43 10 00 	or r2,r2,r3
 3d8:	58 22 00 04 	sw (r1+4),r2
 3dc:	c3 a0 00 00 	ret

000003e0 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 3e0:	78 02 00 00 	mvhi r2,0x0
 3e4:	38 42 05 bc 	ori r2,r2,0x5bc
 3e8:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 3ec:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 3f0:	28 43 00 00 	lw r3,(r2+0)
 3f4:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 3f8:	a0 23 18 00 	and r3,r1,r3
 3fc:	5c 60 00 06 	bne r3,r0,414 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 400:	28 43 00 00 	lw r3,(r2+0)
 404:	a4 20 08 00 	not r1,r1
 408:	a0 23 08 00 	and r1,r1,r3
 40c:	58 41 00 04 	sw (r2+4),r1
 410:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 414:	28 43 00 00 	lw r3,(r2+0)
 418:	b8 23 08 00 	or r1,r1,r3
 41c:	58 41 00 04 	sw (r2+4),r1
 420:	c3 a0 00 00 	ret

00000424 <counter>:
//**************************************************************************
int counter()
{
	uint32_t tcr;
	int msec=0xFFFFFFFF;
	timer0->compare1 = (FCPU/1000)*msec;
 424:	78 01 00 00 	mvhi r1,0x0
 428:	78 03 00 00 	mvhi r3,0x0
 42c:	38 63 05 ac 	ori r3,r3,0x5ac
 430:	38 21 05 b8 	ori r1,r1,0x5b8
 434:	28 21 00 00 	lw r1,(r1+0)
 438:	28 62 00 00 	lw r2,(r3+0)
 43c:	58 22 00 10 	sw (r1+16),r2
	timer0->counter1 = 0;
 440:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1 = TIMER_EN;
 444:	34 02 00 08 	mvi r2,8
 448:	58 22 00 0c 	sw (r1+12),r2

	return timer0->counter1;
 44c:	28 21 00 14 	lw r1,(r1+20)
}
 450:	c3 a0 00 00 	ret

00000454 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 454:	78 04 00 00 	mvhi r4,0x0
 458:	38 84 05 b0 	ori r4,r4,0x5b0
 45c:	28 83 00 00 	lw r3,(r4+0)
 460:	78 02 00 00 	mvhi r2,0x0
 464:	38 42 05 b8 	ori r2,r2,0x5b8
 468:	28 42 00 00 	lw r2,(r2+0)
 46c:	88 23 08 00 	mul r1,r1,r3
 470:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 474:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 478:	34 01 00 08 	mvi r1,8
 47c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 480:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 484:	20 21 00 01 	andi r1,r1,0x1
 488:	44 20 ff fe 	be r1,r0,480 <msleep+0x2c>
}
 48c:	c3 a0 00 00 	ret

00000490 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 490:	78 02 00 00 	mvhi r2,0x0
 494:	38 42 05 b8 	ori r2,r2,0x5b8
 498:	28 42 00 00 	lw r2,(r2+0)
 49c:	08 21 00 64 	muli r1,r1,100
 4a0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4a4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4a8:	34 01 00 08 	mvi r1,8
 4ac:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 4b0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4b4:	20 21 00 01 	andi r1,r1,0x1
 4b8:	44 20 ff fe 	be r1,r0,4b0 <nsleep+0x20>
}
 4bc:	c3 a0 00 00 	ret

000004c0 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4c0:	78 01 00 00 	mvhi r1,0x0
 4c4:	38 21 05 b8 	ori r1,r1,0x5b8
 4c8:	28 23 00 00 	lw r3,(r1+0)
 4cc:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4d0:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4d4:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4d8:	38 21 06 48 	ori r1,r1,0x648

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4dc:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4e0:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4e4:	78 02 00 00 	mvhi r2,0x0
 4e8:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4ec:	34 04 00 0e 	mvi r4,14
 4f0:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4f4:	38 21 05 c8 	ori r1,r1,0x5c8
 4f8:	38 42 02 70 	ori r2,r2,0x270
 4fc:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 500:	c3 a0 00 00 	ret

00000504 <uart_init>:


//***************************************************************************
// Estructura del periferico UART
//***************************************************************************
void uart_init(){}
 504:	c3 a0 00 00 	ret

00000508 <uart_getchar>:

char uart_getchar()
{
 508:	78 01 00 00 	mvhi r1,0x0
 50c:	38 21 05 b4 	ori r1,r1,0x5b4
 510:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 514:	28 41 00 00 	lw r1,(r2+0)
 518:	20 21 00 01 	andi r1,r1,0x1
 51c:	44 20 ff fe 	be r1,r0,514 <uart_getchar+0xc>
	return uart0->rxtx;
 520:	28 41 00 04 	lw r1,(r2+4)
}
 524:	20 21 00 ff 	andi r1,r1,0xff
 528:	c3 a0 00 00 	ret

0000052c <uart_putchar>:

void uart_putchar(char c)
{
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 05 b4 	ori r2,r2,0x5b4
 534:	28 43 00 00 	lw r3,(r2+0)
 538:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 53c:	28 62 00 00 	lw r2,(r3+0)
 540:	20 42 00 10 	andi r2,r2,0x10
 544:	5c 40 ff fe 	bne r2,r0,53c <uart_putchar+0x10>
	uart0->rxtx = c;
 548:	58 61 00 04 	sw (r3+4),r1
}
 54c:	c3 a0 00 00 	ret

00000550 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 550:	40 24 00 00 	lbu r4,(r1+0)
 554:	44 80 00 0b 	be r4,r0,580 <uart_putstr+0x30>
 558:	78 02 00 00 	mvhi r2,0x0
 55c:	38 42 05 b4 	ori r2,r2,0x5b4
 560:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 564:	28 62 00 00 	lw r2,(r3+0)
 568:	20 42 00 10 	andi r2,r2,0x10
 56c:	5c 40 ff fe 	bne r2,r0,564 <uart_putstr+0x14>
	uart0->rxtx = c;
 570:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 574:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 578:	40 24 00 00 	lbu r4,(r1+0)
 57c:	5c 82 ff fa 	bne r4,r2,564 <uart_putstr+0x14>
 580:	c3 a0 00 00 	ret

00000584 <trigger_set>:
//***************************************************************************
// Estructura del periferico TRIGGER
//***************************************************************************
void trigger_set(uint32_t st)
{
    trigger0->set_trig = st;
 584:	78 02 00 00 	mvhi r2,0x0
 588:	38 42 05 c4 	ori r2,r2,0x5c4
 58c:	28 42 00 00 	lw r2,(r2+0)
 590:	58 41 00 00 	sw (r2+0),r1

}
 594:	c3 a0 00 00 	ret

00000598 <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 598:	78 02 00 00 	mvhi r2,0x0
 59c:	38 42 05 c0 	ori r2,r2,0x5c0
 5a0:	28 42 00 00 	lw r2,(r2+0)
 5a4:	58 41 00 00 	sw (r2+0),r1

}
 5a8:	c3 a0 00 00 	ret
