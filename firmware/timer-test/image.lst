
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000cf8  00000cf8  00000d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000cfc  00000cfc  00000d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000d10  00000d10  00000d64  2**2
                  ALLOC
  4 .debug_abbrev 00000360  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a74  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000b13  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000763  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000208  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000be  00000000  00000000  000031a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00003265  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000002c1  00000000  00000000  000032a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00003566  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00003577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 02 64 	calli a5c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0d 10 	ori gp,gp,0xd10
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0d 10 	ori r1,r1,0xd10
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0d 94 	ori r3,r3,0xd94

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 02 1d 	calli 9b0 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <vsig_pot>:
//********************************************************************************************
// Funciones Volumen - Potenciometro
//********************************************************************************************

uint8_t vsig_pot(uint16_t tvol, uint8_t vm)
{
 208:	20 23 00 ff 	andi r3,r1,0xff
 20c:	20 41 00 ff 	andi r1,r2,0xff
    uint16_t tmax=4000; //4ms - 4000ns - 70 cms aprox
    uint16_t mdiv7=872; //Pent(tmax/7)
    if(tvol>=300 && tvol<(mdiv7)){if(vm==0){return 0;}else if(vm>0){return vm;}}
    else if(tvol>=mdiv7 && tvol<(mdiv7*2)){if(vm<=15){return 15;}else if(vm>15){return vm;}}
 210:	34 02 00 67 	mvi r2,103
 214:	50 43 00 0a 	bgeu r2,r3,23c <vsig_pot+0x34>
 218:	34 02 00 cf 	mvi r2,207
 21c:	48 62 00 05 	bg r3,r2,230 <vsig_pot+0x28>
 220:	34 02 00 0f 	mvi r2,15
 224:	50 22 00 06 	bgeu r1,r2,23c <vsig_pot+0x34>
 228:	34 01 00 0f 	mvi r1,15
 22c:	c3 a0 00 00 	ret
 230:	34 02 00 1e 	mvi r2,30
 234:	50 22 00 02 	bgeu r1,r2,23c <vsig_pot+0x34>
 238:	34 01 00 1e 	mvi r1,30
    else if(tvol>=(mdiv7*3) && tvol<(mdiv7*4)){if(vm<=45){return 45;}else if(vm>45){return vm;}}
    else if(tvol>=(mdiv7*4) && tvol<(mdiv7*5)){if(vm<=60){return 60;}else if(vm>60){return vm;}}
    else if(tvol>=(mdiv7*5) && tvol<(mdiv7*6)){if(vm<=75){return 75;}else if(vm>75){return vm;}}
    else if(tvol>=(mdiv7*6) && tvol<(mdiv7*7)){if(vm<=99){return 99;}else if(vm>99){return vm;}}
    else {return vm;}
}
 23c:	c3 a0 00 00 	ret

00000240 <volumen>:

void volumen(uint8_t va, uint8_t vs)
{
 240:	37 9c ff fc 	addi sp,sp,-4
 244:	5b 9d 00 04 	sw (sp+4),ra
 248:	20 21 00 ff 	andi r1,r1,0xff
 24c:	20 42 00 ff 	andi r2,r2,0xff
    int r1=va-vs;
 250:	c8 22 18 00 	sub r3,r1,r2
    int r2=vs-va;
    uint8_t set=0;

    if(r1<0)
 254:	4c 60 00 06 	bge r3,r0,26c <volumen+0x2c>
}

void volumen(uint8_t va, uint8_t vs)
{
    int r1=va-vs;
    int r2=vs-va;
 258:	c8 41 08 00 	sub r1,r2,r1
    uint8_t set=0;

    if(r1<0)
        {
            set=r2+128-1;
 25c:	34 21 00 7f 	addi r1,r1,127
            set_digpot(set);
 260:	20 21 00 ff 	andi r1,r1,0xff
 264:	f8 00 02 a0 	calli ce4 <set_digpot>
 268:	e0 00 00 05 	bi 27c <volumen+0x3c>
        }
    else if(r1>0)
 26c:	44 60 00 04 	be r3,r0,27c <volumen+0x3c>
        {
            set=r1-1;
 270:	34 61 ff ff 	addi r1,r3,-1
            set_digpot(set);
 274:	20 21 00 ff 	andi r1,r1,0xff
 278:	f8 00 02 9b 	calli ce4 <set_digpot>
        }
    else if(r1==0){;}
}
 27c:	2b 9d 00 04 	lw ra,(sp+4)
 280:	37 9c 00 04 	addi sp,sp,4
 284:	c3 a0 00 00 	ret

00000288 <ajustment>:
// Funciones GPIO
//********************************************************************************************


void ajustment(int *p, int *v, int *m)
{
 288:	37 9c ff c8 	addi sp,sp,-56
 28c:	5b 8b 00 38 	sw (sp+56),r11
 290:	5b 8c 00 34 	sw (sp+52),r12
 294:	5b 8d 00 30 	sw (sp+48),r13
 298:	5b 8e 00 2c 	sw (sp+44),r14
 29c:	5b 8f 00 28 	sw (sp+40),r15
 2a0:	5b 90 00 24 	sw (sp+36),r16
 2a4:	5b 91 00 20 	sw (sp+32),r17
 2a8:	5b 92 00 1c 	sw (sp+28),r18
 2ac:	5b 93 00 18 	sw (sp+24),r19
 2b0:	5b 94 00 14 	sw (sp+20),r20
 2b4:	5b 95 00 10 	sw (sp+16),r21
 2b8:	5b 96 00 0c 	sw (sp+12),r22
 2bc:	5b 97 00 08 	sw (sp+8),r23
 2c0:	5b 9d 00 04 	sw (sp+4),ra
 2c4:	78 0c 00 00 	mvhi r12,0x0
 2c8:	b8 20 a0 00 	mv r20,r1
 2cc:	b8 40 70 00 	mv r14,r2
 2d0:	b8 60 80 00 	mv r16,r3
    uint16_t seteo=0;
 2d4:	34 0b 00 00 	mvi r11,0
 2d8:	39 8c 0d 00 	ori r12,r12,0xd00
    uint8_t aux;
    while(seteo!=PAUSE)
        {
	    set_pin(1,3); //Prender el LED BLANCO
            if(seteo==MODO){
 2dc:	34 0d 00 02 	mvi r13,2
                if(*m==1){*m=2;set_pin(0,2);}
                else if(*m==2){*m=1;set_pin(1,2);}
                            }
            else if(seteo==VOLUP){
 2e0:	34 0f 00 04 	mvi r15,4
                    else if(aux==75){aux=99;}
                    else if(aux==99){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==VOLDW){
 2e4:	34 11 00 08 	mvi r17,8
                    else if(aux<=75 && aux>=15){aux=aux-15;}
                    else if(aux==0){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==PITCHUP){
 2e8:	34 12 00 10 	mvi r18,16
                    aux=*p;
                    if(aux>=0x002 && aux<=0x00E){aux++;}
 2ec:	34 16 00 0c 	mvi r22,12
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==VOLDW){
                    aux=*v;
                    if(aux==99){aux=75;}
 2f0:	34 15 00 63 	mvi r21,99
 2f4:	34 17 00 4b 	mvi r23,75
                    else if(aux<=75 && aux>=15){aux=aux-15;}
 2f8:	34 13 00 3c 	mvi r19,60
 2fc:	e0 00 00 0e 	bi 334 <ajustment+0xac>
	    set_pin(1,3); //Prender el LED BLANCO
            if(seteo==MODO){
                if(*m==1){*m=2;set_pin(0,2);}
                else if(*m==2){*m=1;set_pin(1,2);}
                            }
            else if(seteo==VOLUP){
 300:	45 6f 00 1a 	be r11,r15,368 <ajustment+0xe0>
                    else if(aux==75){aux=99;}
                    else if(aux==99){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==VOLDW){
 304:	45 71 00 1f 	be r11,r17,380 <ajustment+0xf8>
                    else if(aux<=75 && aux>=15){aux=aux-15;}
                    else if(aux==0){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==PITCHUP){
 308:	45 72 00 27 	be r11,r18,3a4 <ajustment+0x11c>
                    else if(aux==0x002){;}
                    *p=aux;
                    trigger_set0(aux);
                    aux=0;
                                }
            nsleep(2000);        //Para el rebote
 30c:	34 01 07 d0 	mvi r1,2000
 310:	f8 00 02 44 	calli c20 <nsleep>
            seteo=gpio0->read;
 314:	29 82 00 00 	lw r2,(r12+0)
            seteo=seteo>>3;
            nsleep(2000);       //Para el rebote
 318:	34 01 07 d0 	mvi r1,2000
                    *p=aux;
                    trigger_set0(aux);
                    aux=0;
                                }
            nsleep(2000);        //Para el rebote
            seteo=gpio0->read;
 31c:	28 4b 00 00 	lw r11,(r2+0)
            seteo=seteo>>3;
            nsleep(2000);       //Para el rebote
 320:	f8 00 02 40 	calli c20 <nsleep>

void ajustment(int *p, int *v, int *m)
{
    uint16_t seteo=0;
    uint8_t aux;
    while(seteo!=PAUSE)
 324:	34 04 00 01 	mvi r4,1
                    *p=aux;
                    trigger_set0(aux);
                    aux=0;
                                }
            nsleep(2000);        //Para el rebote
            seteo=gpio0->read;
 328:	21 6b 00 ff 	andi r11,r11,0xff
            seteo=seteo>>3;
 32c:	01 6b 00 03 	srui r11,r11,3

void ajustment(int *p, int *v, int *m)
{
    uint16_t seteo=0;
    uint8_t aux;
    while(seteo!=PAUSE)
 330:	45 64 00 2b 	be r11,r4,3dc <ajustment+0x154>
        {
	    set_pin(1,3); //Prender el LED BLANCO
 334:	34 01 00 01 	mvi r1,1
 338:	34 02 00 03 	mvi r2,3
 33c:	f8 00 02 07 	calli b58 <set_pin>
            if(seteo==MODO){
 340:	5d 6d ff f0 	bne r11,r13,300 <ajustment+0x78>
                if(*m==1){*m=2;set_pin(0,2);}
 344:	2a 02 00 00 	lw r2,(r16+0)
 348:	34 03 00 01 	mvi r3,1
 34c:	44 43 00 37 	be r2,r3,428 <ajustment+0x1a0>
                else if(*m==2){*m=1;set_pin(1,2);}
 350:	5c 4d ff ef 	bne r2,r13,30c <ajustment+0x84>
 354:	5a 03 00 00 	sw (r16+0),r3
 358:	34 01 00 01 	mvi r1,1
 35c:	34 02 00 02 	mvi r2,2
 360:	f8 00 01 fe 	calli b58 <set_pin>
 364:	e3 ff ff ea 	bi 30c <ajustment+0x84>
                            }
            else if(seteo==VOLUP){
                    aux=*v;
 368:	41 c2 00 03 	lbu r2,(r14+3)
                    if(aux>=0 && aux<=60){aux=aux+15;}
 36c:	54 53 00 17 	bgu r2,r19,3c8 <ajustment+0x140>
 370:	34 42 00 0f 	addi r2,r2,15
 374:	20 44 00 ff 	andi r4,r2,0xff
                    else if(aux==75){aux=99;}
                    else if(aux==99){;}
                    *v=aux;
 378:	59 c4 00 00 	sw (r14+0),r4
 37c:	e3 ff ff e4 	bi 30c <ajustment+0x84>
                    aux=0;
                                }
            else if(seteo==VOLDW){
                    aux=*v;
 380:	41 c3 00 03 	lbu r3,(r14+3)
                    if(aux==99){aux=75;}
 384:	34 02 00 4b 	mvi r2,75
 388:	44 75 00 05 	be r3,r21,39c <ajustment+0x114>
                    else if(aux<=75 && aux>=15){aux=aux-15;}
 38c:	34 62 ff f1 	addi r2,r3,-15
 390:	20 42 00 ff 	andi r2,r2,0xff
 394:	52 62 00 02 	bgeu r19,r2,39c <ajustment+0x114>
 398:	b8 60 10 00 	mv r2,r3
                    else if(aux==0){;}
                    *v=aux;
 39c:	59 c2 00 00 	sw (r14+0),r2
 3a0:	e3 ff ff db 	bi 30c <ajustment+0x84>
                    aux=0;
                                }
            else if(seteo==PITCHUP){
                    aux=*p;
 3a4:	42 81 00 03 	lbu r1,(r20+3)
                    if(aux>=0x002 && aux<=0x00E){aux++;}
 3a8:	34 22 ff fe 	addi r2,r1,-2
 3ac:	20 42 00 ff 	andi r2,r2,0xff
 3b0:	54 56 00 03 	bgu r2,r22,3bc <ajustment+0x134>
 3b4:	34 21 00 01 	addi r1,r1,1
 3b8:	20 21 00 ff 	andi r1,r1,0xff
                    else if(aux==0x00F){;}
                    *p=aux;
 3bc:	5a 81 00 00 	sw (r20+0),r1
                    trigger_set0(aux);
 3c0:	f8 00 02 35 	calli c94 <trigger_set0>
 3c4:	e3 ff ff d2 	bi 30c <ajustment+0x84>
                else if(*m==2){*m=1;set_pin(1,2);}
                            }
            else if(seteo==VOLUP){
                    aux=*v;
                    if(aux>=0 && aux<=60){aux=aux+15;}
                    else if(aux==75){aux=99;}
 3c8:	34 04 00 63 	mvi r4,99
 3cc:	44 57 ff eb 	be r2,r23,378 <ajustment+0xf0>
 3d0:	b8 40 20 00 	mv r4,r2
                    else if(aux==99){;}
                    *v=aux;
 3d4:	59 c4 00 00 	sw (r14+0),r4
 3d8:	e3 ff ff cd 	bi 30c <ajustment+0x84>
            seteo=gpio0->read;
            seteo=seteo>>3;
            nsleep(2000);       //Para el rebote

        }
		set_pin(0,3); //Apagar el LED BLANCO
 3dc:	34 01 00 00 	mvi r1,0
 3e0:	34 02 00 03 	mvi r2,3
 3e4:	f8 00 01 dd 	calli b58 <set_pin>

}
 3e8:	2b 9d 00 04 	lw ra,(sp+4)
 3ec:	2b 8b 00 38 	lw r11,(sp+56)
 3f0:	2b 8c 00 34 	lw r12,(sp+52)
 3f4:	2b 8d 00 30 	lw r13,(sp+48)
 3f8:	2b 8e 00 2c 	lw r14,(sp+44)
 3fc:	2b 8f 00 28 	lw r15,(sp+40)
 400:	2b 90 00 24 	lw r16,(sp+36)
 404:	2b 91 00 20 	lw r17,(sp+32)
 408:	2b 92 00 1c 	lw r18,(sp+28)
 40c:	2b 93 00 18 	lw r19,(sp+24)
 410:	2b 94 00 14 	lw r20,(sp+20)
 414:	2b 95 00 10 	lw r21,(sp+16)
 418:	2b 96 00 0c 	lw r22,(sp+12)
 41c:	2b 97 00 08 	lw r23,(sp+8)
 420:	37 9c 00 38 	addi sp,sp,56
 424:	c3 a0 00 00 	ret
    uint8_t aux;
    while(seteo!=PAUSE)
        {
	    set_pin(1,3); //Prender el LED BLANCO
            if(seteo==MODO){
                if(*m==1){*m=2;set_pin(0,2);}
 428:	5a 0d 00 00 	sw (r16+0),r13
 42c:	34 01 00 00 	mvi r1,0
 430:	34 02 00 02 	mvi r2,2
 434:	f8 00 01 c9 	calli b58 <set_pin>
 438:	e3 ff ff b5 	bi 30c <ajustment+0x84>

0000043c <sel_nota>:
//********************************************************************************************
// Funciones Musicales
//********************************************************************************************

uint8_t sel_nota(uint32_t dist, uint8_t mode)
{
 43c:	20 42 00 ff 	andi r2,r2,0xff
    uint16_t mdiv7;
    if(mode==1)
 440:	34 03 00 01 	mvi r3,1
 444:	44 43 00 33 	be r2,r3,510 <sel_nota+0xd4>
                else if(dist>=(mdiv7*4) && dist<(mdiv7*5)){return 5;}//Sol4}
                else if(dist>=(mdiv7*5) && dist<(mdiv7*6)){return 6;}//La4}
                else if(dist>=(mdiv7*6) && dist<(mdiv7*7)){return 7;}//Si4}
                else {return 0;}
        }
    else if(mode==2)
 448:	34 03 00 02 	mvi r3,2
 44c:	44 43 00 02 	be r2,r3,454 <sel_nota+0x18>
 450:	c3 a0 00 00 	ret
        {
            mdiv7=658; //(5000/14)
                if(dist>=300 && dist<(mdiv7)){return 1;}//Do4}
 454:	34 02 01 2b 	mvi r2,299
 458:	54 22 00 07 	bgu r1,r2,474 <sel_nota+0x38>
                else if(dist>=mdiv7 && dist<(mdiv7*2)){return 2;}//Re4}
 45c:	34 03 00 91 	mvi r3,145
                else if(dist>=(mdiv7*9) && dist<(mdiv7*10)){return 10;}//Mi5}
                else if(dist>=(mdiv7*10) && dist<(mdiv7*11)){return 11;}//Fa5}
                else if(dist>=(mdiv7*11) && dist<(mdiv7*12)){return 12;}//Sol5}
                else if(dist>=(mdiv7*12) && dist<(mdiv7*13)){return 13;}//La5}
                else if(dist>=(mdiv7*13) && dist<(mdiv7*14)){return 14;}//Si5}
                else {return 0;}
 460:	34 02 00 00 	mvi r2,0
        }
    else if(mode==2)
        {
            mdiv7=658; //(5000/14)
                if(dist>=300 && dist<(mdiv7)){return 1;}//Do4}
                else if(dist>=mdiv7 && dist<(mdiv7*2)){return 2;}//Re4}
 464:	50 61 00 29 	bgeu r3,r1,508 <sel_nota+0xcc>
 468:	34 03 01 23 	mvi r3,291
 46c:	34 02 00 02 	mvi r2,2
 470:	50 61 00 26 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*2) && dist<(mdiv7*3)){return 3;}//Mi4}
 474:	34 03 01 b5 	mvi r3,437
 478:	34 02 00 03 	mvi r2,3
 47c:	50 61 00 23 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*3) && dist<(mdiv7*4)){return 4;}//Fa4}
 480:	34 03 02 47 	mvi r3,583
 484:	34 02 00 04 	mvi r2,4
 488:	50 61 00 20 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*4) && dist<(mdiv7*5)){return 5;}//Sol4}
 48c:	34 03 02 d9 	mvi r3,729
 490:	34 02 00 05 	mvi r2,5
 494:	50 61 00 1d 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*5) && dist<(mdiv7*6)){return 6;}//La4}
 498:	34 03 03 6b 	mvi r3,875
 49c:	34 02 00 06 	mvi r2,6
 4a0:	50 61 00 1a 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*6) && dist<(mdiv7*7)){return 7;}//Si4}
 4a4:	34 03 03 fd 	mvi r3,1021
 4a8:	34 02 00 07 	mvi r2,7
 4ac:	50 61 00 17 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*7) && dist<(mdiv7*8)){return 8;}//Do5}
 4b0:	34 03 04 8f 	mvi r3,1167
 4b4:	34 02 00 08 	mvi r2,8
 4b8:	50 61 00 14 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*8) && dist<(mdiv7*9)){return 9;}//Re5}
 4bc:	34 03 05 21 	mvi r3,1313
 4c0:	34 02 00 09 	mvi r2,9
 4c4:	50 61 00 11 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*9) && dist<(mdiv7*10)){return 10;}//Mi5}
 4c8:	34 03 05 b3 	mvi r3,1459
 4cc:	34 02 00 0a 	mvi r2,10
 4d0:	50 61 00 0e 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*10) && dist<(mdiv7*11)){return 11;}//Fa5}
 4d4:	34 03 06 45 	mvi r3,1605
 4d8:	34 02 00 0b 	mvi r2,11
 4dc:	50 61 00 0b 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*11) && dist<(mdiv7*12)){return 12;}//Sol5}
 4e0:	34 03 06 d7 	mvi r3,1751
 4e4:	34 02 00 0c 	mvi r2,12
 4e8:	50 61 00 08 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*12) && dist<(mdiv7*13)){return 13;}//La5}
 4ec:	34 03 07 69 	mvi r3,1897
 4f0:	34 02 00 0d 	mvi r2,13
 4f4:	50 61 00 05 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*13) && dist<(mdiv7*14)){return 14;}//Si5}
 4f8:	34 02 07 fb 	mvi r2,2043
                else {return 0;}
 4fc:	f0 41 08 00 	cmpgeu r1,r2,r1
 500:	c8 01 10 00 	sub r2,r0,r1
 504:	20 42 00 0e 	andi r2,r2,0xe
        }
}
 508:	b8 40 08 00 	mv r1,r2
 50c:	c3 a0 00 00 	ret
{
    uint16_t mdiv7;
    if(mode==1)
        {
            mdiv7=872; //(4000/7)
                if(dist>=300 && dist<(mdiv7)){return 1;}//Do4}
 510:	34 02 01 2b 	mvi r2,299
 514:	54 22 00 07 	bgu r1,r2,530 <sel_nota+0xf4>
                else if(dist>=mdiv7 && dist<(mdiv7*2)){return 2;}//Re4}
 518:	34 03 00 67 	mvi r3,103
                else if(dist>=(mdiv7*2) && dist<(mdiv7*3)){return 3;}//Mi4}
                else if(dist>=(mdiv7*3) && dist<(mdiv7*4)){return 4;}//Fa4}
                else if(dist>=(mdiv7*4) && dist<(mdiv7*5)){return 5;}//Sol4}
                else if(dist>=(mdiv7*5) && dist<(mdiv7*6)){return 6;}//La4}
                else if(dist>=(mdiv7*6) && dist<(mdiv7*7)){return 7;}//Si4}
                else {return 0;}
 51c:	34 02 00 00 	mvi r2,0
    uint16_t mdiv7;
    if(mode==1)
        {
            mdiv7=872; //(4000/7)
                if(dist>=300 && dist<(mdiv7)){return 1;}//Do4}
                else if(dist>=mdiv7 && dist<(mdiv7*2)){return 2;}//Re4}
 520:	50 61 ff fa 	bgeu r3,r1,508 <sel_nota+0xcc>
 524:	34 03 00 cf 	mvi r3,207
 528:	34 02 00 02 	mvi r2,2
 52c:	50 61 ff f7 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*2) && dist<(mdiv7*3)){return 3;}//Mi4}
 530:	34 03 01 37 	mvi r3,311
 534:	34 02 00 03 	mvi r2,3
 538:	50 61 ff f4 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*3) && dist<(mdiv7*4)){return 4;}//Fa4}
 53c:	34 03 01 9f 	mvi r3,415
 540:	34 02 00 04 	mvi r2,4
 544:	50 61 ff f1 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*4) && dist<(mdiv7*5)){return 5;}//Sol4}
 548:	34 03 02 07 	mvi r3,519
 54c:	34 02 00 05 	mvi r2,5
 550:	50 61 ff ee 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*5) && dist<(mdiv7*6)){return 6;}//La4}
 554:	34 03 02 6f 	mvi r3,623
 558:	34 02 00 06 	mvi r2,6
 55c:	50 61 ff eb 	bgeu r3,r1,508 <sel_nota+0xcc>
                else if(dist>=(mdiv7*6) && dist<(mdiv7*7)){return 7;}//Si4}
 560:	34 02 02 d7 	mvi r2,727
                else {return 0;}
 564:	f0 41 10 00 	cmpgeu r2,r2,r1
 568:	c8 02 10 00 	sub r2,r0,r2
 56c:	20 42 00 07 	andi r2,r2,0x7
 570:	e3 ff ff e6 	bi 508 <sel_nota+0xcc>

00000574 <t_muestra>:
                else {return 0;}
        }
}

uint16_t t_muestra(uint8_t nota)
{
 574:	20 21 00 ff 	andi r1,r1,0xff
    uint16_t T1=20987;
    uint16_t T2=20741;
    uint16_t T3=20495;

        if(nota==0){return 0;}
 578:	44 20 00 20 	be r1,r0,5f8 <t_muestra+0x84>
        else if(nota==1){return T1;}
 57c:	34 02 00 01 	mvi r2,1
 580:	44 22 00 1c 	be r1,r2,5f0 <t_muestra+0x7c>
        else if(nota==2){return T1;}
 584:	34 02 00 02 	mvi r2,2
 588:	44 22 00 1a 	be r1,r2,5f0 <t_muestra+0x7c>
        else if(nota==3){return T2;}
 58c:	34 02 00 03 	mvi r2,3
 590:	44 22 00 1c 	be r1,r2,600 <t_muestra+0x8c>
        else if(nota==4){return T2;}
 594:	34 02 00 04 	mvi r2,4
 598:	44 22 00 1a 	be r1,r2,600 <t_muestra+0x8c>
        else if(nota==5){return T2;}
 59c:	34 02 00 05 	mvi r2,5
 5a0:	44 22 00 18 	be r1,r2,600 <t_muestra+0x8c>
        else if(nota==6){return T3;}
 5a4:	34 02 00 06 	mvi r2,6
 5a8:	44 22 00 18 	be r1,r2,608 <t_muestra+0x94>
        else if(nota==7){return T3;}
 5ac:	34 02 00 07 	mvi r2,7
 5b0:	44 22 00 16 	be r1,r2,608 <t_muestra+0x94>
        else if(nota==8){return T1;}
 5b4:	34 02 00 08 	mvi r2,8
 5b8:	44 22 00 0e 	be r1,r2,5f0 <t_muestra+0x7c>
        else if(nota==9){return T1;}
 5bc:	34 02 00 09 	mvi r2,9
 5c0:	44 22 00 0c 	be r1,r2,5f0 <t_muestra+0x7c>
        else if(nota==10){return T2;}
 5c4:	34 02 00 0a 	mvi r2,10
 5c8:	44 22 00 0e 	be r1,r2,600 <t_muestra+0x8c>
        else if(nota==11){return T2;}
 5cc:	34 02 00 0b 	mvi r2,11
 5d0:	44 22 00 0c 	be r1,r2,600 <t_muestra+0x8c>
        else if(nota==12){return T2;}
 5d4:	34 02 00 0c 	mvi r2,12
 5d8:	44 22 00 0a 	be r1,r2,600 <t_muestra+0x8c>
        else if(nota==13){return T3;}
 5dc:	34 02 00 0d 	mvi r2,13
 5e0:	44 22 00 0a 	be r1,r2,608 <t_muestra+0x94>
        else if(nota==14){return T3;}
 5e4:	34 02 00 0e 	mvi r2,14
 5e8:	44 22 00 0a 	be r1,r2,610 <t_muestra+0x9c>
 5ec:	c3 a0 00 00 	ret
        else if(nota==4){return T2;}
        else if(nota==5){return T2;}
        else if(nota==6){return T3;}
        else if(nota==7){return T3;}
        else if(nota==8){return T1;}
        else if(nota==9){return T1;}
 5f0:	34 01 00 fb 	mvi r1,251
 5f4:	c3 a0 00 00 	ret
{
    uint16_t T1=20987;
    uint16_t T2=20741;
    uint16_t T3=20495;

        if(nota==0){return 0;}
 5f8:	34 01 00 00 	mvi r1,0
 5fc:	c3 a0 00 00 	ret
        else if(nota==7){return T3;}
        else if(nota==8){return T1;}
        else if(nota==9){return T1;}
        else if(nota==10){return T2;}
        else if(nota==11){return T2;}
        else if(nota==12){return T2;}
 600:	34 01 00 05 	mvi r1,5
 604:	c3 a0 00 00 	ret
        else if(nota==13){return T3;}
 608:	34 01 00 0f 	mvi r1,15
 60c:	c3 a0 00 00 	ret
        else if(nota==14){return T3;}
 610:	34 01 00 0f 	mvi r1,15
}
 614:	c3 a0 00 00 	ret

00000618 <n_muestra>:

uint8_t n_muestra(uint8_t nota)
{
 618:	20 21 00 ff 	andi r1,r1,0xff
        if(nota==0){return 0;}
 61c:	44 20 00 1e 	be r1,r0,694 <n_muestra+0x7c>
        else if(nota==1){return 180;}
 620:	34 02 00 01 	mvi r2,1
 624:	44 22 00 1e 	be r1,r2,69c <n_muestra+0x84>
        else if(nota==2){return 162;}
 628:	34 02 00 02 	mvi r2,2
 62c:	44 22 00 1e 	be r1,r2,6a4 <n_muestra+0x8c>
        else if(nota==3){return 144;}
 630:	34 02 00 03 	mvi r2,3
 634:	44 22 00 1e 	be r1,r2,6ac <n_muestra+0x94>
        else if(nota==4){return 138;}
 638:	34 02 00 04 	mvi r2,4
 63c:	44 22 00 1e 	be r1,r2,6b4 <n_muestra+0x9c>
        else if(nota==5){return 124;}
 640:	34 02 00 05 	mvi r2,5
 644:	44 22 00 1e 	be r1,r2,6bc <n_muestra+0xa4>
        else if(nota==6){return 112;}
 648:	34 02 00 06 	mvi r2,6
 64c:	44 22 00 1e 	be r1,r2,6c4 <n_muestra+0xac>
        else if(nota==7){return 100;}
 650:	34 02 00 07 	mvi r2,7
 654:	44 22 00 20 	be r1,r2,6d4 <n_muestra+0xbc>
        else if(nota==8){return 90;}
 658:	34 02 00 08 	mvi r2,8
 65c:	44 22 00 20 	be r1,r2,6dc <n_muestra+0xc4>
        else if(nota==9){return 81;}
 660:	34 02 00 09 	mvi r2,9
 664:	44 22 00 20 	be r1,r2,6e4 <n_muestra+0xcc>
        else if(nota==10){return 72;}
 668:	34 02 00 0a 	mvi r2,10
 66c:	44 22 00 20 	be r1,r2,6ec <n_muestra+0xd4>
        else if(nota==11){return 69;}
 670:	34 02 00 0b 	mvi r2,11
 674:	44 22 00 20 	be r1,r2,6f4 <n_muestra+0xdc>
        else if(nota==12){return 62;}
 678:	34 02 00 0c 	mvi r2,12
 67c:	44 22 00 14 	be r1,r2,6cc <n_muestra+0xb4>
        else if(nota==13){return 56;}
 680:	34 02 00 0d 	mvi r2,13
 684:	44 22 00 1e 	be r1,r2,6fc <n_muestra+0xe4>
        else if(nota==14){return 50;}
 688:	34 02 00 0e 	mvi r2,14
 68c:	44 22 00 1e 	be r1,r2,704 <n_muestra+0xec>
 690:	c3 a0 00 00 	ret
        else if(nota==14){return T3;}
}

uint8_t n_muestra(uint8_t nota)
{
        if(nota==0){return 0;}
 694:	34 01 00 00 	mvi r1,0
 698:	c3 a0 00 00 	ret
        else if(nota==1){return 180;}
 69c:	34 01 00 b4 	mvi r1,180
 6a0:	c3 a0 00 00 	ret
        else if(nota==2){return 162;}
 6a4:	34 01 00 a2 	mvi r1,162
 6a8:	c3 a0 00 00 	ret
        else if(nota==3){return 144;}
 6ac:	34 01 00 90 	mvi r1,144
 6b0:	c3 a0 00 00 	ret
        else if(nota==4){return 138;}
 6b4:	34 01 00 8a 	mvi r1,138
 6b8:	c3 a0 00 00 	ret
        else if(nota==5){return 124;}
 6bc:	34 01 00 7c 	mvi r1,124
 6c0:	c3 a0 00 00 	ret
        else if(nota==6){return 112;}
 6c4:	34 01 00 70 	mvi r1,112
 6c8:	c3 a0 00 00 	ret
        else if(nota==7){return 100;}
        else if(nota==8){return 90;}
        else if(nota==9){return 81;}
        else if(nota==10){return 72;}
        else if(nota==11){return 69;}
        else if(nota==12){return 62;}
 6cc:	34 01 00 3e 	mvi r1,62
 6d0:	c3 a0 00 00 	ret
        else if(nota==2){return 162;}
        else if(nota==3){return 144;}
        else if(nota==4){return 138;}
        else if(nota==5){return 124;}
        else if(nota==6){return 112;}
        else if(nota==7){return 100;}
 6d4:	34 01 00 64 	mvi r1,100
 6d8:	c3 a0 00 00 	ret
        else if(nota==8){return 90;}
 6dc:	34 01 00 5a 	mvi r1,90
 6e0:	c3 a0 00 00 	ret
        else if(nota==9){return 81;}
 6e4:	34 01 00 51 	mvi r1,81
 6e8:	c3 a0 00 00 	ret
        else if(nota==10){return 72;}
 6ec:	34 01 00 48 	mvi r1,72
 6f0:	c3 a0 00 00 	ret
        else if(nota==11){return 69;}
 6f4:	34 01 00 45 	mvi r1,69
 6f8:	c3 a0 00 00 	ret
        else if(nota==12){return 62;}
        else if(nota==13){return 56;}
 6fc:	34 01 00 38 	mvi r1,56
 700:	c3 a0 00 00 	ret
        else if(nota==14){return 50;}
 704:	34 01 00 32 	mvi r1,50
}
 708:	c3 a0 00 00 	ret

0000070c <step>:

uint16_t step(uint8_t nota) // =t/n muestra
{
 70c:	20 21 00 ff 	andi r1,r1,0xff
        if(nota==0){return 0;}
 710:	44 20 00 1e 	be r1,r0,788 <step+0x7c>
        else if(nota==1){return 118;}
 714:	34 02 00 01 	mvi r2,1
 718:	44 22 00 1e 	be r1,r2,790 <step+0x84>
        else if(nota==2){return 130;}
 71c:	34 02 00 02 	mvi r2,2
 720:	44 22 00 1e 	be r1,r2,798 <step+0x8c>
        else if(nota==3){return 146;}
 724:	34 02 00 03 	mvi r2,3
 728:	44 22 00 1e 	be r1,r2,7a0 <step+0x94>
        else if(nota==4){return 150;}
 72c:	34 02 00 04 	mvi r2,4
 730:	44 22 00 1e 	be r1,r2,7a8 <step+0x9c>
        else if(nota==5){return 166;}
 734:	34 02 00 05 	mvi r2,5
 738:	44 22 00 1e 	be r1,r2,7b0 <step+0xa4>
        else if(nota==6){return 181;}
 73c:	34 02 00 06 	mvi r2,6
 740:	44 22 00 1e 	be r1,r2,7b8 <step+0xac>
        else if(nota==7){return 202;}
 744:	34 02 00 07 	mvi r2,7
 748:	44 22 00 20 	be r1,r2,7c8 <step+0xbc>
        else if(nota==8){return 236;}
 74c:	34 02 00 08 	mvi r2,8
 750:	44 22 00 20 	be r1,r2,7d0 <step+0xc4>
        else if(nota==9){return 260;}
 754:	34 02 00 09 	mvi r2,9
 758:	44 22 00 20 	be r1,r2,7d8 <step+0xcc>
        else if(nota==10){return 293;}
 75c:	34 02 00 0a 	mvi r2,10
 760:	44 22 00 20 	be r1,r2,7e0 <step+0xd4>
        else if(nota==11){return 301;}
 764:	34 02 00 0b 	mvi r2,11
 768:	44 22 00 20 	be r1,r2,7e8 <step+0xdc>
        else if(nota==12){return 332;}
 76c:	34 02 00 0c 	mvi r2,12
 770:	44 22 00 14 	be r1,r2,7c0 <step+0xb4>
        else if(nota==13){return 362;}
 774:	34 02 00 0d 	mvi r2,13
 778:	44 22 00 1e 	be r1,r2,7f0 <step+0xe4>
        else if(nota==14){return 405;}
 77c:	34 02 00 0e 	mvi r2,14
 780:	44 22 00 1e 	be r1,r2,7f8 <step+0xec>
 784:	c3 a0 00 00 	ret
        else if(nota==14){return 50;}
}

uint16_t step(uint8_t nota) // =t/n muestra
{
        if(nota==0){return 0;}
 788:	34 01 00 00 	mvi r1,0
 78c:	c3 a0 00 00 	ret
        else if(nota==1){return 118;}
 790:	34 01 00 76 	mvi r1,118
 794:	c3 a0 00 00 	ret
        else if(nota==2){return 130;}
 798:	34 01 00 82 	mvi r1,130
 79c:	c3 a0 00 00 	ret
        else if(nota==3){return 146;}
 7a0:	34 01 00 92 	mvi r1,146
 7a4:	c3 a0 00 00 	ret
        else if(nota==4){return 150;}
 7a8:	34 01 00 96 	mvi r1,150
 7ac:	c3 a0 00 00 	ret
        else if(nota==5){return 166;}
 7b0:	34 01 00 a6 	mvi r1,166
 7b4:	c3 a0 00 00 	ret
        else if(nota==6){return 181;}
 7b8:	34 01 00 b5 	mvi r1,181
 7bc:	c3 a0 00 00 	ret
        else if(nota==7){return 202;}
        else if(nota==8){return 236;}
        else if(nota==9){return 260;}
        else if(nota==10){return 293;}
        else if(nota==11){return 301;}
        else if(nota==12){return 332;}
 7c0:	34 01 00 4c 	mvi r1,76
 7c4:	c3 a0 00 00 	ret
        else if(nota==2){return 130;}
        else if(nota==3){return 146;}
        else if(nota==4){return 150;}
        else if(nota==5){return 166;}
        else if(nota==6){return 181;}
        else if(nota==7){return 202;}
 7c8:	34 01 00 ca 	mvi r1,202
 7cc:	c3 a0 00 00 	ret
        else if(nota==8){return 236;}
 7d0:	34 01 00 ec 	mvi r1,236
 7d4:	c3 a0 00 00 	ret
        else if(nota==9){return 260;}
 7d8:	34 01 00 04 	mvi r1,4
 7dc:	c3 a0 00 00 	ret
        else if(nota==10){return 293;}
 7e0:	34 01 00 25 	mvi r1,37
 7e4:	c3 a0 00 00 	ret
        else if(nota==11){return 301;}
 7e8:	34 01 00 2d 	mvi r1,45
 7ec:	c3 a0 00 00 	ret
        else if(nota==12){return 332;}
        else if(nota==13){return 362;}
 7f0:	34 01 00 6a 	mvi r1,106
 7f4:	c3 a0 00 00 	ret
        else if(nota==14){return 405;}
 7f8:	34 01 00 95 	mvi r1,149
}
 7fc:	c3 a0 00 00 	ret

00000800 <time_for>:

uint8_t time_for(uint8_t nota) //
{
 800:	20 21 00 ff 	andi r1,r1,0xff
        if(nota==0){return 0;}
 804:	44 20 00 1e 	be r1,r0,87c <time_for+0x7c>
        else if(nota==1){return 63;}
 808:	34 02 00 01 	mvi r2,1
 80c:	44 22 00 1e 	be r1,r2,884 <time_for+0x84>
        else if(nota==2){return 81;}
 810:	34 02 00 02 	mvi r2,2
 814:	44 22 00 1e 	be r1,r2,88c <time_for+0x8c>
        else if(nota==3){return 99;}
 818:	34 02 00 03 	mvi r2,3
 81c:	44 22 00 1e 	be r1,r2,894 <time_for+0x94>
        else if(nota==4){return 105;}
 820:	34 02 00 04 	mvi r2,4
 824:	44 22 00 1e 	be r1,r2,89c <time_for+0x9c>
        else if(nota==5){return 119;}
 828:	34 02 00 05 	mvi r2,5
 82c:	44 22 00 1e 	be r1,r2,8a4 <time_for+0xa4>
        else if(nota==6){return 131;}
 830:	34 02 00 06 	mvi r2,6
 834:	44 22 00 1e 	be r1,r2,8ac <time_for+0xac>
        else if(nota==7){return 143;}
 838:	34 02 00 07 	mvi r2,7
 83c:	44 22 00 20 	be r1,r2,8bc <time_for+0xbc>
        else if(nota==8){return 153;}
 840:	34 02 00 08 	mvi r2,8
 844:	44 22 00 20 	be r1,r2,8c4 <time_for+0xc4>
        else if(nota==9){return 162;}
 848:	34 02 00 09 	mvi r2,9
 84c:	44 22 00 20 	be r1,r2,8cc <time_for+0xcc>
        else if(nota==10){return 171;}
 850:	34 02 00 0a 	mvi r2,10
 854:	44 22 00 20 	be r1,r2,8d4 <time_for+0xd4>
        else if(nota==11){return 174;}
 858:	34 02 00 0b 	mvi r2,11
 85c:	44 22 00 20 	be r1,r2,8dc <time_for+0xdc>
        else if(nota==12){return 181;}
 860:	34 02 00 0c 	mvi r2,12
 864:	44 22 00 14 	be r1,r2,8b4 <time_for+0xb4>
        else if(nota==13){return 187;}
 868:	34 02 00 0d 	mvi r2,13
 86c:	44 22 00 1e 	be r1,r2,8e4 <time_for+0xe4>
        else if(nota==14){return 193;}
 870:	34 02 00 0e 	mvi r2,14
 874:	44 22 00 1e 	be r1,r2,8ec <time_for+0xec>
 878:	c3 a0 00 00 	ret
        else if(nota==14){return 405;}
}

uint8_t time_for(uint8_t nota) //
{
        if(nota==0){return 0;}
 87c:	34 01 00 00 	mvi r1,0
 880:	c3 a0 00 00 	ret
        else if(nota==1){return 63;}
 884:	34 01 00 3f 	mvi r1,63
 888:	c3 a0 00 00 	ret
        else if(nota==2){return 81;}
 88c:	34 01 00 51 	mvi r1,81
 890:	c3 a0 00 00 	ret
        else if(nota==3){return 99;}
 894:	34 01 00 63 	mvi r1,99
 898:	c3 a0 00 00 	ret
        else if(nota==4){return 105;}
 89c:	34 01 00 69 	mvi r1,105
 8a0:	c3 a0 00 00 	ret
        else if(nota==5){return 119;}
 8a4:	34 01 00 77 	mvi r1,119
 8a8:	c3 a0 00 00 	ret
        else if(nota==6){return 131;}
 8ac:	34 01 00 83 	mvi r1,131
 8b0:	c3 a0 00 00 	ret
        else if(nota==7){return 143;}
        else if(nota==8){return 153;}
        else if(nota==9){return 162;}
        else if(nota==10){return 171;}
        else if(nota==11){return 174;}
        else if(nota==12){return 181;}
 8b4:	34 01 00 b5 	mvi r1,181
 8b8:	c3 a0 00 00 	ret
        else if(nota==2){return 81;}
        else if(nota==3){return 99;}
        else if(nota==4){return 105;}
        else if(nota==5){return 119;}
        else if(nota==6){return 131;}
        else if(nota==7){return 143;}
 8bc:	34 01 00 8f 	mvi r1,143
 8c0:	c3 a0 00 00 	ret
        else if(nota==8){return 153;}
 8c4:	34 01 00 99 	mvi r1,153
 8c8:	c3 a0 00 00 	ret
        else if(nota==9){return 162;}
 8cc:	34 01 00 a2 	mvi r1,162
 8d0:	c3 a0 00 00 	ret
        else if(nota==10){return 171;}
 8d4:	34 01 00 ab 	mvi r1,171
 8d8:	c3 a0 00 00 	ret
        else if(nota==11){return 174;}
 8dc:	34 01 00 ae 	mvi r1,174
 8e0:	c3 a0 00 00 	ret
        else if(nota==12){return 181;}
        else if(nota==13){return 187;}
 8e4:	34 01 00 bb 	mvi r1,187
 8e8:	c3 a0 00 00 	ret
        else if(nota==14){return 193;}
 8ec:	34 01 00 c1 	mvi r1,193
}
 8f0:	c3 a0 00 00 	ret

000008f4 <play_note>:

void play_note(uint8_t n_mt, uint16_t sp, uint16_t t_mt, uint8_t t_f) //mt := muestra ....
{
 8f4:	37 9c ff e0 	addi sp,sp,-32
 8f8:	5b 8b 00 20 	sw (sp+32),r11
 8fc:	5b 8c 00 1c 	sw (sp+28),r12
 900:	5b 8d 00 18 	sw (sp+24),r13
 904:	5b 8e 00 14 	sw (sp+20),r14
 908:	5b 8f 00 10 	sw (sp+16),r15
 90c:	5b 90 00 0c 	sw (sp+12),r16
 910:	5b 91 00 08 	sw (sp+8),r17
 914:	5b 9d 00 04 	sw (sp+4),ra
 918:	20 21 00 ff 	andi r1,r1,0xff
 91c:	20 91 00 ff 	andi r17,r4,0xff
 920:	20 4e 00 ff 	andi r14,r2,0xff
 924:	20 6f 00 ff 	andi r15,r3,0xff
    uint8_t i;
    uint16_t j;
    for (i=0; i<t_f ;i++)
 928:	34 2d 00 4b 	addi r13,r1,75
 92c:	34 10 00 00 	mvi r16,0
 930:	46 20 00 16 	be r17,r0,988 <play_note+0x94>
	    {
	        for (j=75; j<(n_mt+76); j++)			//recorre cada una de las muestras (b1 tercera octava)
 934:	34 0c 00 4b 	mvi r12,75
 938:	34 0b 00 4b 	mvi r11,75
                {
                set_pin(1,1);			                    //se asigna el ciclo util por tiempo
   	            nsleep(j*sp);
 93c:	89 8e 60 00 	mul r12,r12,r14
    uint16_t j;
    for (i=0; i<t_f ;i++)
	    {
	        for (j=75; j<(n_mt+76); j++)			//recorre cada una de las muestras (b1 tercera octava)
                {
                set_pin(1,1);			                    //se asigna el ciclo util por tiempo
 940:	34 02 00 01 	mvi r2,1
 944:	34 01 00 01 	mvi r1,1
 948:	f8 00 00 84 	calli b58 <set_pin>
   	            nsleep(j*sp);
 94c:	b9 80 08 00 	mv r1,r12
 950:	f8 00 00 b4 	calli c20 <nsleep>
	            set_pin(0,1);
 954:	34 01 00 00 	mvi r1,0
 958:	34 02 00 01 	mvi r2,1
 95c:	f8 00 00 7f 	calli b58 <set_pin>
{
    uint8_t i;
    uint16_t j;
    for (i=0; i<t_f ;i++)
	    {
	        for (j=75; j<(n_mt+76); j++)			//recorre cada una de las muestras (b1 tercera octava)
 960:	35 6b 00 01 	addi r11,r11,1
                {
                set_pin(1,1);			                    //se asigna el ciclo util por tiempo
   	            nsleep(j*sp);
	            set_pin(0,1);
	            nsleep(t_mt-(j*sp));
 964:	c9 ec 08 00 	sub r1,r15,r12
{
    uint8_t i;
    uint16_t j;
    for (i=0; i<t_f ;i++)
	    {
	        for (j=75; j<(n_mt+76); j++)			//recorre cada una de las muestras (b1 tercera octava)
 968:	21 6b 00 ff 	andi r11,r11,0xff
                {
                set_pin(1,1);			                    //se asigna el ciclo util por tiempo
   	            nsleep(j*sp);
	            set_pin(0,1);
	            nsleep(t_mt-(j*sp));
 96c:	f8 00 00 ad 	calli c20 <nsleep>
{
    uint8_t i;
    uint16_t j;
    for (i=0; i<t_f ;i++)
	    {
	        for (j=75; j<(n_mt+76); j++)			//recorre cada una de las muestras (b1 tercera octava)
 970:	b9 60 60 00 	mv r12,r11
 974:	4d ab ff f2 	bge r13,r11,93c <play_note+0x48>

void play_note(uint8_t n_mt, uint16_t sp, uint16_t t_mt, uint8_t t_f) //mt := muestra ....
{
    uint8_t i;
    uint16_t j;
    for (i=0; i<t_f ;i++)
 978:	36 10 00 01 	addi r16,r16,1
 97c:	22 10 00 ff 	andi r16,r16,0xff
 980:	52 11 00 02 	bgeu r16,r17,988 <play_note+0x94>
 984:	e3 ff ff ec 	bi 934 <play_note+0x40>
   	            nsleep(j*sp);
	            set_pin(0,1);
	            nsleep(t_mt-(j*sp));
                }
        }
}
 988:	2b 9d 00 04 	lw ra,(sp+4)
 98c:	2b 8b 00 20 	lw r11,(sp+32)
 990:	2b 8c 00 1c 	lw r12,(sp+28)
 994:	2b 8d 00 18 	lw r13,(sp+24)
 998:	2b 8e 00 14 	lw r14,(sp+20)
 99c:	2b 8f 00 10 	lw r15,(sp+16)
 9a0:	2b 90 00 0c 	lw r16,(sp+12)
 9a4:	2b 91 00 08 	lw r17,(sp+8)
 9a8:	37 9c 00 20 	addi sp,sp,32
 9ac:	c3 a0 00 00 	ret

000009b0 <main>:
//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
{
 9b0:	37 9c ff fc 	addi sp,sp,-4
 9b4:	5b 9d 00 04 	sw (sp+4),ra
    mod=1;//Modo si mod=1 una octava, si mod=2 2octavas.
    m=&mod;

//Inicializacion de perifericos

gpio_init(0x00000007); //9BITS  6 ENTRADAS(BOTONES) 3 SALIDAS(2 LEDS Y PWM) PIN1:PWM - PIN2:MODO - PIN3: LEDBLANCO
 9b8:	34 01 00 07 	mvi r1,7
 9bc:	f8 00 00 58 	calli b1c <gpio_init>
trigger_set0(pitch); // 10us a 50 ms
 9c0:	34 01 00 02 	mvi r1,2
 9c4:	f8 00 00 b4 	calli c94 <trigger_set0>
trigger_set1(pitch); // 10us a 50 ms
 9c8:	34 01 00 02 	mvi r1,2
 9cc:	f8 00 00 bc 	calli cbc <trigger_set1>
set_digpot(0x64); //0  Ohms
 9d0:	34 01 00 64 	mvi r1,100
 9d4:	f8 00 00 c4 	calli ce4 <set_digpot>
va=0; //Volumen actual

for(;;)
{
		set_pin(1,3);
 9d8:	34 02 00 03 	mvi r2,3
 9dc:	34 01 00 01 	mvi r1,1
 9e0:	f8 00 00 5e 	calli b58 <set_pin>
		msleep(1000);
 9e4:	34 01 03 e8 	mvi r1,1000
 9e8:	f8 00 00 7f 	calli be4 <msleep>
		set_pin(0,3);
 9ec:	34 02 00 03 	mvi r2,3
 9f0:	34 01 00 00 	mvi r1,0
 9f4:	f8 00 00 59 	calli b58 <set_pin>
		msleep(1000);
 9f8:	34 01 03 e8 	mvi r1,1000
 9fc:	f8 00 00 7a 	calli be4 <msleep>
		set_pin(1,2);
 a00:	34 02 00 02 	mvi r2,2
 a04:	34 01 00 01 	mvi r1,1
 a08:	f8 00 00 54 	calli b58 <set_pin>
		msleep(1000);
 a0c:	34 01 03 e8 	mvi r1,1000
 a10:	f8 00 00 75 	calli be4 <msleep>
		set_pin(0,2);
 a14:	34 01 00 00 	mvi r1,0
 a18:	34 02 00 02 	mvi r2,2
 a1c:	f8 00 00 4f 	calli b58 <set_pin>
		msleep(1000);
 a20:	34 01 03 e8 	mvi r1,1000
 a24:	f8 00 00 70 	calli be4 <msleep>
 a28:	e3 ff ff ec 	bi 9d8 <main+0x28>

00000a2c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 a2c:	c3 a0 00 00 	ret

00000a30 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 a30:	78 01 00 00 	mvhi r1,0x0
 a34:	38 21 0d 90 	ori r1,r1,0xd90
 a38:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 a3c:	78 02 00 00 	mvhi r2,0x0
 a40:	38 42 0c fc 	ori r2,r2,0xcfc
 a44:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 a48:	34 63 00 01 	addi r3,r3,1
 a4c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 a50:	34 01 00 0e 	mvi r1,14
 a54:	58 41 00 00 	sw (r2+0),r1
}
 a58:	c3 a0 00 00 	ret

00000a5c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 a5c:	37 9c ff f0 	addi sp,sp,-16
 a60:	5b 8b 00 10 	sw (sp+16),r11
 a64:	5b 8c 00 0c 	sw (sp+12),r12
 a68:	5b 8d 00 08 	sw (sp+8),r13
 a6c:	5b 9d 00 04 	sw (sp+4),ra
 a70:	78 0b 00 00 	mvhi r11,0x0
 a74:	39 6b 0d 10 	ori r11,r11,0xd10
 a78:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 a7c:	35 6d 00 80 	addi r13,r11,128
 a80:	e0 00 00 04 	bi a90 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 a84:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 a88:	45 6d 00 08 	be r11,r13,aa8 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 a8c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 a90:	21 81 00 01 	andi r1,r12,0x1
 a94:	44 20 ff fc 	be r1,r0,a84 <irq_handler+0x28>
 a98:	29 61 00 00 	lw r1,(r11+0)
 a9c:	35 6b 00 04 	addi r11,r11,4
 aa0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 aa4:	5d 6d ff fa 	bne r11,r13,a8c <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 aa8:	2b 9d 00 04 	lw ra,(sp+4)
 aac:	2b 8b 00 10 	lw r11,(sp+16)
 ab0:	2b 8c 00 0c 	lw r12,(sp+12)
 ab4:	2b 8d 00 08 	lw r13,(sp+8)
 ab8:	37 9c 00 10 	addi sp,sp,16
 abc:	c3 a0 00 00 	ret

00000ac0 <isr_init>:

void isr_init()
{
 ac0:	78 01 00 00 	mvhi r1,0x0
 ac4:	78 02 00 00 	mvhi r2,0x0
 ac8:	38 21 0d 10 	ori r1,r1,0xd10
 acc:	38 42 0a 2c 	ori r2,r2,0xa2c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 ad0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 ad4:	58 22 00 00 	sw (r1+0),r2
 ad8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 adc:	5c 23 ff fe 	bne r1,r3,ad4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 ae0:	c3 a0 00 00 	ret

00000ae4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 ae4:	78 03 00 00 	mvhi r3,0x0
 ae8:	3c 21 00 02 	sli r1,r1,2
 aec:	38 63 0d 10 	ori r3,r3,0xd10
 af0:	b4 61 18 00 	add r3,r3,r1
 af4:	58 62 00 00 	sw (r3+0),r2
}
 af8:	c3 a0 00 00 	ret

00000afc <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 afc:	78 03 00 00 	mvhi r3,0x0
 b00:	3c 21 00 02 	sli r1,r1,2
 b04:	38 63 0d 10 	ori r3,r3,0xd10
 b08:	78 02 00 00 	mvhi r2,0x0
 b0c:	b4 61 18 00 	add r3,r3,r1
 b10:	38 42 0a 2c 	ori r2,r2,0xa2c
 b14:	58 62 00 00 	sw (r3+0),r2
}
 b18:	c3 a0 00 00 	ret

00000b1c <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura, 1 es puerto escritura o salida
 b1c:	78 02 00 00 	mvhi r2,0x0
 b20:	38 42 0d 00 	ori r2,r2,0xd00
 b24:	28 42 00 00 	lw r2,(r2+0)
 b28:	58 41 00 08 	sw (r2+8),r1
}
 b2c:	c3 a0 00 00 	ret

00000b30 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 b30:	78 01 00 00 	mvhi r1,0x0
 b34:	38 21 0d 00 	ori r1,r1,0xd00
 b38:	28 21 00 00 	lw r1,(r1+0)
 b3c:	28 21 00 00 	lw r1,(r1+0)
}
 b40:	c3 a0 00 00 	ret

00000b44 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 b44:	78 02 00 00 	mvhi r2,0x0
 b48:	38 42 0d 00 	ori r2,r2,0xd00
 b4c:	28 42 00 00 	lw r2,(r2+0)
 b50:	58 41 00 04 	sw (r2+4),r1
}
 b54:	c3 a0 00 00 	ret

00000b58 <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 b58:	20 21 00 ff 	andi r1,r1,0xff
 b5c:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 b60:	5c 20 00 09 	bne r1,r0,b84 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 b64:	78 01 00 00 	mvhi r1,0x0
 b68:	38 21 0d 00 	ori r1,r1,0xd00
 b6c:	28 21 00 00 	lw r1,(r1+0)
 b70:	a4 40 10 00 	not r2,r2
 b74:	28 23 00 00 	lw r3,(r1+0)
 b78:	a0 43 10 00 	and r2,r2,r3
 b7c:	58 22 00 04 	sw (r1+4),r2
 b80:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 b84:	78 01 00 00 	mvhi r1,0x0
 b88:	38 21 0d 00 	ori r1,r1,0xd00
 b8c:	28 21 00 00 	lw r1,(r1+0)
 b90:	28 23 00 00 	lw r3,(r1+0)
 b94:	b8 43 10 00 	or r2,r2,r3
 b98:	58 22 00 04 	sw (r1+4),r2
 b9c:	c3 a0 00 00 	ret

00000ba0 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 ba0:	78 02 00 00 	mvhi r2,0x0
 ba4:	38 42 0d 00 	ori r2,r2,0xd00
 ba8:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 bac:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 bb0:	28 43 00 00 	lw r3,(r2+0)
 bb4:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 bb8:	a0 23 18 00 	and r3,r1,r3
 bbc:	5c 60 00 06 	bne r3,r0,bd4 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 bc0:	28 43 00 00 	lw r3,(r2+0)
 bc4:	a4 20 08 00 	not r1,r1
 bc8:	a0 23 08 00 	and r1,r1,r3
 bcc:	58 41 00 04 	sw (r2+4),r1
 bd0:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 bd4:	28 43 00 00 	lw r3,(r2+0)
 bd8:	b8 23 08 00 	or r1,r1,r3
 bdc:	58 41 00 04 	sw (r2+4),r1
 be0:	c3 a0 00 00 	ret

00000be4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 be4:	78 04 00 00 	mvhi r4,0x0
 be8:	38 84 0c f8 	ori r4,r4,0xcf8
 bec:	28 83 00 00 	lw r3,(r4+0)
 bf0:	78 02 00 00 	mvhi r2,0x0
 bf4:	38 42 0c fc 	ori r2,r2,0xcfc
 bf8:	28 42 00 00 	lw r2,(r2+0)
 bfc:	88 23 08 00 	mul r1,r1,r3
 c00:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 c04:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 c08:	34 01 00 08 	mvi r1,8
 c0c:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 c10:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 c14:	20 21 00 01 	andi r1,r1,0x1
 c18:	44 20 ff fe 	be r1,r0,c10 <msleep+0x2c>
}
 c1c:	c3 a0 00 00 	ret

00000c20 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 c20:	78 02 00 00 	mvhi r2,0x0
 c24:	38 42 0c fc 	ori r2,r2,0xcfc
 c28:	28 42 00 00 	lw r2,(r2+0)
 c2c:	08 21 00 64 	muli r1,r1,100
 c30:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 c34:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 c38:	34 01 00 08 	mvi r1,8
 c3c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 c40:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 c44:	20 21 00 01 	andi r1,r1,0x1
 c48:	44 20 ff fe 	be r1,r0,c40 <nsleep+0x20>
}
 c4c:	c3 a0 00 00 	ret

00000c50 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 c50:	78 01 00 00 	mvhi r1,0x0
 c54:	38 21 0c fc 	ori r1,r1,0xcfc
 c58:	28 23 00 00 	lw r3,(r1+0)
 c5c:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 c60:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 c64:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 c68:	38 21 0d 90 	ori r1,r1,0xd90

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 c6c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 c70:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 c74:	78 02 00 00 	mvhi r2,0x0
 c78:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 c7c:	34 04 00 0e 	mvi r4,14
 c80:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 c84:	38 21 0d 10 	ori r1,r1,0xd10
 c88:	38 42 0a 30 	ori r2,r2,0xa30
 c8c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 c90:	c3 a0 00 00 	ret

00000c94 <trigger_set0>:
//***************************************************************************
// Estructura del periferico TRIGGER 0 
//***************************************************************************
void trigger_set0(uint32_t st)
{
    trigger0->set_trig = st;
 c94:	78 02 00 00 	mvhi r2,0x0
 c98:	38 42 0d 08 	ori r2,r2,0xd08
 c9c:	28 42 00 00 	lw r2,(r2+0)
 ca0:	58 41 00 00 	sw (r2+0),r1
}
 ca4:	c3 a0 00 00 	ret

00000ca8 <read_count0>:

uint32_t read_count0()
{
    return trigger0->c_out;
 ca8:	78 01 00 00 	mvhi r1,0x0
 cac:	38 21 0d 08 	ori r1,r1,0xd08
 cb0:	28 21 00 00 	lw r1,(r1+0)
 cb4:	28 21 00 04 	lw r1,(r1+4)
}
 cb8:	c3 a0 00 00 	ret

00000cbc <trigger_set1>:
//***************************************************************************
// Estructura del periferico TRIGGER 1
//***************************************************************************
void trigger_set1(uint32_t st)
{
    trigger1->set_trig = st;
 cbc:	78 02 00 00 	mvhi r2,0x0
 cc0:	38 42 0d 0c 	ori r2,r2,0xd0c
 cc4:	28 42 00 00 	lw r2,(r2+0)
 cc8:	58 41 00 00 	sw (r2+0),r1
}
 ccc:	c3 a0 00 00 	ret

00000cd0 <read_count1>:

uint32_t read_count1()
{
    return trigger1->c_out;
 cd0:	78 01 00 00 	mvhi r1,0x0
 cd4:	38 21 0d 0c 	ori r1,r1,0xd0c
 cd8:	28 21 00 00 	lw r1,(r1+0)
 cdc:	28 21 00 04 	lw r1,(r1+4)
}
 ce0:	c3 a0 00 00 	ret

00000ce4 <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 ce4:	78 02 00 00 	mvhi r2,0x0
 ce8:	38 42 0d 04 	ori r2,r2,0xd04
 cec:	28 42 00 00 	lw r2,(r2+0)
 cf0:	58 41 00 00 	sw (r2+0),r1

}
 cf4:	c3 a0 00 00 	ret
