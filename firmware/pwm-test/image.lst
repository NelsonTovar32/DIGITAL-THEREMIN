
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000a8c  00000a8c  00000ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000a90  00000a90  00000ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000aa4  00000aa4  00000af8  2**2
                  ALLOC
  4 .debug_abbrev 00000306  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008dd  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000070f  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000054a  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001bb  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000be  00000000  00000000  00002681  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000026b  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000029ea  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000029fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 c9 	calli 7f0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a b0 	ori gp,gp,0xab0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a a4 	ori r1,r1,0xaa4
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b 28 	ori r3,r3,0xb28

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 c0 	calli 43c <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <vsig_pot>:
//********************************************************************************************
// Funciones Volumen - Potenciometro
//********************************************************************************************

uint8_t vsig_pot(uint16_t tvol, uint8_t vm)
{
 208:	20 23 00 ff 	andi r3,r1,0xff
 20c:	20 41 00 ff 	andi r1,r2,0xff
    uint16_t tmax=4000; //4ms - 4000ns - 70 cms aprox
    uint16_t mdiv7=872; //Pent(tmax/7)
    if(tvol>=300 && tvol<(mdiv7)){if(vm==0){return 0;}else if(vm>0){return vm;}}
    else if(tvol>=mdiv7 && tvol<(mdiv7*2)){if(vm<=15){return 15;}else if(vm>15){return vm;}}
 210:	34 02 00 67 	mvi r2,103
 214:	50 43 00 0a 	bgeu r2,r3,23c <vsig_pot+0x34>
 218:	34 02 00 cf 	mvi r2,207
 21c:	48 62 00 05 	bg r3,r2,230 <vsig_pot+0x28>
 220:	34 02 00 0f 	mvi r2,15
 224:	50 22 00 06 	bgeu r1,r2,23c <vsig_pot+0x34>
 228:	34 01 00 0f 	mvi r1,15
 22c:	c3 a0 00 00 	ret
 230:	34 02 00 1e 	mvi r2,30
 234:	50 22 00 02 	bgeu r1,r2,23c <vsig_pot+0x34>
 238:	34 01 00 1e 	mvi r1,30
    else if(tvol>=(mdiv7*3) && tvol<(mdiv7*4)){if(vm<=45){return 45;}else if(vm>45){return vm;}}
    else if(tvol>=(mdiv7*4) && tvol<(mdiv7*5)){if(vm<=60){return 60;}else if(vm>60){return vm;}}
    else if(tvol>=(mdiv7*5) && tvol<(mdiv7*6)){if(vm<=75){return 75;}else if(vm>75){return vm;}}
    else if(tvol>=(mdiv7*6) && tvol<(mdiv7*7)){if(vm<=99){return 99;}else if(vm>99){return vm;}}
    else {return vm;}
}
 23c:	c3 a0 00 00 	ret

00000240 <volumen>:

void volumen(uint8_t va, uint8_t vs)
{
 240:	37 9c ff fc 	addi sp,sp,-4
 244:	5b 9d 00 04 	sw (sp+4),ra
 248:	20 21 00 ff 	andi r1,r1,0xff
 24c:	20 42 00 ff 	andi r2,r2,0xff
    int r1=va-vs;
 250:	c8 22 18 00 	sub r3,r1,r2
    int r2=vs-va;
    uint8_t set=0;

    if(r1<0)
 254:	4c 60 00 06 	bge r3,r0,26c <volumen+0x2c>
}

void volumen(uint8_t va, uint8_t vs)
{
    int r1=va-vs;
    int r2=vs-va;
 258:	c8 41 08 00 	sub r1,r2,r1
    uint8_t set=0;

    if(r1<0)
        {
            set=r2+128-1;
 25c:	34 21 00 7f 	addi r1,r1,127
            set_digpot(set);
 260:	20 21 00 ff 	andi r1,r1,0xff
 264:	f8 00 02 05 	calli a78 <set_digpot>
 268:	e0 00 00 05 	bi 27c <volumen+0x3c>
        }
    else if(r1>0)
 26c:	44 60 00 04 	be r3,r0,27c <volumen+0x3c>
        {
            set=r1-1;
 270:	34 61 ff ff 	addi r1,r3,-1
            set_digpot(set);
 274:	20 21 00 ff 	andi r1,r1,0xff
 278:	f8 00 02 00 	calli a78 <set_digpot>
        }
    else if(r1==0){;}
}
 27c:	2b 9d 00 04 	lw ra,(sp+4)
 280:	37 9c 00 04 	addi sp,sp,4
 284:	c3 a0 00 00 	ret

00000288 <ajustment>:
// Funciones GPIO
//********************************************************************************************


void ajustment(int *p, int *v, int *m)
{
 288:	37 9c ff c8 	addi sp,sp,-56
 28c:	5b 8b 00 38 	sw (sp+56),r11
 290:	5b 8c 00 34 	sw (sp+52),r12
 294:	5b 8d 00 30 	sw (sp+48),r13
 298:	5b 8e 00 2c 	sw (sp+44),r14
 29c:	5b 8f 00 28 	sw (sp+40),r15
 2a0:	5b 90 00 24 	sw (sp+36),r16
 2a4:	5b 91 00 20 	sw (sp+32),r17
 2a8:	5b 92 00 1c 	sw (sp+28),r18
 2ac:	5b 93 00 18 	sw (sp+24),r19
 2b0:	5b 94 00 14 	sw (sp+20),r20
 2b4:	5b 95 00 10 	sw (sp+16),r21
 2b8:	5b 96 00 0c 	sw (sp+12),r22
 2bc:	5b 97 00 08 	sw (sp+8),r23
 2c0:	5b 9d 00 04 	sw (sp+4),ra
 2c4:	78 0c 00 00 	mvhi r12,0x0
 2c8:	b8 20 a0 00 	mv r20,r1
 2cc:	b8 40 70 00 	mv r14,r2
 2d0:	b8 60 80 00 	mv r16,r3
    uint16_t seteo=0;
 2d4:	34 0b 00 00 	mvi r11,0
 2d8:	39 8c 0a 94 	ori r12,r12,0xa94
    uint8_t aux;
    while(seteo!=PAUSE)
        {
	    set_pin(1,3); //Prender el LED BLANCO
            if(seteo==MODO){
 2dc:	34 0d 00 02 	mvi r13,2
                if(*m==1){*m=2;set_pin(0,2);}
                else if(*m==2){*m=1;set_pin(1,2);}
                            }
            else if(seteo==VOLUP){
 2e0:	34 0f 00 04 	mvi r15,4
                    else if(aux==75){aux=99;}
                    else if(aux==99){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==VOLDW){
 2e4:	34 11 00 08 	mvi r17,8
                    else if(aux<=75 && aux>=15){aux=aux-15;}
                    else if(aux==0){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==PITCHUP){
 2e8:	34 12 00 10 	mvi r18,16
                    aux=*p;
                    if(aux>=0x002 && aux<=0x00E){aux++;}
 2ec:	34 16 00 0c 	mvi r22,12
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==VOLDW){
                    aux=*v;
                    if(aux==99){aux=75;}
 2f0:	34 15 00 63 	mvi r21,99
 2f4:	34 17 00 4b 	mvi r23,75
                    else if(aux<=75 && aux>=15){aux=aux-15;}
 2f8:	34 13 00 3c 	mvi r19,60
 2fc:	e0 00 00 0e 	bi 334 <ajustment+0xac>
	    set_pin(1,3); //Prender el LED BLANCO
            if(seteo==MODO){
                if(*m==1){*m=2;set_pin(0,2);}
                else if(*m==2){*m=1;set_pin(1,2);}
                            }
            else if(seteo==VOLUP){
 300:	45 6f 00 1a 	be r11,r15,368 <ajustment+0xe0>
                    else if(aux==75){aux=99;}
                    else if(aux==99){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==VOLDW){
 304:	45 71 00 1f 	be r11,r17,380 <ajustment+0xf8>
                    else if(aux<=75 && aux>=15){aux=aux-15;}
                    else if(aux==0){;}
                    *v=aux;
                    aux=0;
                                }
            else if(seteo==PITCHUP){
 308:	45 72 00 27 	be r11,r18,3a4 <ajustment+0x11c>
                    else if(aux==0x002){;}
                    *p=aux;
                    trigger_set0(aux);
                    aux=0;
                                }
            nsleep(2000);        //Para el rebote
 30c:	34 01 07 d0 	mvi r1,2000
 310:	f8 00 01 a9 	calli 9b4 <nsleep>
            seteo=gpio0->read;
 314:	29 82 00 00 	lw r2,(r12+0)
            seteo=seteo>>3;
            nsleep(2000);       //Para el rebote
 318:	34 01 07 d0 	mvi r1,2000
                    *p=aux;
                    trigger_set0(aux);
                    aux=0;
                                }
            nsleep(2000);        //Para el rebote
            seteo=gpio0->read;
 31c:	28 4b 00 00 	lw r11,(r2+0)
            seteo=seteo>>3;
            nsleep(2000);       //Para el rebote
 320:	f8 00 01 a5 	calli 9b4 <nsleep>

void ajustment(int *p, int *v, int *m)
{
    uint16_t seteo=0;
    uint8_t aux;
    while(seteo!=PAUSE)
 324:	34 04 00 01 	mvi r4,1
                    *p=aux;
                    trigger_set0(aux);
                    aux=0;
                                }
            nsleep(2000);        //Para el rebote
            seteo=gpio0->read;
 328:	21 6b 00 ff 	andi r11,r11,0xff
            seteo=seteo>>3;
 32c:	01 6b 00 03 	srui r11,r11,3

void ajustment(int *p, int *v, int *m)
{
    uint16_t seteo=0;
    uint8_t aux;
    while(seteo!=PAUSE)
 330:	45 64 00 2b 	be r11,r4,3dc <ajustment+0x154>
        {
	    set_pin(1,3); //Prender el LED BLANCO
 334:	34 01 00 01 	mvi r1,1
 338:	34 02 00 03 	mvi r2,3
 33c:	f8 00 01 6c 	calli 8ec <set_pin>
            if(seteo==MODO){
 340:	5d 6d ff f0 	bne r11,r13,300 <ajustment+0x78>
                if(*m==1){*m=2;set_pin(0,2);}
 344:	2a 02 00 00 	lw r2,(r16+0)
 348:	34 03 00 01 	mvi r3,1
 34c:	44 43 00 37 	be r2,r3,428 <ajustment+0x1a0>
                else if(*m==2){*m=1;set_pin(1,2);}
 350:	5c 4d ff ef 	bne r2,r13,30c <ajustment+0x84>
 354:	5a 03 00 00 	sw (r16+0),r3
 358:	34 01 00 01 	mvi r1,1
 35c:	34 02 00 02 	mvi r2,2
 360:	f8 00 01 63 	calli 8ec <set_pin>
 364:	e3 ff ff ea 	bi 30c <ajustment+0x84>
                            }
            else if(seteo==VOLUP){
                    aux=*v;
 368:	41 c2 00 03 	lbu r2,(r14+3)
                    if(aux>=0 && aux<=60){aux=aux+15;}
 36c:	54 53 00 17 	bgu r2,r19,3c8 <ajustment+0x140>
 370:	34 42 00 0f 	addi r2,r2,15
 374:	20 44 00 ff 	andi r4,r2,0xff
                    else if(aux==75){aux=99;}
                    else if(aux==99){;}
                    *v=aux;
 378:	59 c4 00 00 	sw (r14+0),r4
 37c:	e3 ff ff e4 	bi 30c <ajustment+0x84>
                    aux=0;
                                }
            else if(seteo==VOLDW){
                    aux=*v;
 380:	41 c3 00 03 	lbu r3,(r14+3)
                    if(aux==99){aux=75;}
 384:	34 02 00 4b 	mvi r2,75
 388:	44 75 00 05 	be r3,r21,39c <ajustment+0x114>
                    else if(aux<=75 && aux>=15){aux=aux-15;}
 38c:	34 62 ff f1 	addi r2,r3,-15
 390:	20 42 00 ff 	andi r2,r2,0xff
 394:	52 62 00 02 	bgeu r19,r2,39c <ajustment+0x114>
 398:	b8 60 10 00 	mv r2,r3
                    else if(aux==0){;}
                    *v=aux;
 39c:	59 c2 00 00 	sw (r14+0),r2
 3a0:	e3 ff ff db 	bi 30c <ajustment+0x84>
                    aux=0;
                                }
            else if(seteo==PITCHUP){
                    aux=*p;
 3a4:	42 81 00 03 	lbu r1,(r20+3)
                    if(aux>=0x002 && aux<=0x00E){aux++;}
 3a8:	34 22 ff fe 	addi r2,r1,-2
 3ac:	20 42 00 ff 	andi r2,r2,0xff
 3b0:	54 56 00 03 	bgu r2,r22,3bc <ajustment+0x134>
 3b4:	34 21 00 01 	addi r1,r1,1
 3b8:	20 21 00 ff 	andi r1,r1,0xff
                    else if(aux==0x00F){;}
                    *p=aux;
 3bc:	5a 81 00 00 	sw (r20+0),r1
                    trigger_set0(aux);
 3c0:	f8 00 01 9a 	calli a28 <trigger_set0>
 3c4:	e3 ff ff d2 	bi 30c <ajustment+0x84>
                else if(*m==2){*m=1;set_pin(1,2);}
                            }
            else if(seteo==VOLUP){
                    aux=*v;
                    if(aux>=0 && aux<=60){aux=aux+15;}
                    else if(aux==75){aux=99;}
 3c8:	34 04 00 63 	mvi r4,99
 3cc:	44 57 ff eb 	be r2,r23,378 <ajustment+0xf0>
 3d0:	b8 40 20 00 	mv r4,r2
                    else if(aux==99){;}
                    *v=aux;
 3d4:	59 c4 00 00 	sw (r14+0),r4
 3d8:	e3 ff ff cd 	bi 30c <ajustment+0x84>
            seteo=gpio0->read;
            seteo=seteo>>3;
            nsleep(2000);       //Para el rebote

        }
		set_pin(0,3); //Apagar el LED BLANCO
 3dc:	34 01 00 00 	mvi r1,0
 3e0:	34 02 00 03 	mvi r2,3
 3e4:	f8 00 01 42 	calli 8ec <set_pin>

}
 3e8:	2b 9d 00 04 	lw ra,(sp+4)
 3ec:	2b 8b 00 38 	lw r11,(sp+56)
 3f0:	2b 8c 00 34 	lw r12,(sp+52)
 3f4:	2b 8d 00 30 	lw r13,(sp+48)
 3f8:	2b 8e 00 2c 	lw r14,(sp+44)
 3fc:	2b 8f 00 28 	lw r15,(sp+40)
 400:	2b 90 00 24 	lw r16,(sp+36)
 404:	2b 91 00 20 	lw r17,(sp+32)
 408:	2b 92 00 1c 	lw r18,(sp+28)
 40c:	2b 93 00 18 	lw r19,(sp+24)
 410:	2b 94 00 14 	lw r20,(sp+20)
 414:	2b 95 00 10 	lw r21,(sp+16)
 418:	2b 96 00 0c 	lw r22,(sp+12)
 41c:	2b 97 00 08 	lw r23,(sp+8)
 420:	37 9c 00 38 	addi sp,sp,56
 424:	c3 a0 00 00 	ret
    uint8_t aux;
    while(seteo!=PAUSE)
        {
	    set_pin(1,3); //Prender el LED BLANCO
            if(seteo==MODO){
                if(*m==1){*m=2;set_pin(0,2);}
 428:	5a 0d 00 00 	sw (r16+0),r13
 42c:	34 01 00 00 	mvi r1,0
 430:	34 02 00 02 	mvi r2,2
 434:	f8 00 01 2e 	calli 8ec <set_pin>
 438:	e3 ff ff b5 	bi 30c <ajustment+0x84>

0000043c <main>:
//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
{
 43c:	37 9c ff bc 	addi sp,sp,-68
 440:	5b 8b 00 44 	sw (sp+68),r11
 444:	5b 8c 00 40 	sw (sp+64),r12
 448:	5b 8d 00 3c 	sw (sp+60),r13
 44c:	5b 8e 00 38 	sw (sp+56),r14
 450:	5b 8f 00 34 	sw (sp+52),r15
 454:	5b 90 00 30 	sw (sp+48),r16
 458:	5b 91 00 2c 	sw (sp+44),r17
 45c:	5b 92 00 28 	sw (sp+40),r18
 460:	5b 93 00 24 	sw (sp+36),r19
 464:	5b 94 00 20 	sw (sp+32),r20
 468:	5b 95 00 1c 	sw (sp+28),r21
 46c:	5b 96 00 18 	sw (sp+24),r22
 470:	5b 97 00 14 	sw (sp+20),r23
 474:	5b 98 00 10 	sw (sp+16),r24
 478:	5b 99 00 0c 	sw (sp+12),r25
 47c:	5b 9b 00 08 	sw (sp+8),fp
 480:	5b 9d 00 04 	sw (sp+4),ra
    


//Inicializacion de perifericos

gpio_init(0x01); //9BITS  6 ENTRADAS(BOTONES) 3 SALIDAS(2 LEDS Y PWM) PIN1:PWM - PIN2:MODO - PIN3: LEDBLANCO
 484:	34 01 00 01 	mvi r1,1
 488:	f8 00 01 0a 	calli 8b0 <gpio_init>
/*trigger_set0(pitch); // 10us a 50 ms
trigger_set1(pitch); // 10us a 50 ms*/
set_digpot(0x64); //0  Ohms
 48c:	34 01 00 64 	mvi r1,100
 490:	f8 00 01 7a 	calli a78 <set_digpot>
 494:	34 13 00 03 	mvi r19,3
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = l*6;			//Escala a dos octavas (14)
	    msleep(500);

	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
 498:	34 17 00 04 	mvi r23,4
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 49c:	34 15 00 4b 	mvi r21,75
        
	for (l = 1; l < 15; l++)
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = l*6;			//Escala a dos octavas (14)
	    msleep(500);
 4a0:	34 01 01 f4 	mvi r1,500
 4a4:	f8 00 01 35 	calli 978 <msleep>

	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
 4a8:	52 f3 00 2f 	bgeu r23,r19,564 <main+0x128>
        else if (c1 > 8 && c1 < 14){b1 = 162; b3 = 18; c3 = 130; c2 = 20987;}
 4ac:	36 61 ff fa 	addi r1,r19,-6
 4b0:	20 21 00 ff 	andi r1,r1,0xff
 4b4:	52 e1 00 68 	bgeu r23,r1,654 <main+0x218>
	else if (c1 > 14 && c1 < 20){b1 = 144; b3 = 36; c3 = 146; c2 = 20741;}
 4b8:	36 61 ff f4 	addi r1,r19,-12
 4bc:	20 21 00 ff 	andi r1,r1,0xff
 4c0:	52 e1 00 6c 	bgeu r23,r1,670 <main+0x234>
	else if (c1 > 20 && c1 < 26){b1 = 138; b3 = 42; c3 = 150; c2 = 20741;}
 4c4:	36 61 ff ee 	addi r1,r19,-18
 4c8:	20 21 00 ff 	andi r1,r1,0xff
 4cc:	52 e1 00 70 	bgeu r23,r1,68c <main+0x250>
	else if (c1 > 26 && c1 < 32){b1 = 124; b3 = 56; c3 = 166; c2 = 20741;}
 4d0:	36 61 ff e8 	addi r1,r19,-24
 4d4:	20 21 00 ff 	andi r1,r1,0xff
 4d8:	52 e1 00 74 	bgeu r23,r1,6a8 <main+0x26c>
	else if (c1 > 32 && c1 < 38){b1 = 112; b3 = 68; c3 = 181; c2 = 20495;}
 4dc:	36 61 ff e2 	addi r1,r19,-30
 4e0:	20 21 00 ff 	andi r1,r1,0xff
 4e4:	52 e1 00 78 	bgeu r23,r1,6c4 <main+0x288>
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
 4e8:	36 61 ff dc 	addi r1,r19,-36
 4ec:	20 21 00 ff 	andi r1,r1,0xff
 4f0:	52 e1 00 7c 	bgeu r23,r1,6e0 <main+0x2a4>
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
 4f4:	36 61 ff d6 	addi r1,r19,-42
 4f8:	20 21 00 ff 	andi r1,r1,0xff
 4fc:	52 e1 00 80 	bgeu r23,r1,6fc <main+0x2c0>
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
 500:	36 61 ff d0 	addi r1,r19,-48
 504:	20 21 00 ff 	andi r1,r1,0xff
 508:	52 e1 00 84 	bgeu r23,r1,718 <main+0x2dc>
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
 50c:	36 61 ff ca 	addi r1,r19,-54
 510:	20 21 00 ff 	andi r1,r1,0xff
 514:	52 e1 00 88 	bgeu r23,r1,734 <main+0x2f8>
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
 518:	36 61 ff c4 	addi r1,r19,-60
 51c:	20 21 00 ff 	andi r1,r1,0xff
 520:	52 e1 00 a1 	bgeu r23,r1,7a4 <main+0x368>
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
 524:	36 61 ff be 	addi r1,r19,-66
 528:	20 21 00 ff 	andi r1,r1,0xff
 52c:	52 e1 00 97 	bgeu r23,r1,788 <main+0x34c>
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
 530:	36 61 ff b8 	addi r1,r19,-72
 534:	20 21 00 ff 	andi r1,r1,0xff
 538:	52 e1 00 8d 	bgeu r23,r1,76c <main+0x330>
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
 53c:	36 61 ff b2 	addi r1,r19,-78
 540:	20 21 00 ff 	andi r1,r1,0xff
 544:	52 e1 00 83 	bgeu r23,r1,750 <main+0x314>
	
	b4 = 21 + b3;
 548:	37 72 00 15 	addi r18,fp,21
 54c:	22 52 00 ff 	andi r18,r18,0xff
    
    	for (i=1; i<b4;i++)
 550:	34 01 00 01 	mvi r1,1
 554:	50 32 00 29 	bgeu r1,r18,5f8 <main+0x1bc>
 558:	37 2e 00 4c 	addi r14,r25,76
 55c:	21 ce 00 ff 	andi r14,r14,0xff
 560:	e0 00 00 07 	bi 57c <main+0x140>
	{
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = l*6;			//Escala a dos octavas (14)
	    msleep(500);

	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
 564:	34 0e 00 00 	mvi r14,0
 568:	34 12 00 15 	mvi r18,21
 56c:	34 0f 00 76 	mvi r15,118
 570:	34 18 00 fb 	mvi r24,251
 574:	34 1b 00 00 	mvi fp,0
 578:	34 19 00 b4 	mvi r25,180
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 57c:	09 f4 00 4b 	muli r20,r15,75

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 580:	c8 0f 80 00 	sub r16,r0,r15
//Inicializacion de perifericos

gpio_init(0x01); //9BITS  6 ENTRADAS(BOTONES) 3 SALIDAS(2 LEDS Y PWM) PIN1:PWM - PIN2:MODO - PIN3: LEDBLANCO
/*trigger_set0(pitch); // 10us a 50 ms
trigger_set1(pitch); // 10us a 50 ms*/
set_digpot(0x64); //0  Ohms
 584:	34 11 00 01 	mvi r17,1
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 588:	22 94 00 ff 	andi r20,r20,0xff

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 58c:	cb 14 b0 00 	sub r22,r24,r20
 590:	22 10 00 ff 	andi r16,r16,0xff
 594:	22 d6 00 ff 	andi r22,r22,0xff
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 598:	52 ae 00 15 	bgeu r21,r14,5ec <main+0x1b0>
 59c:	ba 80 68 00 	mv r13,r20

//**************************************************************************************************
// Función principal del codigo - Inicialización de Perifericos
//**************************************************************************************************

int main()
 5a0:	ba c0 60 00 	mv r12,r22
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 5a4:	34 0b 00 4b 	mvi r11,75
                {
                    c4 = j*c3;
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
 5a8:	34 02 00 01 	mvi r2,1
 5ac:	34 01 00 01 	mvi r1,1
 5b0:	f8 00 00 cf 	calli 8ec <set_pin>
   	            nsleep(c4);
 5b4:	b9 a0 08 00 	mv r1,r13
 5b8:	f8 00 00 ff 	calli 9b4 <nsleep>
	            set_pin(0,1);
 5bc:	34 02 00 01 	mvi r2,1
 5c0:	34 01 00 00 	mvi r1,0
 5c4:	f8 00 00 ca 	calli 8ec <set_pin>
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 5c8:	35 6b 00 01 	addi r11,r11,1
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 5cc:	b9 80 08 00 	mv r1,r12
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 5d0:	b5 af 68 00 	add r13,r13,r15
 5d4:	b5 90 60 00 	add r12,r12,r16
 5d8:	21 6b 00 ff 	andi r11,r11,0xff
                    c5 = c2-c4;
	 
                    set_pin(1,1);			//se asigna el ciclo util por tiempo
   	            nsleep(c4);
	            set_pin(0,1);
	            nsleep(c5);
 5dc:	f8 00 00 f6 	calli 9b4 <nsleep>
    
    	for (i=1; i<b4;i++)
	    {
	        b2 = b1+76;

	        for (j=75; j<b2; j++)			//recorre cada una de las muestras (b1 tercera octava)
 5e0:	21 ad 00 ff 	andi r13,r13,0xff
 5e4:	21 8c 00 ff 	andi r12,r12,0xff
 5e8:	55 cb ff f0 	bgu r14,r11,5a8 <main+0x16c>
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
	
	b4 = 21 + b3;
    
    	for (i=1; i<b4;i++)
 5ec:	36 31 00 01 	addi r17,r17,1
 5f0:	22 31 00 ff 	andi r17,r17,0xff
 5f4:	56 51 ff e9 	bgu r18,r17,598 <main+0x15c>
 5f8:	36 73 00 06 	addi r19,r19,6
 5fc:	22 73 00 ff 	andi r19,r19,0xff
va=0; //Volumen actual



        
	for (l = 1; l < 15; l++)
 600:	34 01 00 57 	mvi r1,87
 604:	5e 61 ff a7 	bne r19,r1,4a0 <main+0x64>
	}
    



}
 608:	2b 9d 00 04 	lw ra,(sp+4)
 60c:	2b 8b 00 44 	lw r11,(sp+68)
 610:	2b 8c 00 40 	lw r12,(sp+64)
 614:	2b 8d 00 3c 	lw r13,(sp+60)
 618:	2b 8e 00 38 	lw r14,(sp+56)
 61c:	2b 8f 00 34 	lw r15,(sp+52)
 620:	2b 90 00 30 	lw r16,(sp+48)
 624:	2b 91 00 2c 	lw r17,(sp+44)
 628:	2b 92 00 28 	lw r18,(sp+40)
 62c:	2b 93 00 24 	lw r19,(sp+36)
 630:	2b 94 00 20 	lw r20,(sp+32)
 634:	2b 95 00 1c 	lw r21,(sp+28)
 638:	2b 96 00 18 	lw r22,(sp+24)
 63c:	2b 97 00 14 	lw r23,(sp+20)
 640:	2b 98 00 10 	lw r24,(sp+16)
 644:	2b 99 00 0c 	lw r25,(sp+12)
 648:	2b 9b 00 08 	lw fp,(sp+8)
 64c:	37 9c 00 44 	addi sp,sp,68
 650:	c3 a0 00 00 	ret
	    //c1 = 6+(l*10);		//Escala a una octava (7)	     
	    c1 = l*6;			//Escala a dos octavas (14)
	    msleep(500);

	if (c1 > 2 && c1 < 8){b1 = 180; b3 = 0; c3 = 118; c2 = 20987;}		//selección de la nota dependiendo la distancia
        else if (c1 > 8 && c1 < 14){b1 = 162; b3 = 18; c3 = 130; c2 = 20987;}
 654:	34 0e 00 ee 	mvi r14,238
 658:	34 12 00 27 	mvi r18,39
 65c:	34 0f 00 82 	mvi r15,130
 660:	34 18 00 fb 	mvi r24,251
 664:	34 1b 00 12 	mvi fp,18
 668:	34 19 00 a2 	mvi r25,162
 66c:	e3 ff ff c4 	bi 57c <main+0x140>
	else if (c1 > 14 && c1 < 20){b1 = 144; b3 = 36; c3 = 146; c2 = 20741;}
 670:	34 0e 00 dc 	mvi r14,220
 674:	34 12 00 39 	mvi r18,57
 678:	34 0f 00 92 	mvi r15,146
 67c:	34 18 00 05 	mvi r24,5
 680:	34 1b 00 24 	mvi fp,36
 684:	34 19 00 90 	mvi r25,144
 688:	e3 ff ff bd 	bi 57c <main+0x140>
	else if (c1 > 20 && c1 < 26){b1 = 138; b3 = 42; c3 = 150; c2 = 20741;}
 68c:	34 0e 00 d6 	mvi r14,214
 690:	34 12 00 3f 	mvi r18,63
 694:	34 0f 00 96 	mvi r15,150
 698:	34 18 00 05 	mvi r24,5
 69c:	34 1b 00 2a 	mvi fp,42
 6a0:	34 19 00 8a 	mvi r25,138
 6a4:	e3 ff ff b6 	bi 57c <main+0x140>
	else if (c1 > 26 && c1 < 32){b1 = 124; b3 = 56; c3 = 166; c2 = 20741;}
 6a8:	34 0e 00 c8 	mvi r14,200
 6ac:	34 12 00 4d 	mvi r18,77
 6b0:	34 0f 00 a6 	mvi r15,166
 6b4:	34 18 00 05 	mvi r24,5
 6b8:	34 1b 00 38 	mvi fp,56
 6bc:	34 19 00 7c 	mvi r25,124
 6c0:	e3 ff ff af 	bi 57c <main+0x140>
	else if (c1 > 32 && c1 < 38){b1 = 112; b3 = 68; c3 = 181; c2 = 20495;}
 6c4:	34 0e 00 bc 	mvi r14,188
 6c8:	34 12 00 59 	mvi r18,89
 6cc:	34 0f 00 b5 	mvi r15,181
 6d0:	34 18 00 0f 	mvi r24,15
 6d4:	34 1b 00 44 	mvi fp,68
 6d8:	34 19 00 70 	mvi r25,112
 6dc:	e3 ff ff a8 	bi 57c <main+0x140>
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
 6e0:	34 0e 00 b0 	mvi r14,176
 6e4:	34 12 00 65 	mvi r18,101
 6e8:	34 0f 00 ca 	mvi r15,202
 6ec:	34 18 00 0f 	mvi r24,15
 6f0:	34 1b 00 50 	mvi fp,80
 6f4:	34 19 00 64 	mvi r25,100
 6f8:	e3 ff ff a1 	bi 57c <main+0x140>
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
 6fc:	34 0e 00 a6 	mvi r14,166
 700:	34 12 00 6f 	mvi r18,111
 704:	34 0f 00 ec 	mvi r15,236
 708:	34 18 00 fb 	mvi r24,251
 70c:	34 1b 00 5a 	mvi fp,90
 710:	34 19 00 5a 	mvi r25,90
 714:	e3 ff ff 9a 	bi 57c <main+0x140>
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
 718:	34 0e 00 9d 	mvi r14,157
 71c:	34 12 00 78 	mvi r18,120
 720:	34 0f 00 04 	mvi r15,4
 724:	34 18 00 fb 	mvi r24,251
 728:	34 1b 00 63 	mvi fp,99
 72c:	34 19 00 51 	mvi r25,81
 730:	e3 ff ff 93 	bi 57c <main+0x140>
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
 734:	34 0e 00 94 	mvi r14,148
 738:	34 12 00 81 	mvi r18,129
 73c:	34 0f 00 25 	mvi r15,37
 740:	34 18 00 05 	mvi r24,5
 744:	34 1b 00 6c 	mvi fp,108
 748:	34 19 00 48 	mvi r25,72
 74c:	e3 ff ff 8c 	bi 57c <main+0x140>
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
        else if (c1 > 80 && c1 < 86){b1 = 50; b3 = 130; c3 = 405; c2 = 20495;}
 750:	34 0e 00 7e 	mvi r14,126
 754:	34 12 00 97 	mvi r18,151
 758:	34 0f 00 95 	mvi r15,149
 75c:	34 18 00 0f 	mvi r24,15
 760:	34 1b 00 82 	mvi fp,130
 764:	34 19 00 32 	mvi r25,50
 768:	e3 ff ff 85 	bi 57c <main+0x140>
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
	else if (c1 > 74 && c1 < 80){b1 = 56; b3 = 124; c3 = 362; c2 = 20495;}
 76c:	34 0e 00 84 	mvi r14,132
 770:	34 12 00 91 	mvi r18,145
 774:	34 0f 00 6a 	mvi r15,106
 778:	34 18 00 0f 	mvi r24,15
 77c:	34 1b 00 7c 	mvi fp,124
 780:	34 19 00 38 	mvi r25,56
 784:	e3 ff ff 7e 	bi 57c <main+0x140>
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
	else if (c1 > 68 && c1 < 74){b1 = 62; b3 = 118; c3 = 332; c2 = 20741;}
 788:	34 0e 00 8a 	mvi r14,138
 78c:	34 12 00 8b 	mvi r18,139
 790:	34 0f 00 4c 	mvi r15,76
 794:	34 18 00 05 	mvi r24,5
 798:	34 1b 00 76 	mvi fp,118
 79c:	34 19 00 3e 	mvi r25,62
 7a0:	e3 ff ff 77 	bi 57c <main+0x140>
	else if (c1 > 32 && c1 < 38){b1 = 112; b3 = 68; c3 = 181; c2 = 20495;}
        else if (c1 > 38 && c1 < 44){b1 = 100; b3 = 80; c3 = 202; c2 = 20495;}
	else if (c1 > 44 && c1 < 50){b1 = 90; b3 = 90; c3 = 236; c2 = 20987;}
        else if (c1 > 50 && c1 < 56){b1 = 81; b3 = 99; c3 = 260; c2 = 20987;}
	else if (c1 > 56 && c1 < 62){b1 = 72; b3 = 108; c3 = 293; c2 = 20741;}
	else if (c1 > 62 && c1 < 68){b1 = 69; b3 = 111; c3 = 301; c2 = 20741;}
 7a4:	34 0e 00 91 	mvi r14,145
 7a8:	34 12 00 84 	mvi r18,132
 7ac:	34 0f 00 2d 	mvi r15,45
 7b0:	34 18 00 05 	mvi r24,5
 7b4:	34 1b 00 6f 	mvi fp,111
 7b8:	34 19 00 45 	mvi r25,69
 7bc:	e3 ff ff 70 	bi 57c <main+0x140>

000007c0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 7c0:	c3 a0 00 00 	ret

000007c4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 7c4:	78 01 00 00 	mvhi r1,0x0
 7c8:	38 21 0b 24 	ori r1,r1,0xb24
 7cc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 7d0:	78 02 00 00 	mvhi r2,0x0
 7d4:	38 42 0a 90 	ori r2,r2,0xa90
 7d8:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 7dc:	34 63 00 01 	addi r3,r3,1
 7e0:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 7e4:	34 01 00 0e 	mvi r1,14
 7e8:	58 41 00 00 	sw (r2+0),r1
}
 7ec:	c3 a0 00 00 	ret

000007f0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 7f0:	37 9c ff f0 	addi sp,sp,-16
 7f4:	5b 8b 00 10 	sw (sp+16),r11
 7f8:	5b 8c 00 0c 	sw (sp+12),r12
 7fc:	5b 8d 00 08 	sw (sp+8),r13
 800:	5b 9d 00 04 	sw (sp+4),ra
 804:	78 0b 00 00 	mvhi r11,0x0
 808:	39 6b 0a a4 	ori r11,r11,0xaa4
 80c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 810:	35 6d 00 80 	addi r13,r11,128
 814:	e0 00 00 04 	bi 824 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 818:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 81c:	45 6d 00 08 	be r11,r13,83c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 820:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 824:	21 81 00 01 	andi r1,r12,0x1
 828:	44 20 ff fc 	be r1,r0,818 <irq_handler+0x28>
 82c:	29 61 00 00 	lw r1,(r11+0)
 830:	35 6b 00 04 	addi r11,r11,4
 834:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 838:	5d 6d ff fa 	bne r11,r13,820 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 83c:	2b 9d 00 04 	lw ra,(sp+4)
 840:	2b 8b 00 10 	lw r11,(sp+16)
 844:	2b 8c 00 0c 	lw r12,(sp+12)
 848:	2b 8d 00 08 	lw r13,(sp+8)
 84c:	37 9c 00 10 	addi sp,sp,16
 850:	c3 a0 00 00 	ret

00000854 <isr_init>:

void isr_init()
{
 854:	78 01 00 00 	mvhi r1,0x0
 858:	78 02 00 00 	mvhi r2,0x0
 85c:	38 21 0a a4 	ori r1,r1,0xaa4
 860:	38 42 07 c0 	ori r2,r2,0x7c0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 864:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 868:	58 22 00 00 	sw (r1+0),r2
 86c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 870:	5c 23 ff fe 	bne r1,r3,868 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 874:	c3 a0 00 00 	ret

00000878 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 878:	78 03 00 00 	mvhi r3,0x0
 87c:	3c 21 00 02 	sli r1,r1,2
 880:	38 63 0a a4 	ori r3,r3,0xaa4
 884:	b4 61 18 00 	add r3,r3,r1
 888:	58 62 00 00 	sw (r3+0),r2
}
 88c:	c3 a0 00 00 	ret

00000890 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 890:	78 03 00 00 	mvhi r3,0x0
 894:	3c 21 00 02 	sli r1,r1,2
 898:	38 63 0a a4 	ori r3,r3,0xaa4
 89c:	78 02 00 00 	mvhi r2,0x0
 8a0:	b4 61 18 00 	add r3,r3,r1
 8a4:	38 42 07 c0 	ori r2,r2,0x7c0
 8a8:	58 62 00 00 	sw (r3+0),r2
}
 8ac:	c3 a0 00 00 	ret

000008b0 <gpio_init>:
// Estructura del periferico GPIO
//*************************************************************************

void gpio_init(uint32_t k)
{
	gpio0->dir=k; //todo lo que sea 0 es puerto lectura, 1 es puerto escritura o salida
 8b0:	78 02 00 00 	mvhi r2,0x0
 8b4:	38 42 0a 94 	ori r2,r2,0xa94
 8b8:	28 42 00 00 	lw r2,(r2+0)
 8bc:	58 41 00 08 	sw (r2+8),r1
}
 8c0:	c3 a0 00 00 	ret

000008c4 <gpio_read>:

uint32_t gpio_read()
{
	return gpio0->read;
 8c4:	78 01 00 00 	mvhi r1,0x0
 8c8:	38 21 0a 94 	ori r1,r1,0xa94
 8cc:	28 21 00 00 	lw r1,(r1+0)
 8d0:	28 21 00 00 	lw r1,(r1+0)
}
 8d4:	c3 a0 00 00 	ret

000008d8 <gpio_write>:

void gpio_write(uint32_t k)
{
	gpio0->write=k;
 8d8:	78 02 00 00 	mvhi r2,0x0
 8dc:	38 42 0a 94 	ori r2,r2,0xa94
 8e0:	28 42 00 00 	lw r2,(r2+0)
 8e4:	58 41 00 04 	sw (r2+4),r1
}
 8e8:	c3 a0 00 00 	ret

000008ec <set_pin>:


void set_pin(uint8_t value, uint8_t npin)
{
 8ec:	20 21 00 ff 	andi r1,r1,0xff
 8f0:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 8f4:	5c 20 00 09 	bne r1,r0,918 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 8f8:	78 01 00 00 	mvhi r1,0x0
 8fc:	38 21 0a 94 	ori r1,r1,0xa94
 900:	28 21 00 00 	lw r1,(r1+0)
 904:	a4 40 10 00 	not r2,r2
 908:	28 23 00 00 	lw r3,(r1+0)
 90c:	a0 43 10 00 	and r2,r2,r3
 910:	58 22 00 04 	sw (r1+4),r2
 914:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 918:	78 01 00 00 	mvhi r1,0x0
 91c:	38 21 0a 94 	ori r1,r1,0xa94
 920:	28 21 00 00 	lw r1,(r1+0)
 924:	28 23 00 00 	lw r3,(r1+0)
 928:	b8 43 10 00 	or r2,r2,r3
 92c:	58 22 00 04 	sw (r1+4),r2
 930:	c3 a0 00 00 	ret

00000934 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 934:	78 02 00 00 	mvhi r2,0x0
 938:	38 42 0a 94 	ori r2,r2,0xa94
 93c:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 940:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 944:	28 43 00 00 	lw r3,(r2+0)
 948:	a4 60 18 00 	not r3,r3
}


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 94c:	a0 23 18 00 	and r3,r1,r3
 950:	5c 60 00 06 	bne r3,r0,968 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 954:	28 43 00 00 	lw r3,(r2+0)
 958:	a4 20 08 00 	not r1,r1
 95c:	a0 23 08 00 	and r1,r1,r3
 960:	58 41 00 04 	sw (r2+4),r1
 964:	c3 a0 00 00 	ret


void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 968:	28 43 00 00 	lw r3,(r2+0)
 96c:	b8 23 08 00 	or r1,r1,r3
 970:	58 41 00 04 	sw (r2+4),r1
 974:	c3 a0 00 00 	ret

00000978 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 978:	78 04 00 00 	mvhi r4,0x0
 97c:	38 84 0a 8c 	ori r4,r4,0xa8c
 980:	28 83 00 00 	lw r3,(r4+0)
 984:	78 02 00 00 	mvhi r2,0x0
 988:	38 42 0a 90 	ori r2,r2,0xa90
 98c:	28 42 00 00 	lw r2,(r2+0)
 990:	88 23 08 00 	mul r1,r1,r3
 994:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 998:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 99c:	34 01 00 08 	mvi r1,8
 9a0:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 9a4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 9a8:	20 21 00 01 	andi r1,r1,0x1
 9ac:	44 20 ff fe 	be r1,r0,9a4 <msleep+0x2c>
}
 9b0:	c3 a0 00 00 	ret

000009b4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 9b4:	78 02 00 00 	mvhi r2,0x0
 9b8:	38 42 0a 90 	ori r2,r2,0xa90
 9bc:	28 42 00 00 	lw r2,(r2+0)
 9c0:	08 21 00 64 	muli r1,r1,100
 9c4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 9c8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 9cc:	34 01 00 08 	mvi r1,8
 9d0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 9d4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 9d8:	20 21 00 01 	andi r1,r1,0x1
 9dc:	44 20 ff fe 	be r1,r0,9d4 <nsleep+0x20>
}
 9e0:	c3 a0 00 00 	ret

000009e4 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 9e4:	78 01 00 00 	mvhi r1,0x0
 9e8:	38 21 0a 90 	ori r1,r1,0xa90
 9ec:	28 23 00 00 	lw r3,(r1+0)
 9f0:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 9f4:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 9f8:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 9fc:	38 21 0b 24 	ori r1,r1,0xb24

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 a00:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 a04:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 a08:	78 02 00 00 	mvhi r2,0x0
 a0c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 a10:	34 04 00 0e 	mvi r4,14
 a14:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 a18:	38 21 0a a4 	ori r1,r1,0xaa4
 a1c:	38 42 07 c4 	ori r2,r2,0x7c4
 a20:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 a24:	c3 a0 00 00 	ret

00000a28 <trigger_set0>:
//***************************************************************************
// Estructura del periferico TRIGGER 0 
//***************************************************************************
void trigger_set0(uint32_t st)
{
    trigger0->set_trig = st;
 a28:	78 02 00 00 	mvhi r2,0x0
 a2c:	38 42 0a 9c 	ori r2,r2,0xa9c
 a30:	28 42 00 00 	lw r2,(r2+0)
 a34:	58 41 00 00 	sw (r2+0),r1
}
 a38:	c3 a0 00 00 	ret

00000a3c <read_count0>:

uint32_t read_count0()
{
    return trigger0->c_out;
 a3c:	78 01 00 00 	mvhi r1,0x0
 a40:	38 21 0a 9c 	ori r1,r1,0xa9c
 a44:	28 21 00 00 	lw r1,(r1+0)
 a48:	28 21 00 04 	lw r1,(r1+4)
}
 a4c:	c3 a0 00 00 	ret

00000a50 <trigger_set1>:
//***************************************************************************
// Estructura del periferico TRIGGER 1
//***************************************************************************
void trigger_set1(uint32_t st)
{
    trigger1->set_trig = st;
 a50:	78 02 00 00 	mvhi r2,0x0
 a54:	38 42 0a a0 	ori r2,r2,0xaa0
 a58:	28 42 00 00 	lw r2,(r2+0)
 a5c:	58 41 00 00 	sw (r2+0),r1
}
 a60:	c3 a0 00 00 	ret

00000a64 <read_count1>:

uint32_t read_count1()
{
    return trigger1->c_out;
 a64:	78 01 00 00 	mvhi r1,0x0
 a68:	38 21 0a a0 	ori r1,r1,0xaa0
 a6c:	28 21 00 00 	lw r1,(r1+0)
 a70:	28 21 00 04 	lw r1,(r1+4)
}
 a74:	c3 a0 00 00 	ret

00000a78 <set_digpot>:
// Estructura del periferico DIGPOT
//***************************************************************************

void set_digpot(uint32_t dp)
{
    digpot0->set_digpot = dp;
 a78:	78 02 00 00 	mvhi r2,0x0
 a7c:	38 42 0a 98 	ori r2,r2,0xa98
 a80:	28 42 00 00 	lw r2,(r2+0)
 a84:	58 41 00 00 	sw (r2+0),r1

}
 a88:	c3 a0 00 00 	ret
